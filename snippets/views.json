{
    "hook_views_data": {
        "prefix": "hook_views_data",
        "body": [
            "\/**",
            " * Implements hook_views_data().",
            " *\/",
            "function hook_views_data() {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ This example describes how to write hook_views_data() for the following",
            " *  \/\/ table:",
            " *  \/\/",
            " *  \/\/ CREATE TABLE example_table (",
            " *  \/\/   nid INT(11) NOT NULL         COMMENT 'Primary key; refers to {node}",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Describes data tables (or the equivalent) to Views.",
        "scope": "text.php"
    },
    "hook_field_views_data_views_data_alter": {
        "prefix": "hook_field_views_data_views_data_alter",
        "body": [
            "\/**",
            " * Implements hook_field_views_data_views_data_alter().",
            " *\/",
            "function hook_field_views_data_views_data_alter(&$data, $field) {",
            "\/**",
            " * Sample code from the api example:",
            " *  $field_name = $field['field_name'];",
            " *  $data_key = 'field_data_' . $field_name;",
            " *  \/\/ Views data for this field is in $data[$data_key]",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the views data on a per field basis.",
        "scope": "text.php"
    },
    "hook_views_plugins_alter": {
        "prefix": "hook_views_plugins_alter",
        "body": [
            "\/**",
            " * Implements hook_views_plugins_alter().",
            " *\/",
            "function hook_views_plugins_alter(&$plugins) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Add apachesolr to the base of the node row plugin.",
            " *  $plugins['row']['node']['base'][] = 'apachesolr';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter existing plugins data, defined by modules.",
        "scope": "text.php"
    },
    "hook_views_api": {
        "prefix": "hook_views_api",
        "body": [
            "\/**",
            " * Implements hook_views_api().",
            " *\/",
            "function hook_views_api() {",
            "\/**",
            " * Sample code from the api example:",
            " *  return array(",
            " *    'api' => 3,",
            " *    'path' => drupal_get_path('module', 'example') . '\/includes\/views',",
            " *    'template path' => drupal_get_path('module', 'example') . '\/themes',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Register View API information.",
        "scope": "text.php"
    },
    "hook_views_default_views_alter": {
        "prefix": "hook_views_default_views_alter",
        "body": [
            "\/**",
            " * Implements hook_views_default_views_alter().",
            " *\/",
            "function hook_views_default_views_alter(&$views) {",
            "\/**",
            " * Sample code from the api example:",
            " *  if (isset($views['taxonomy_term'])) {",
            " *    $views['taxonomy_term']->display['default']->display_options['title'] = 'Categories';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter default views defined by other modules.",
        "scope": "text.php"
    },
    "hook_views_query_substitutions": {
        "prefix": "hook_views_query_substitutions",
        "body": [
            "\/**",
            " * Implements hook_views_query_substitutions().",
            " *\/",
            "function hook_views_query_substitutions($view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Example from views_views_query_substitutions().",
            " *  global $language_content;",
            " *  return array(",
            " *    '***CURRENT_VERSION***' => VERSION,",
            " *    '***CURRENT_TIME***' => REQUEST_TIME,",
            " *    '***CURRENT_LANGUAGE***' => $language_content->language,",
            " *    '***DEFAULT_LANGUAGE***' => language_default('language'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Performs replacements in the query before being performed.",
        "scope": "text.php"
    },
    "hook_views_form_substitutions": {
        "prefix": "hook_views_form_substitutions",
        "body": [
            "\/**",
            " * Implements hook_views_form_substitutions().",
            " *\/",
            "function hook_views_form_substitutions() {",
            "\/**",
            " * Sample code from the api example:",
            " *  return array(",
            " *    '<!--views-form-example-substitutions-->' => 'Example Substitution',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook is called to get a list of placeholders and their substitutions,",
        "scope": "text.php"
    },
    "hook_views_pre_view": {
        "prefix": "hook_views_pre_view",
        "body": [
            "\/**",
            " * Implements hook_views_pre_view().",
            " *\/",
            "function hook_views_pre_view(&$view, &$display_id, &$args) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Change the display if the acting user has 'administer site configuration'",
            " *  \/\/ permission, to display something radically different.",
            " *  \/\/ (Note that this is not necessarily the best way to solve that task. Feel",
            " *  \/\/ free to contribute another example!)",
            " *  if (",
            " *    $view->name == 'my_special_view' &&",
            " *    user_access('administer site configuration') &&",
            " *    $display_id == 'public_display'",
            " *  ) {",
            " *    $view->set_display('private_display');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allows altering a view at the very beginning of views processing, before",
        "scope": "text.php"
    },
    "hook_views_pre_build": {
        "prefix": "hook_views_pre_build",
        "body": [
            "\/**",
            " * Implements hook_views_pre_build().",
            " *\/",
            "function hook_views_pre_build(&$view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Because of some inexplicable business logic, we should remove all",
            " *  \/\/ attachments from all views on Mondays.",
            " *  \/\/ (This alter could be done later in the execution process as well.)",
            " *  if (date('D') == 'Mon') {",
            " *    unset($view->attachment_before);",
            " *    unset($view->attachment_after);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook is called right before the build process, but after displays",
        "scope": "text.php"
    },
    "hook_views_post_build": {
        "prefix": "hook_views_post_build",
        "body": [
            "\/**",
            " * Implements hook_views_post_build().",
            " *\/",
            "function hook_views_post_build(&$view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ If the exposed field 'type' is set, hide the column containing the content",
            " *  \/\/ type. (Note that this is a solution for a particular view, and makes",
            " *  \/\/ assumptions about both exposed filter settings and the fields in the view.",
            " *  \/\/ Also note that this alter could be done at any point before the view being",
            " *  \/\/ rendered.)",
            " *  if ($view->name == 'my_view' && isset($view->exposed_raw_input['type']) && $view->exposed_raw_input['type'] != 'All') {",
            " *    \/\/ 'Type' should be interpreted as content type.",
            " *    if (isset($view->field['type'])) {",
            " *      $view->field['type']->options['exclude'] = TRUE;",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook is called right after the build process. The query is now fully",
        "scope": "text.php"
    },
    "hook_views_pre_execute": {
        "prefix": "hook_views_pre_execute",
        "body": [
            "\/**",
            " * Implements hook_views_pre_execute().",
            " *\/",
            "function hook_views_pre_execute(&$view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Whenever a view queries more than two tables, show a message that notifies",
            " *  \/\/ view administrators that the query might be heavy.",
            " *  \/\/ (This action could be performed later in the execution process, but not",
            " *  \/\/ earlier.)",
            " *  if (count($view->query->tables) > 2 && user_access('administer views')) {",
            " *    drupal_set_message(t('The view %view may be heavy to execute.', array('%view' => $view->name)), 'warning');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook is called right before the execute process. The query is now fully",
        "scope": "text.php"
    },
    "hook_views_post_execute": {
        "prefix": "hook_views_post_execute",
        "body": [
            "\/**",
            " * Implements hook_views_post_execute().",
            " *\/",
            "function hook_views_post_execute(&$view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ If there are more than 100 results, show a message that encourages the user",
            " *  \/\/ to change the filter settings.",
            " *  \/\/ (This action could be performed later in the execution process, but not",
            " *  \/\/ earlier.)",
            " *  if ($view->total_rows > 100) {",
            " *    drupal_set_message(t('You have more than 100 hits. Use the filter settings to narrow down your list.'));",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook is called right after the execute process. The query has",
        "scope": "text.php"
    },
    "hook_views_pre_render": {
        "prefix": "hook_views_pre_render",
        "body": [
            "\/**",
            " * Implements hook_views_pre_render().",
            " *\/",
            "function hook_views_pre_render(&$view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Scramble the order of the rows shown on this result page.",
            " *  \/\/ Note that this could be done earlier, but not later in the view execution",
            " *  \/\/ process.",
            " *  shuffle($view->result);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook is called right before the render process. The query has been",
        "scope": "text.php"
    },
    "hook_views_post_render": {
        "prefix": "hook_views_post_render",
        "body": [
            "\/**",
            " * Implements hook_views_post_render().",
            " *\/",
            "function hook_views_post_render(&$view, &$output, &$cache) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ When using full pager, disable any time-based caching if there are less",
            " *  \/\/ then 10 results.",
            " *  if ($view->query->pager instanceof views_plugin_pager_full && $cache->options['type'] == 'time' && count($view->result) < 10) {",
            " *    $cache['options']['results_lifespan'] = 0;",
            " *    $cache['options']['output_lifespan'] = 0;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Post process any rendered data.",
        "scope": "text.php"
    },
    "hook_views_query_alter": {
        "prefix": "hook_views_query_alter",
        "body": [
            "\/**",
            " * Implements hook_views_query_alter().",
            " *\/",
            "function hook_views_query_alter(&$view, &$query) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ (Example assuming a view with an exposed filter on node title.)",
            " *  \/\/ If the input for the title filter is a positive integer, filter against",
            " *  \/\/ node ID instead of node title.",
            " *  if ($view->name == 'my_view' && is_numeric($view->exposed_raw_input['title']) && $view->exposed_raw_input['title'] > 0) {",
            " *    \/\/ Traverse through the 'where' part of the query.",
            " *    foreach ($query->where as &$condition_group) {",
            " *      foreach ($condition_group['conditions'] as &$condition) {",
            " *        \/\/ If this is the part of the query filtering on title, change the",
            " *        \/\/ condition to filter on node ID.",
            " *        if ($condition['field'] == 'node.title') {",
            " *          $condition = array(",
            " *            'field' => 'node.nid',",
            " *            'value' => $view->exposed_raw_input['title'],",
            " *            'operator' => '=',",
            " *          );",
            " *        }",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the query before executing the query.",
        "scope": "text.php"
    },
    "hook_views_preview_info_alter": {
        "prefix": "hook_views_preview_info_alter",
        "body": [
            "\/**",
            " * Implements hook_views_preview_info_alter().",
            " *\/",
            "function hook_views_preview_info_alter(&$rows, $view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Adds information about the tables being queried by the view to the query",
            " *  \/\/ part of the info box.",
            " *  $rows['query'][] = array(",
            " *    t('<strong>Table queue<\/strong>'),",
            " *    count($view->query->table_queue) . ': (' . implode(', ', array_keys($view->query->table_queue)) . ')',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the information box that (optionally) appears with a view preview,",
        "scope": "text.php"
    },
    "hook_views_ui_display_top_links_alter": {
        "prefix": "hook_views_ui_display_top_links_alter",
        "body": [
            "\/**",
            " * Implements hook_views_ui_display_top_links_alter().",
            " *\/",
            "function hook_views_ui_display_top_links_alter(&$links, $view, $display_id) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Put the export link first in the list.",
            " *  if (isset($links['export'])) {",
            " *    $links = array('export' => $links['export']) + $links;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hooks allows to alter the links at the top of the view edit form. Some",
        "scope": "text.php"
    },
    "hook_views_ajax_data_alter": {
        "prefix": "hook_views_ajax_data_alter",
        "body": [
            "\/**",
            " * Implements hook_views_ajax_data_alter().",
            " *\/",
            "function hook_views_ajax_data_alter(&$commands, $view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Replace Views' method for scrolling to the top of the element with your",
            " *  \/\/ custom scrolling method.",
            " *  foreach ($commands as &$command) {",
            " *    if ($command['command'] == 'viewsScrollTop') {",
            " *      $command['command'] .= 'myScrollTop';",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "This hook allows to alter the commands which are used on a views ajax",
        "scope": "text.php"
    },
    "hook_views_invalidate_cache": {
        "prefix": "hook_views_invalidate_cache",
        "body": [
            "\/**",
            " * Implements hook_views_invalidate_cache().",
            " *\/",
            "function hook_views_invalidate_cache() {",
            "\/**",
            " * Sample code from the api example:",
            " *  cache_clear_all('views:*', 'cache_mymodule', TRUE);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to respond to the Views cache being invalidated.",
        "scope": "text.php"
    },
    "hook_views_view_presave": {
        "prefix": "hook_views_view_presave",
        "body": [
            "\/**",
            " * Implements hook_views_view_presave().",
            " *\/",
            "function hook_views_view_presave($view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Do some adjustments to the view. Handle with care.",
            " *  if (mymodule_check_view($view)) {",
            " *    mymodule_do_some_voodoo($view);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to alter a view prior to being saved.",
        "scope": "text.php"
    },
    "hook_views_view_save": {
        "prefix": "hook_views_view_save",
        "body": [
            "\/**",
            " * Implements hook_views_view_save().",
            " *\/",
            "function hook_views_view_save($view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Make a watchdog entry.",
            " *  watchdog('views', 'The view @name was deleted by @user at @time', array('@name' => $view->name, '@user' => $GLOBALS['user']->name, '@time' => format_date(time())));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to respond to a view being saved.",
        "scope": "text.php"
    },
    "hook_views_view_delete": {
        "prefix": "hook_views_view_delete",
        "body": [
            "\/**",
            " * Implements hook_views_view_delete().",
            " *\/",
            "function hook_views_view_delete($view) {",
            "\/**",
            " * Sample code from the api example:",
            " *  \/\/ Make a watchdog entry.",
            " *  watchdog('views', 'The view @name was deleted by @user at @time', array('@name' => $view->name, '@user' => $GLOBALS['user']->name, '@time' => format_date(time())));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to respond to a view being deleted or reverted.",
        "scope": "text.php"
    }
}
