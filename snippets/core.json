{
    "hook_aggregator_fetch": {
        "prefix": "hook_aggregator_fetch",
        "body": [
            "\/**",
            " * Implements hook_aggregator_fetch().",
            " *\/",
            "function hook_aggregator_fetch($feed) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $feed->source_string = mymodule_fetch($feed->url);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Create an alternative fetcher for aggregator.module.",
        "scope": "text.php"
    },
    "hook_aggregator_fetch_info": {
        "prefix": "hook_aggregator_fetch_info",
        "body": [
            "\/**",
            " * Implements hook_aggregator_fetch_info().",
            " *\/",
            "function hook_aggregator_fetch_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'title' => t('Default fetcher'),",
            " *    'description' => t('Default fetcher for resources available by URL.'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Specify the title and short description of your fetcher.",
        "scope": "text.php"
    },
    "hook_aggregator_parse": {
        "prefix": "hook_aggregator_parse",
        "body": [
            "\/**",
            " * Implements hook_aggregator_parse().",
            " *\/",
            "function hook_aggregator_parse($feed) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($items = mymodule_parse($feed->source_string)) {",
            " *    $feed->items = $items;",
            " *    return TRUE;",
            " *  }",
            " *  return FALSE;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Create an alternative parser for aggregator module.",
        "scope": "text.php"
    },
    "hook_aggregator_parse_info": {
        "prefix": "hook_aggregator_parse_info",
        "body": [
            "\/**",
            " * Implements hook_aggregator_parse_info().",
            " *\/",
            "function hook_aggregator_parse_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'title' => t('Default parser'),",
            " *    'description' => t('Default parser for RSS, Atom and RDF feeds.'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Specify the title and short description of your parser.",
        "scope": "text.php"
    },
    "hook_aggregator_process": {
        "prefix": "hook_aggregator_process",
        "body": [
            "\/**",
            " * Implements hook_aggregator_process().",
            " *\/",
            "function hook_aggregator_process($feed) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($feed->items as $item) {",
            " *    mymodule_save($item);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Create a processor for aggregator.module.",
        "scope": "text.php"
    },
    "hook_aggregator_process_info": {
        "prefix": "hook_aggregator_process_info",
        "body": [
            "\/**",
            " * Implements hook_aggregator_process_info().",
            " *\/",
            "function hook_aggregator_process_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'title' => t('Default processor'),",
            " *    'description' => t('Creates lightweight records of feed items.'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Specify the title and short description of your processor.",
        "scope": "text.php"
    },
    "hook_aggregator_remove": {
        "prefix": "hook_aggregator_remove",
        "body": [
            "\/**",
            " * Implements hook_aggregator_remove().",
            " *\/",
            "function hook_aggregator_remove($feed) {",
            "\/**",
            " * Sample code from the api example.",
            " *  mymodule_remove_items($feed->fid);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Remove stored feed data.",
        "scope": "text.php"
    },
    "hook_block_info_alter": {
        "prefix": "hook_block_info_alter",
        "body": [
            "\/**",
            " * Implements hook_block_info_alter().",
            " *\/",
            "function hook_block_info_alter(&$blocks, $theme, $code_blocks) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Disable the login block.",
            " *  $blocks['user']['login']['status'] = 0;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Change block definition before saving to the database.",
        "scope": "text.php"
    },
    "hook_block_configure": {
        "prefix": "hook_block_configure",
        "body": [
            "\/**",
            " * Implements hook_block_configure().",
            " *\/",
            "function hook_block_configure($delta = '') {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ This example comes from node.module.",
            " *  $form = array();",
            " *  if ($delta == 'recent') {",
            " *    $form['node_recent_block_count'] = array(",
            " *      '#type' => 'select',",
            " *      '#title' => t('Number of recent content items to display'),",
            " *      '#default_value' => variable_get('node_recent_block_count', 10),",
            " *      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),",
            " *    );",
            " *  }",
            " *  return $form;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define a configuration form for a block.",
        "scope": "text.php"
    },
    "hook_block_save": {
        "prefix": "hook_block_save",
        "body": [
            "\/**",
            " * Implements hook_block_save().",
            " *\/",
            "function hook_block_save($delta = '', $edit = array()) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ This example comes from node.module.",
            " *  if ($delta == 'recent') {",
            " *    variable_set('node_recent_block_count', $edit['node_recent_block_count']);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Save the configuration options from hook_block_configure().",
        "scope": "text.php"
    },
    "hook_block_view_alter": {
        "prefix": "hook_block_view_alter",
        "body": [
            "\/**",
            " * Implements hook_block_view_alter().",
            " *\/",
            "function hook_block_view_alter(&$data, $block) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove the contextual links on all blocks that provide them.",
            " *  if (is_array($data['content']) && isset($data['content']['#contextual_links'])) {",
            " *    unset($data['content']['#contextual_links']);",
            " *  }",
            " *  \/\/ Add a theme wrapper function defined by the current module to all blocks",
            " *  \/\/ provided by the \"somemodule\" module.",
            " *  if (is_array($data['content']) && $block->module == 'somemodule') {",
            " *    $data['content']['#theme_wrappers'][] = 'mymodule_special_block';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations to the content of a block.",
        "scope": "text.php"
    },
    "hook_block_cid_parts_alter": {
        "prefix": "hook_block_cid_parts_alter",
        "body": [
            "\/**",
            " * Implements hook_block_cid_parts_alter().",
            " *\/",
            "function hook_block_cid_parts_alter(&$cid_parts, $block) {",
            "\/**",
            " * Sample code from the api example.",
            " *  global $user;",
            " *  \/\/ This example shows how to cache a block based on the user's timezone.",
            " *  $cid_parts[] = $user->timezone;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on block cache ID (cid) parts before the cid is generated.",
        "scope": "text.php"
    },
    "hook_comment_presave": {
        "prefix": "hook_comment_presave",
        "body": [
            "\/**",
            " * Implements hook_comment_presave().",
            " *\/",
            "function hook_comment_presave($comment) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove leading & trailing spaces from the comment subject.",
            " *  $comment->subject = trim($comment->subject);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment passed validation and is about to be saved.",
        "scope": "text.php"
    },
    "hook_comment_insert": {
        "prefix": "hook_comment_insert",
        "body": [
            "\/**",
            " * Implements hook_comment_insert().",
            " *\/",
            "function hook_comment_insert($comment) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Reindex the node when comments are added.",
            " *  search_touch_node($comment->nid);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment is being inserted.",
        "scope": "text.php"
    },
    "hook_comment_update": {
        "prefix": "hook_comment_update",
        "body": [
            "\/**",
            " * Implements hook_comment_update().",
            " *\/",
            "function hook_comment_update($comment) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Reindex the node when comments are updated.",
            " *  search_touch_node($comment->nid);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment is being updated.",
        "scope": "text.php"
    },
    "hook_comment_load": {
        "prefix": "hook_comment_load",
        "body": [
            "\/**",
            " * Implements hook_comment_load().",
            " *\/",
            "function hook_comment_load($comments) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $result = db_query('SELECT cid, foo FROM {mytable} WHERE cid IN (:cids)', array(':cids' => array_keys($comments)));",
            " *  foreach ($result as $record) {",
            " *    $comments[$record->cid]->foo = $record->foo;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Comments are being loaded from the database.",
        "scope": "text.php"
    },
    "hook_comment_view": {
        "prefix": "hook_comment_view",
        "body": [
            "\/**",
            " * Implements hook_comment_view().",
            " *\/",
            "function hook_comment_view($comment, $view_mode, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ how old is the comment",
            " *  $comment->time_ago = time() - $comment->changed;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment is being viewed. This hook can be used to add additional data to the comment before theming.",
        "scope": "text.php"
    },
    "hook_comment_view_alter": {
        "prefix": "hook_comment_view_alter",
        "body": [
            "\/**",
            " * Implements hook_comment_view_alter().",
            " *\/",
            "function hook_comment_view_alter(&$build) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Check for the existence of a field added by another module.",
            " *  if ($build['#view_mode'] == 'full' && isset($build['an_additional_field'])) {",
            " *    \/\/ Change its weight.",
            " *    $build['an_additional_field']['#weight'] = -10;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment was built; the module may modify the structured content.",
        "scope": "text.php"
    },
    "hook_comment_publish": {
        "prefix": "hook_comment_publish",
        "body": [
            "\/**",
            " * Implements hook_comment_publish().",
            " *\/",
            "function hook_comment_publish($comment) {",
            "\/**",
            " * Sample code from the api example.",
            " *  drupal_set_message(t('Comment: @subject has been published', array('@subject' => $comment->subject)));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment is being published by the moderator.",
        "scope": "text.php"
    },
    "hook_comment_unpublish": {
        "prefix": "hook_comment_unpublish",
        "body": [
            "\/**",
            " * Implements hook_comment_unpublish().",
            " *\/",
            "function hook_comment_unpublish($comment) {",
            "\/**",
            " * Sample code from the api example.",
            " *  drupal_set_message(t('Comment: @subject has been unpublished', array('@subject' => $comment->subject)));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment is being unpublished by the moderator.",
        "scope": "text.php"
    },
    "hook_comment_delete": {
        "prefix": "hook_comment_delete",
        "body": [
            "\/**",
            " * Implements hook_comment_delete().",
            " *\/",
            "function hook_comment_delete($comment) {",
            "\/**",
            " * Sample code from the api example.",
            " *  drupal_set_message(t('Comment: @subject has been deleted', array('@subject' => $comment->subject)));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The comment is being deleted by the moderator.",
        "scope": "text.php"
    },
    "hook_contextual_links_view_alter": {
        "prefix": "hook_contextual_links_view_alter",
        "body": [
            "\/**",
            " * Implements hook_contextual_links_view_alter().",
            " *\/",
            "function hook_contextual_links_view_alter(&$element, $items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add another class to all contextual link lists to facilitate custom",
            " *  \/\/ styling.",
            " *  $element['#attributes']['class'][] = 'custom-class';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter a contextual links element before it is rendered.",
        "scope": "text.php"
    },
    "hook_dashboard_regions": {
        "prefix": "hook_dashboard_regions",
        "body": [
            "\/**",
            " * Implements hook_dashboard_regions().",
            " *\/",
            "function hook_dashboard_regions() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Define a new dashboard region. Your module can also then define",
            " *  \/\/ theme_mymodule_dashboard_region() as a theme wrapper function to control",
            " *  \/\/ the region's appearance.",
            " *  return array('mymodule_dashboard_region' => \"My module's dashboard region\");",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Add regions to the dashboard.",
        "scope": "text.php"
    },
    "hook_dashboard_regions_alter": {
        "prefix": "hook_dashboard_regions_alter",
        "body": [
            "\/**",
            " * Implements hook_dashboard_regions_alter().",
            " *\/",
            "function hook_dashboard_regions_alter(&$regions) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove the sidebar region defined by the core dashboard module.",
            " *  unset($regions['dashboard_sidebar']);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter dashboard regions provided by modules.",
        "scope": "text.php"
    },
    "hook_field_extra_fields_alter": {
        "prefix": "hook_field_extra_fields_alter",
        "body": [
            "\/**",
            " * Implements hook_field_extra_fields_alter().",
            " *\/",
            "function hook_field_extra_fields_alter(&$info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Force node title to always be at the top of the list by default.",
            " *  foreach (node_type_get_types() as $bundle) {",
            " *    if (isset($info['node'][$bundle->type]['form']['title'])) {",
            " *      $info['node'][$bundle->type]['form']['title']['weight'] = -20;",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter \"pseudo-field\" components on fieldable entities.",
        "scope": "text.php"
    },
    "hook_field_info": {
        "prefix": "hook_field_info",
        "body": [
            "\/**",
            " * Implements hook_field_info().",
            " *\/",
            "function hook_field_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'text' => array(",
            " *      'label' => t('Text'),",
            " *      'description' => t('This field stores varchar text in the database.'),",
            " *      'settings' => array('max_length' => 255),",
            " *      'instance_settings' => array('text_processing' => 0),",
            " *      'default_widget' => 'text_textfield',",
            " *      'default_formatter' => 'text_default',",
            " *    ),",
            " *    'text_long' => array(",
            " *      'label' => t('Long text'),",
            " *      'description' => t('This field stores long text in the database.'),",
            " *      'settings' => array('max_length' => ''),",
            " *      'instance_settings' => array('text_processing' => 0),",
            " *      'default_widget' => 'text_textarea',",
            " *      'default_formatter' => 'text_default',",
            " *    ),",
            " *    'text_with_summary' => array(",
            " *      'label' => t('Long text and summary'),",
            " *      'description' => t('This field stores long text in the database along with optional summary text.'),",
            " *      'settings' => array('max_length' => ''),",
            " *      'instance_settings' => array('text_processing' => 1, 'display_summary' => 0),",
            " *      'default_widget' => 'text_textarea_with_summary',",
            " *      'default_formatter' => 'text_summary_or_trimmed',",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define Field API field types.",
        "scope": "text.php"
    },
    "hook_field_info_alter": {
        "prefix": "hook_field_info_alter",
        "body": [
            "\/**",
            " * Implements hook_field_info_alter().",
            " *\/",
            "function hook_field_info_alter(&$info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a setting to all field types.",
            " *  foreach ($info as $field_type => $field_type_info) {",
            " *    $info[$field_type]['settings'] += array(",
            " *      'mymodule_additional_setting' => 'default value',",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on Field API field types.",
        "scope": "text.php"
    },
    "hook_field_schema": {
        "prefix": "hook_field_schema",
        "body": [
            "\/**",
            " * Implements hook_field_schema().",
            " *\/",
            "function hook_field_schema($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($field['type'] == 'text_long') {",
            " *    $columns = array(",
            " *      'value' => array(",
            " *        'type' => 'text',",
            " *        'size' => 'big',",
            " *        'not null' => FALSE,",
            " *      ),",
            " *    );",
            " *  }",
            " *  else {",
            " *    $columns = array(",
            " *      'value' => array(",
            " *        'type' => 'varchar',",
            " *        'length' => $field['settings']['max_length'],",
            " *        'not null' => FALSE,",
            " *      ),",
            " *    );",
            " *  }",
            " *  $columns += array(",
            " *    'format' => array(",
            " *      'type' => 'varchar',",
            " *      'length' => 255,",
            " *      'not null' => FALSE,",
            " *    ),",
            " *  );",
            " *  return array(",
            " *    'columns' => $columns,",
            " *    'indexes' => array(",
            " *      'format' => array('format'),",
            " *    ),",
            " *    'foreign keys' => array(",
            " *      'format' => array(",
            " *        'table' => 'filter_format',",
            " *        'columns' => array('format' => 'format'),",
            " *      ),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define the Field API schema for a field structure.",
        "scope": "text.php"
    },
    "hook_field_load": {
        "prefix": "hook_field_load",
        "body": [
            "\/**",
            " * Implements hook_field_load().",
            " *\/",
            "function hook_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Sample code from text.module: precompute sanitized strings so they are",
            " *  \/\/ stored in the field cache.",
            " *  foreach ($entities as $id => $entity) {",
            " *    foreach ($items[$id] as $delta => $item) {",
            " *      \/\/ Only process items with a cacheable format, the rest will be handled",
            " *      \/\/ by formatters if needed.",
            " *      if (empty($instances[$id]['settings']['text_processing']) || filter_format_allowcache($item['format'])) {",
            " *        $items[$id][$delta]['safe_value'] = isset($item['value']) ? _text_sanitize($instances[$id], $langcode, $item, 'value') : '';",
            " *        if ($field['type'] == 'text_with_summary') {",
            " *          $items[$id][$delta]['safe_summary'] = isset($item['summary']) ? _text_sanitize($instances[$id], $langcode, $item, 'summary') : '';",
            " *        }",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define custom load behavior for this module's field types.",
        "scope": "text.php"
    },
    "hook_field_prepare_view": {
        "prefix": "hook_field_prepare_view",
        "body": [
            "\/**",
            " * Implements hook_field_prepare_view().",
            " *\/",
            "function hook_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Sample code from image.module: if there are no images specified at all,",
            " *  \/\/ use the default image.",
            " *  foreach ($entities as $id => $entity) {",
            " *    if (empty($items[$id]) && $field['settings']['default_image']) {",
            " *      if ($file = file_load($field['settings']['default_image'])) {",
            " *        $items[$id][0] = (array) $file + array(",
            " *          'is_default' => TRUE,",
            " *          'alt' => '',",
            " *          'title' => '',",
            " *        );",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Prepare field values prior to display.",
        "scope": "text.php"
    },
    "should add its\n *   errors to this array. Each error is an associative array with the following\n *   keys and values:\n *   - error: An error code": {
        "prefix": "should add its\n *   errors to this array. Each error is an associative array with the following\n *   keys and values:\n *   - error: An error code",
        "body": [
            "\/**",
            " * Implements should add its\n *   errors to this array. Each error is an associative array with the following\n *   keys and values:\n *   - error: An error code().",
            " *\/",
            "function should add its\n *   errors to this array. Each error is an associative array with the following\n *   keys and values:\n *   - error: An error code(should be a string prefixed with the module name).\n *   - message: The human readable message to be displayed.\n *\/\nfunction hook_field_attach_validate($entity_type, $entity, &$errors) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Make sure any images in article nodes have an alt text.",
            " *  if ($entity_type == 'node' && $entity->type == 'article' && !empty($entity->field_image)) {",
            " *    foreach ($entity->field_image as $langcode => $items) {",
            " *      foreach ($items as $delta => $item) {",
            " *        if (!empty($item['fid']) && empty($item['alt'])) {",
            " *          $errors['field_image'][$langcode][$delta][] = array(",
            " *            'error' => 'field_example_invalid',",
            " *            'message' => t('All images in articles need to have an alternative text set.'),",
            " *          );",
            " *        }",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_validate().",
        "scope": "text.php"
    },
    "hook_field_presave": {
        "prefix": "hook_field_presave",
        "body": [
            "\/**",
            " * Implements hook_field_presave().",
            " *\/",
            "function hook_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($field['type'] == 'number_decimal') {",
            " *    \/\/ Let PHP round the value to ensure consistent behavior across storage",
            " *    \/\/ backends.",
            " *    foreach ($items as $delta => $item) {",
            " *      if (isset($item['value'])) {",
            " *        $items[$delta]['value'] = round($item['value'], $field['settings']['scale']);",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define custom presave behavior for this module's field types.",
        "scope": "text.php"
    },
    "hook_field_insert": {
        "prefix": "hook_field_insert",
        "body": [
            "\/**",
            " * Implements hook_field_insert().",
            " *\/",
            "function hook_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (variable_get('taxonomy_maintain_index_table', TRUE) && $field['storage']['type'] == 'field_sql_storage' && $entity_type == 'node' && $entity->status) {",
            " *    $query = db_insert('taxonomy_index')->fields(array('nid', 'tid', 'sticky', 'created', ));",
            " *    foreach ($items as $item) {",
            " *      $query->values(array(",
            " *        'nid' => $entity->nid,",
            " *        'tid' => $item['tid'],",
            " *        'sticky' => $entity->sticky,",
            " *        'created' => $entity->created,",
            " *      ));",
            " *    }",
            " *    $query->execute();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define custom insert behavior for this module's field data.",
        "scope": "text.php"
    },
    "hook_field_storage_update_field": {
        "prefix": "hook_field_storage_update_field",
        "body": [
            "\/**",
            " * Implements hook_field_storage_update_field().",
            " *\/",
            "function hook_field_storage_update_field($field, $prior_field, $has_data) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (!$has_data) {",
            " *    \/\/ There is no data. Re-create the tables completely.",
            " *    $prior_schema = _field_sql_storage_schema($prior_field);",
            " *    foreach ($prior_schema as $name => $table) {",
            " *      db_drop_table($name, $table);",
            " *    }",
            " *    $schema = _field_sql_storage_schema($field);",
            " *    foreach ($schema as $name => $table) {",
            " *      db_create_table($name, $table);",
            " *    }",
            " *  }",
            " *  else {",
            " *    \/\/ There is data. See field_sql_storage_field_storage_update_field() for",
            " *    \/\/ an example of what to do to modify the schema in place, preserving the",
            " *    \/\/ old data as much as possible.",
            " *  }",
            " *  drupal_get_schema(NULL, TRUE);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Update the storage information for a field.",
        "scope": "text.php"
    },
    "hook_field_delete": {
        "prefix": "hook_field_delete",
        "body": [
            "\/**",
            " * Implements hook_field_delete().",
            " *\/",
            "function hook_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);",
            " *  foreach ($items as $delta => $item) {",
            " *    \/\/ For hook_file_references(), remember that this is being deleted.",
            " *    $item['file_field_name'] = $field['field_name'];",
            " *    \/\/ Pass in the ID of the object that is being removed so all references can",
            " *    \/\/ be counted in hook_file_references().",
            " *    $item['file_field_type'] = $entity_type;",
            " *    $item['file_field_id'] = $id;",
            " *    file_field_delete_file($item, $field, $entity_type, $id);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define custom delete behavior for this module's field data.",
        "scope": "text.php"
    },
    "hook_field_delete_revision": {
        "prefix": "hook_field_delete_revision",
        "body": [
            "\/**",
            " * Implements hook_field_delete_revision().",
            " *\/",
            "function hook_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);",
            " *  foreach ($items as $delta => $item) {",
            " *    \/\/ For hook_file_references, remember that this file is being deleted.",
            " *    $item['file_field_name'] = $field['field_name'];",
            " *    if (file_field_delete_file($item, $field, $entity_type, $id)) {",
            " *      $items[$delta] = NULL;",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define custom revision delete behavior for this module's field types.",
        "scope": "text.php"
    },
    "hook_field_prepare_translation": {
        "prefix": "hook_field_prepare_translation",
        "body": [
            "\/**",
            " * Implements hook_field_prepare_translation().",
            " *\/",
            "function hook_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ If the translating user is not permitted to use the assigned text format,",
            " *  \/\/ we must not expose the source values.",
            " *  $field_name = $field['field_name'];",
            " *  $formats = filter_formats();",
            " *  $format_id = $source_entity->{$field_name}[$source_langcode][0]['format'];",
            " *  if (!filter_access($formats[$format_id])) {",
            " *    $items = array();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define custom prepare_translation behavior for this module's field types.",
        "scope": "text.php"
    },
    "hook_field_is_empty": {
        "prefix": "hook_field_is_empty",
        "body": [
            "\/**",
            " * Implements hook_field_is_empty().",
            " *\/",
            "function hook_field_is_empty($item, $field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (empty($item['value']) && (string) $item['value'] !== '0') {",
            " *    return TRUE;",
            " *  }",
            " *  return FALSE;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define what constitutes an empty item for a field type.",
        "scope": "text.php"
    },
    "hook_field_widget_info": {
        "prefix": "hook_field_widget_info",
        "body": [
            "\/**",
            " * Implements hook_field_widget_info().",
            " *\/",
            "function hook_field_widget_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'text_textfield' => array(",
            " *      'label' => t('Text field'),",
            " *      'field types' => array('text'),",
            " *      'settings' => array('size' => 60),",
            " *      'behaviors' => array(",
            " *        'multiple values' => FIELD_BEHAVIOR_DEFAULT,",
            " *        'default value' => FIELD_BEHAVIOR_DEFAULT,",
            " *      ),",
            " *    ),",
            " *    'text_textarea' => array(",
            " *      'label' => t('Text area (multiple rows)'),",
            " *      'field types' => array('text_long'),",
            " *      'settings' => array('rows' => 5),",
            " *      'behaviors' => array(",
            " *        'multiple values' => FIELD_BEHAVIOR_DEFAULT,",
            " *        'default value' => FIELD_BEHAVIOR_DEFAULT,",
            " *      ),",
            " *    ),",
            " *    'text_textarea_with_summary' => array(",
            " *      'label' => t('Text area with a summary'),",
            " *      'field types' => array('text_with_summary'),",
            " *      'settings' => array('rows' => 20, 'summary_rows' => 5),",
            " *      'behaviors' => array(",
            " *        'multiple values' => FIELD_BEHAVIOR_DEFAULT,",
            " *        'default value' => FIELD_BEHAVIOR_DEFAULT,",
            " *      ),",
            " *      \/\/ As an advanced widget, force it to sink to the bottom of the choices.",
            " *      'weight' => 2,",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Expose Field API widget types.",
        "scope": "text.php"
    },
    "using\n * hook_field_widget_form_alter": {
        "prefix": "using\n * hook_field_widget_form_alter",
        "body": [
            "\/**",
            " * Implements using\n * hook_field_widget_form_alter().",
            " *\/",
            "function using\n * hook_field_widget_form_alter().\n *\n * @param $form\n *   The form structure where widgets are being attached to. This might be a\n *   full form structure, or a sub-element of a larger form.\n * @param $form_state\n *   An associative array containing the current state of the form.\n * @param $field\n *   The field structure.\n * @param $instance\n *   The field instance.\n * @param $langcode\n *   The language associated with $items.\n * @param $items\n *   Array of default values for this field.\n * @param $delta\n *   The order of this item in the array of subelements (0, 1, 2, etc).\n * @param $element\n *   A form element array containing basic properties for the widget:\n *   - #entity_type: The name of the entity the field is attached to.\n *   - #bundle: The name of the field bundle the field is contained in.\n *   - #field_name: The name of the field.\n *   - #language: The language the field is being edited in.\n *   - #field_parents: The 'parents' space for the field in the form. Most\n *       widgets can simply overlook this property. This identifies the\n *       location where the field values are placed within\n *       $form_state['values'], and is used to access processing information\n *       for the field through the field_form_get_state() and\n *       field_form_set_state() functions.\n *   - #columns: A list of field storage columns of the field.\n *   - #title: The sanitized element label for the field instance, ready for\n *     output.\n *   - #description: The sanitized element description for the field instance,\n *     ready for output.\n *   - #required: A Boolean indicating whether the element value is required;\n *     for required multiple value fields, only the first widget's values are\n *     required.\n *   - #delta: The order of this item in the array of subelements; see $delta\n *     above.\n *\n * @return\n *   The form elements for a single widget for this field.\n *\n * @see field_widget_field()\n * @see field_widget_instance()\n * @see hook_field_widget_form_alter()\n * @see hook_field_widget_WIDGET_TYPE_form_alter()\n *\/\nfunction hook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $element += array(",
            " *    '#type' => $instance['widget']['type'],",
            " *    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',",
            " *  );",
            " *  return array('value' => $element);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return the form for a single field widget.",
        "scope": "text.php"
    },
    "hook_field_widget_form_alter": {
        "prefix": "hook_field_widget_form_alter",
        "body": [
            "\/**",
            " * Implements hook_field_widget_form_alter().",
            " *\/",
            "function hook_field_widget_form_alter(&$element, &$form_state, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a css class to widget form elements for all fields of type mytype.",
            " *  if ($context['field']['type'] == 'mytype') {",
            " *    \/\/ Be sure not to overwrite existing attributes.",
            " *    $element['#attributes']['class'][] = 'myclass';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter forms for field widgets provided by other modules.",
        "scope": "text.php"
    },
    "hook_field_widget_WIDGET_TYPE_form_alter": {
        "prefix": "hook_field_widget_WIDGET_TYPE_form_alter",
        "body": [
            "\/**",
            " * Implements hook_field_widget_WIDGET_TYPE_form_alter().",
            " *\/",
            "function hook_field_widget_WIDGET_TYPE_form_alter(&$element, &$form_state, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Code here will only act on widgets of type WIDGET_TYPE.  For example,",
            " *  \/\/ hook_field_widget_mymodule_autocomplete_form_alter() will only act on",
            " *  \/\/ widgets of type 'mymodule_autocomplete'.",
            " *  $element['#autocomplete_path'] = 'mymodule\/autocomplete_path';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter widget forms for a specific widget provided by another module.",
        "scope": "text.php"
    },
    "hook_field_widget_properties_alter": {
        "prefix": "hook_field_widget_properties_alter",
        "body": [
            "\/**",
            " * Implements hook_field_widget_properties_alter().",
            " *\/",
            "function hook_field_widget_properties_alter(&$widget, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Change a widget's type according to the time of day.",
            " *  $field = $context['field'];",
            " *  if ($context['entity_type'] == 'node' && $field['field_name'] == 'field_foo') {",
            " *    $time = date('H');",
            " *    $widget['type'] = $time < 12 ? 'widget_am' : 'widget_pm';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the widget properties of a field instance before it gets displayed.",
        "scope": "text.php"
    },
    "hook_field_widget_error": {
        "prefix": "hook_field_widget_error",
        "body": [
            "\/**",
            " * Implements hook_field_widget_error().",
            " *\/",
            "function hook_field_widget_error($element, $error, $form, &$form_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  form_error($element, $error['message']);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Flag a field-level validation error.",
        "scope": "text.php"
    },
    "hook_field_attach_form": {
        "prefix": "hook_field_attach_form",
        "body": [
            "\/**",
            " * Implements hook_field_attach_form().",
            " *\/",
            "function hook_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a checkbox allowing a given field to be emptied.",
            " *  \/\/ See hook_field_attach_submit() for the corresponding processing code.",
            " *  $form['empty_field_foo'] = array(",
            " *    '#type' => 'checkbox',",
            " *    '#title' => t(\"Empty the 'field_foo' field\"),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_form().",
        "scope": "text.php"
    },
    "hook_field_attach_load": {
        "prefix": "hook_field_attach_load",
        "body": [
            "\/**",
            " * Implements hook_field_attach_load().",
            " *\/",
            "function hook_field_attach_load($entity_type, $entities, $age, $options) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_load().",
        "scope": "text.php"
    },
    "hook_field_attach_submit": {
        "prefix": "hook_field_attach_submit",
        "body": [
            "\/**",
            " * Implements hook_field_attach_submit().",
            " *\/",
            "function hook_field_attach_submit($entity_type, $entity, $form, &$form_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Sample case of an 'Empty the field' checkbox added on the form, allowing",
            " *  \/\/ a given field to be emptied.",
            " *  $values = drupal_array_get_nested_value($form_state['values'], $form['#parents']);",
            " *  if (!empty($values['empty_field_foo'])) {",
            " *    unset($entity->field_foo);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_submit().",
        "scope": "text.php"
    },
    "hook_field_attach_presave": {
        "prefix": "hook_field_attach_presave",
        "body": [
            "\/**",
            " * Implements hook_field_attach_presave().",
            " *\/",
            "function hook_field_attach_presave($entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_presave().",
        "scope": "text.php"
    },
    "hook_field_attach_insert": {
        "prefix": "hook_field_attach_insert",
        "body": [
            "\/**",
            " * Implements hook_field_attach_insert().",
            " *\/",
            "function hook_field_attach_insert($entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_insert().",
        "scope": "text.php"
    },
    "hook_field_attach_update": {
        "prefix": "hook_field_attach_update",
        "body": [
            "\/**",
            " * Implements hook_field_attach_update().",
            " *\/",
            "function hook_field_attach_update($entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_update().",
        "scope": "text.php"
    },
    "hook_field_attach_preprocess_alter": {
        "prefix": "hook_field_attach_preprocess_alter",
        "body": [
            "\/**",
            " * Implements hook_field_attach_preprocess_alter().",
            " *\/",
            "function hook_field_attach_preprocess_alter(&$variables, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter field_attach_preprocess() variables.",
        "scope": "text.php"
    },
    "hook_field_attach_delete": {
        "prefix": "hook_field_attach_delete",
        "body": [
            "\/**",
            " * Implements hook_field_attach_delete().",
            " *\/",
            "function hook_field_attach_delete($entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_delete().",
        "scope": "text.php"
    },
    "hook_field_attach_delete_revision": {
        "prefix": "hook_field_attach_delete_revision",
        "body": [
            "\/**",
            " * Implements hook_field_attach_delete_revision().",
            " *\/",
            "function hook_field_attach_delete_revision($entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_delete_revision().",
        "scope": "text.php"
    },
    "hook_field_attach_purge": {
        "prefix": "hook_field_attach_purge",
        "body": [
            "\/**",
            " * Implements hook_field_attach_purge().",
            " *\/",
            "function hook_field_attach_purge($entity_type, $entity, $field, $instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ find the corresponding data in mymodule and purge it",
            " *  if ($entity_type == 'node' && $field->field_name == 'my_field_name') {",
            " *    mymodule_remove_mydata($entity->nid);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_purge_data().",
        "scope": "text.php"
    },
    "hook_field_attach_view_alter": {
        "prefix": "hook_field_attach_view_alter",
        "body": [
            "\/**",
            " * Implements hook_field_attach_view_alter().",
            " *\/",
            "function hook_field_attach_view_alter(&$output, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Append RDF term mappings on displayed taxonomy links.",
            " *  foreach (element_children($output) as $field_name) {",
            " *    $element = &$output[$field_name];",
            " *    if ($element['#field_type'] == 'taxonomy_term_reference' && $element['#formatter'] == 'taxonomy_term_reference_link') {",
            " *      foreach ($element['#items'] as $delta => $item) {",
            " *        $term = $item['taxonomy_term'];",
            " *        if (!empty($term->rdf_mapping['rdftype'])) {",
            " *          $element[$delta]['#options']['attributes']['typeof'] = $term->rdf_mapping['rdftype'];",
            " *        }",
            " *        if (!empty($term->rdf_mapping['name']['predicates'])) {",
            " *          $element[$delta]['#options']['attributes']['property'] = $term->rdf_mapping['name']['predicates'];",
            " *        }",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on field_attach_view() or field_view_field().",
        "scope": "text.php"
    },
    "hook_field_attach_prepare_translation_alter": {
        "prefix": "hook_field_attach_prepare_translation_alter",
        "body": [
            "\/**",
            " * Implements hook_field_attach_prepare_translation_alter().",
            " *\/",
            "function hook_field_attach_prepare_translation_alter(&$entity, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($context['entity_type'] == 'custom_entity_type') {",
            " *    $entity->custom_field = $context['source_entity']->custom_field;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on field_attach_prepare_translation().",
        "scope": "text.php"
    },
    "hook_field_language_alter": {
        "prefix": "hook_field_language_alter",
        "body": [
            "\/**",
            " * Implements hook_field_language_alter().",
            " *\/",
            "function hook_field_language_alter(&$display_language, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Do not apply core language fallback rules if they are disabled or if Locale",
            " *  \/\/ is not registered as a translation handler.",
            " *  if (variable_get('locale_field_language_fallback', TRUE) && field_has_translation_handler($context['entity_type'], 'locale')) {",
            " *    locale_field_language_fallback($display_language, $context['entity'], $context['language']);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on field_language() values.",
        "scope": "text.php"
    },
    "hook_field_attach_create_bundle": {
        "prefix": "hook_field_attach_create_bundle",
        "body": [
            "\/**",
            " * Implements hook_field_attach_create_bundle().",
            " *\/",
            "function hook_field_attach_create_bundle($entity_type, $bundle) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ When a new bundle is created, the menu needs to be rebuilt to add the",
            " *  \/\/ Field UI menu item tabs.",
            " *  variable_set('menu_rebuild_needed', TRUE);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_create_bundle().",
        "scope": "text.php"
    },
    "hook_field_attach_rename_bundle": {
        "prefix": "hook_field_attach_rename_bundle",
        "body": [
            "\/**",
            " * Implements hook_field_attach_rename_bundle().",
            " *\/",
            "function hook_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Update the extra weights variable with new information.",
            " *  if ($bundle_old !== $bundle_new) {",
            " *    $extra_weights = variable_get('field_extra_weights', array());",
            " *    if (isset($info[$entity_type][$bundle_old])) {",
            " *      $extra_weights[$entity_type][$bundle_new] = $extra_weights[$entity_type][$bundle_old];",
            " *      unset($extra_weights[$entity_type][$bundle_old]);",
            " *      variable_set('field_extra_weights', $extra_weights);",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_rename_bundle().",
        "scope": "text.php"
    },
    "hook_field_attach_delete_bundle": {
        "prefix": "hook_field_attach_delete_bundle",
        "body": [
            "\/**",
            " * Implements hook_field_attach_delete_bundle().",
            " *\/",
            "function hook_field_attach_delete_bundle($entity_type, $bundle, $instances) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove the extra weights variable information for this bundle.",
            " *  $extra_weights = variable_get('field_extra_weights', array());",
            " *  if (isset($extra_weights[$entity_type][$bundle])) {",
            " *    unset($extra_weights[$entity_type][$bundle]);",
            " *    variable_set('field_extra_weights', $extra_weights);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field_attach_delete_bundle.",
        "scope": "text.php"
    },
    "hook_field_storage_info": {
        "prefix": "hook_field_storage_info",
        "body": [
            "\/**",
            " * Implements hook_field_storage_info().",
            " *\/",
            "function hook_field_storage_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'field_sql_storage' => array(",
            " *      'label' => t('Default SQL storage'),",
            " *      'description' => t('Stores fields in the local SQL database, using per-field tables.'),",
            " *      'settings' => array(),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Expose Field API storage backends.",
        "scope": "text.php"
    },
    "hook_field_storage_info_alter": {
        "prefix": "hook_field_storage_info_alter",
        "body": [
            "\/**",
            " * Implements hook_field_storage_info_alter().",
            " *\/",
            "function hook_field_storage_info_alter(&$info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a setting to a storage type.",
            " *  $info['field_sql_storage']['settings'] += array(",
            " *    'mymodule_additional_setting' => 'default value',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on Field API storage types.",
        "scope": "text.php"
    },
    "hook_field_storage_details_alter": {
        "prefix": "hook_field_storage_details_alter",
        "body": [
            "\/**",
            " * Implements hook_field_storage_details_alter().",
            " *\/",
            "function hook_field_storage_details_alter(&$details, $field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($field['field_name'] == 'field_of_interest') {",
            " *    $columns = array();",
            " *    foreach ((array) $field['columns'] as $column_name => $attributes) {",
            " *      $columns[$column_name] = $column_name;",
            " *    }",
            " *    $details['drupal_variables'] = array(",
            " *      FIELD_LOAD_CURRENT => array(",
            " *        'moon' => $columns,",
            " *      ),",
            " *      FIELD_LOAD_REVISION => array(",
            " *        'mars' => $columns,",
            " *      ),",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on Field API storage details.",
        "scope": "text.php"
    },
    "hook_field_storage_write": {
        "prefix": "hook_field_storage_write",
        "body": [
            "\/**",
            " * Implements hook_field_storage_write().",
            " *\/",
            "function hook_field_storage_write($entity_type, $entity, $op, $fields) {",
            "\/**",
            " * Sample code from the api example.",
            " *  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);",
            " *  if (!isset($vid)) {",
            " *    $vid = $id;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Write field data for an entity.",
        "scope": "text.php"
    },
    "hook_field_storage_query": {
        "prefix": "hook_field_storage_query",
        "body": [
            "\/**",
            " * Implements hook_field_storage_query().",
            " *\/",
            "function hook_field_storage_query($query) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $groups = array();",
            " *  if ($query->age == FIELD_LOAD_CURRENT) {",
            " *    $tablename_function = '_field_sql_storage_tablename';",
            " *    $id_key = 'entity_id';",
            " *  }",
            " *  else {",
            " *    $tablename_function = '_field_sql_storage_revision_tablename';",
            " *    $id_key = 'revision_id';",
            " *  }",
            " *  $table_aliases = array();",
            " *  \/\/ Add tables for the fields used.",
            " *  foreach ($query->fields as $key => $field) {",
            " *    $tablename = $tablename_function($field);",
            " *    \/\/ Every field needs a new table.",
            " *    $table_alias = $tablename . $key;",
            " *    $table_aliases[$key] = $table_alias;",
            " *    if ($key) {",
            " *      $select_query->join($tablename, $table_alias, \"$table_alias.entity_type = $field_base_table.entity_type AND $table_alias.$id_key = $field_base_table.$id_key\");",
            " *    }",
            " *    else {",
            " *      $select_query = db_select($tablename, $table_alias);",
            " *      $select_query->addTag('entity_field_access');",
            " *      $select_query->addMetaData('base_table', $tablename);",
            " *      $select_query->fields($table_alias, array('entity_type', 'entity_id', 'revision_id', 'bundle'));",
            " *      $field_base_table = $table_alias;",
            " *    }",
            " *    if ($field['cardinality'] != 1) {",
            " *      $select_query->distinct();",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Execute an EntityFieldQuery.",
        "scope": "text.php"
    },
    "hook_field_storage_create_field": {
        "prefix": "hook_field_storage_create_field",
        "body": [
            "\/**",
            " * Implements hook_field_storage_create_field().",
            " *\/",
            "function hook_field_storage_create_field($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $schema = _field_sql_storage_schema($field);",
            " *  foreach ($schema as $name => $table) {",
            " *    db_create_table($name, $table);",
            " *  }",
            " *  drupal_get_schema(NULL, TRUE);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on creation of a new field.",
        "scope": "text.php"
    },
    "hook_field_storage_delete_instance": {
        "prefix": "hook_field_storage_delete_instance",
        "body": [
            "\/**",
            " * Implements hook_field_storage_delete_instance().",
            " *\/",
            "function hook_field_storage_delete_instance($instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $field = field_info_field($instance['field_name']);",
            " *  $table_name = _field_sql_storage_tablename($field);",
            " *  $revision_name = _field_sql_storage_revision_tablename($field);",
            " *  db_update($table_name)",
            " *    ->fields(array('deleted' => 1))",
            " *    ->condition('entity_type', $instance['entity_type'])",
            " *    ->condition('bundle', $instance['bundle'])",
            " *    ->execute();",
            " *  db_update($revision_name)",
            " *    ->fields(array('deleted' => 1))",
            " *    ->condition('entity_type', $instance['entity_type'])",
            " *    ->condition('bundle', $instance['bundle'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on deletion of a field instance.",
        "scope": "text.php"
    },
    "hook_field_storage_pre_load": {
        "prefix": "hook_field_storage_pre_load",
        "body": [
            "\/**",
            " * Implements hook_field_storage_pre_load().",
            " *\/",
            "function hook_field_storage_pre_load($entity_type, $entities, $age, &$skip_fields, $options) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act before the storage backends load field data.",
        "scope": "text.php"
    },
    "hook_field_storage_pre_insert": {
        "prefix": "hook_field_storage_pre_insert",
        "body": [
            "\/**",
            " * Implements hook_field_storage_pre_insert().",
            " *\/",
            "function hook_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($entity_type == 'node' && $entity->status && _forum_node_check_node_type($entity)) {",
            " *    $query = db_insert('forum_index')->fields(array('nid', 'title', 'tid', 'sticky', 'created', 'comment_count', 'last_comment_timestamp'));",
            " *    foreach ($entity->taxonomy_forums as $language) {",
            " *      foreach ($language as $delta) {",
            " *        $query->values(array(",
            " *          'nid' => $entity->nid,",
            " *          'title' => $entity->title,",
            " *          'tid' => $delta['value'],",
            " *          'sticky' => $entity->sticky,",
            " *          'created' => $entity->created,",
            " *          'comment_count' => 0,",
            " *          'last_comment_timestamp' => $entity->created,",
            " *        ));",
            " *      }",
            " *    }",
            " *    $query->execute();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act before the storage backends insert field data.",
        "scope": "text.php"
    },
    "hook_field_display_alter": {
        "prefix": "hook_field_display_alter",
        "body": [
            "\/**",
            " * Implements hook_field_display_alter().",
            " *\/",
            "function hook_field_display_alter(&$display, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Leave field labels out of the search index.",
            " *  \/\/ Note: The check against $context['entity_type'] == 'node' could be avoided",
            " *  \/\/ by using hook_field_display_node_alter() instead of",
            " *  \/\/ hook_field_display_alter(), resulting in less function calls when",
            " *  \/\/ rendering non-node entities.",
            " *  if ($context['entity_type'] == 'node' && $context['view_mode'] == 'search_index') {",
            " *    $display['label'] = 'hidden';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the display settings of a field before it gets displayed.",
        "scope": "text.php"
    },
    "hook_field_display_ENTITY_TYPE_alter": {
        "prefix": "hook_field_display_ENTITY_TYPE_alter",
        "body": [
            "\/**",
            " * Implements hook_field_display_ENTITY_TYPE_alter().",
            " *\/",
            "function hook_field_display_ENTITY_TYPE_alter(&$display, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Leave field labels out of the search index.",
            " *  if ($context['view_mode'] == 'search_index') {",
            " *    $display['label'] = 'hidden';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the display settings of a field on a given entity type before it gets displayed.",
        "scope": "text.php"
    },
    "hook_field_extra_fields_display_alter": {
        "prefix": "hook_field_extra_fields_display_alter",
        "body": [
            "\/**",
            " * Implements hook_field_extra_fields_display_alter().",
            " *\/",
            "function hook_field_extra_fields_display_alter(&$displays, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($context['entity_type'] == 'taxonomy_term' && $context['view_mode'] == 'full') {",
            " *    $displays['description']['visible'] = FALSE;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the display settings of pseudo-fields before an entity is displayed.",
        "scope": "text.php"
    },
    "hook_field_widget_properties_ENTITY_TYPE_alter": {
        "prefix": "hook_field_widget_properties_ENTITY_TYPE_alter",
        "body": [
            "\/**",
            " * Implements hook_field_widget_properties_ENTITY_TYPE_alter().",
            " *\/",
            "function hook_field_widget_properties_ENTITY_TYPE_alter(&$widget, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Change a widget's type according to the time of day.",
            " *  $field = $context['field'];",
            " *  if ($field['field_name'] == 'field_foo') {",
            " *    $time = date('H');",
            " *    $widget['type'] = $time < 12 ? 'widget_am' : 'widget_pm';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the widget properties of a field instance on a given entity type",
        "scope": "text.php"
    },
    "hook_field_create_field": {
        "prefix": "hook_field_create_field",
        "body": [
            "\/**",
            " * Implements hook_field_create_field().",
            " *\/",
            "function hook_field_create_field($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field being created.",
        "scope": "text.php"
    },
    "hook_field_create_instance": {
        "prefix": "hook_field_create_instance",
        "body": [
            "\/**",
            " * Implements hook_field_create_instance().",
            " *\/",
            "function hook_field_create_instance($instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field instance being created.",
        "scope": "text.php"
    },
    "hook_field_update_forbid": {
        "prefix": "hook_field_update_forbid",
        "body": [
            "\/**",
            " * Implements hook_field_update_forbid().",
            " *\/",
            "function hook_field_update_forbid($field, $prior_field, $has_data) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ A 'list' field stores integer keys mapped to display values. If",
            " *  \/\/ the new field will have fewer values, and any data exists for the",
            " *  \/\/ abandoned keys, the field will have no way to display them. So,",
            " *  \/\/ forbid such an update.",
            " *  if ($has_data && count($field['settings']['allowed_values']) < count($prior_field['settings']['allowed_values'])) {",
            " *    \/\/ Identify the keys that will be lost.",
            " *    $lost_keys = array_diff(array_keys($field['settings']['allowed_values']), array_keys($prior_field['settings']['allowed_values']));",
            " *    \/\/ If any data exist for those keys, forbid the update.",
            " *    $query = new EntityFieldQuery();",
            " *    $found = $query",
            " *      ->fieldCondition($prior_field['field_name'], 'value', $lost_keys)",
            " *      ->range(0, 1)",
            " *      ->execute();",
            " *    if ($found) {",
            " *      throw new FieldUpdateForbiddenException(\"Cannot update a list field not to include keys with existing data\");",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Forbid a field update from occurring.",
        "scope": "text.php"
    },
    "hook_field_update_field": {
        "prefix": "hook_field_update_field",
        "body": [
            "\/**",
            " * Implements hook_field_update_field().",
            " *\/",
            "function hook_field_update_field($field, $prior_field, $has_data) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Reset the static value that keeps track of allowed values for list fields.",
            " *  drupal_static_reset('list_allowed_values');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field being updated.",
        "scope": "text.php"
    },
    "hook_field_delete_field": {
        "prefix": "hook_field_delete_field",
        "body": [
            "\/**",
            " * Implements hook_field_delete_field().",
            " *\/",
            "function hook_field_delete_field($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field being deleted.",
        "scope": "text.php"
    },
    "hook_field_update_instance": {
        "prefix": "hook_field_update_instance",
        "body": [
            "\/**",
            " * Implements hook_field_update_instance().",
            " *\/",
            "function hook_field_update_instance($instance, $prior_instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field instance being updated.",
        "scope": "text.php"
    },
    "hook_field_delete_instance": {
        "prefix": "hook_field_delete_instance",
        "body": [
            "\/**",
            " * Implements hook_field_delete_instance().",
            " *\/",
            "function hook_field_delete_instance($instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field instance being deleted.",
        "scope": "text.php"
    },
    "hook_field_read_field": {
        "prefix": "hook_field_read_field",
        "body": [
            "\/**",
            " * Implements hook_field_read_field().",
            " *\/",
            "function hook_field_read_field($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on field records being read from the database.",
        "scope": "text.php"
    },
    "hook_field_read_instance": {
        "prefix": "hook_field_read_instance",
        "body": [
            "\/**",
            " * Implements hook_field_read_instance().",
            " *\/",
            "function hook_field_read_instance($instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo Needs function body.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a field record being read from the database.",
        "scope": "text.php"
    },
    "hook_field_purge_field": {
        "prefix": "hook_field_purge_field",
        "body": [
            "\/**",
            " * Implements hook_field_purge_field().",
            " *\/",
            "function hook_field_purge_field($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('my_module_field_info')",
            " *    ->condition('id', $field['id'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Acts when a field record is being purged.",
        "scope": "text.php"
    },
    "hook_field_purge_instance": {
        "prefix": "hook_field_purge_instance",
        "body": [
            "\/**",
            " * Implements hook_field_purge_instance().",
            " *\/",
            "function hook_field_purge_instance($instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('my_module_field_instance_info')",
            " *    ->condition('id', $instance['id'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Acts when a field instance is being purged.",
        "scope": "text.php"
    },
    "hook_field_storage_purge_field": {
        "prefix": "hook_field_storage_purge_field",
        "body": [
            "\/**",
            " * Implements hook_field_storage_purge_field().",
            " *\/",
            "function hook_field_storage_purge_field($field) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $table_name = _field_sql_storage_tablename($field);",
            " *  $revision_name = _field_sql_storage_revision_tablename($field);",
            " *  db_drop_table($table_name);",
            " *  db_drop_table($revision_name);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Remove field storage information when a field record is purged.",
        "scope": "text.php"
    },
    "hook_field_storage_purge_field_instance": {
        "prefix": "hook_field_storage_purge_field_instance",
        "body": [
            "\/**",
            " * Implements hook_field_storage_purge_field_instance().",
            " *\/",
            "function hook_field_storage_purge_field_instance($instance) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('my_module_field_instance_info')",
            " *    ->condition('id', $instance['id'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Remove field storage information when a field instance is purged.",
        "scope": "text.php"
    },
    "hook_field_access": {
        "prefix": "hook_field_access",
        "body": [
            "\/**",
            " * Implements hook_field_access().",
            " *\/",
            "function hook_field_access($op, $field, $entity_type, $entity, $account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($field['field_name'] == 'field_of_interest' && $op == 'edit') {",
            " *    return user_access('edit field of interest', $account);",
            " *  }",
            " *  return TRUE;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Determine whether the user has access to a given field.",
        "scope": "text.php"
    },
    "hook_field_settings_form": {
        "prefix": "hook_field_settings_form",
        "body": [
            "\/**",
            " * Implements hook_field_settings_form().",
            " *\/",
            "function hook_field_settings_form($field, $instance, $has_data) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $settings = $field['settings'];",
            " *  $form['max_length'] = array(",
            " *    '#type' => 'textfield',",
            " *    '#title' => t('Maximum length'),",
            " *    '#default_value' => $settings['max_length'],",
            " *    '#required' => FALSE,",
            " *    '#element_validate' => array('element_validate_integer_positive'),",
            " *    '#description' => t('The maximum length of the field in characters. Leave blank for an unlimited size.'),",
            " *  );",
            " *  return $form;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Add settings to a field settings form.",
        "scope": "text.php"
    },
    "hook_file_download_access": {
        "prefix": "hook_file_download_access",
        "body": [
            "\/**",
            " * Implements hook_file_download_access().",
            " *\/",
            "function hook_file_download_access($file_item, $entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($entity_type == 'node') {",
            " *    return node_access('view', $entity);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Control download access to files.",
        "scope": "text.php"
    },
    "hook_file_download_access_alter": {
        "prefix": "hook_file_download_access_alter",
        "body": [
            "\/**",
            " * Implements hook_file_download_access_alter().",
            " *\/",
            "function hook_file_download_access_alter(&$grants, $file_item, $entity_type, $entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ For our example module, we always enforce the rules set by node module.",
            " *  if (isset($grants['node'])) {",
            " *    $grants = array('node' => $grants['node']);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the access rules applied to a file download.",
        "scope": "text.php"
    },
    "for every filter. The purpose of the 'prepare\n * callback' is to escape HTML-like structures. For example, imagine a filter\n * which allows the user to paste entire chunks of programming code without\n * requiring manual escaping of special HTML characters like < or &. If the\n * programming code were left untouched, then other filters could think it was\n * HTML and change it. For many filters, the prepare step is not necessary.\n *\n * The second step is the actual processing step. The result from passing the\n * text through all the filters' prepare steps gets passed to all the filters\n * again, this time with the 'process callback' function. The process callbacks\n * should then actually change the content: transform URLs into hyperlinks,\n * convert smileys into images, etc.\n *\n * For performance reasons content is only filtered once; the result is stored\n * in the cache table and retrieved from the cache the next time the same piece\n * of content is displayed. If a filter's output is dynamic, it can override the\n * cache mechanism, but obviously this should be used with caution: having one\n * filter that does not support caching in a particular text format disables\n * caching for the entire format, not just for one filter.\n *\n * Beware of the filter cache when developing your module: it is advised to set\n * your filter to 'cache' => FALSE while developing, but be sure to remove that\n * setting if it's not needed, when you are no longer in development mode.\n *\n * @return\n *   An associative array of filters, whose keys are internal filter names,\n *   which should be unique and therefore prefixed with the name of the module.\n *   Each value is an associative array describing the filter, with the\n *   following elements": {
        "prefix": "for every filter. The purpose of the 'prepare\n * callback' is to escape HTML-like structures. For example, imagine a filter\n * which allows the user to paste entire chunks of programming code without\n * requiring manual escaping of special HTML characters like < or &. If the\n * programming code were left untouched, then other filters could think it was\n * HTML and change it. For many filters, the prepare step is not necessary.\n *\n * The second step is the actual processing step. The result from passing the\n * text through all the filters' prepare steps gets passed to all the filters\n * again, this time with the 'process callback' function. The process callbacks\n * should then actually change the content: transform URLs into hyperlinks,\n * convert smileys into images, etc.\n *\n * For performance reasons content is only filtered once; the result is stored\n * in the cache table and retrieved from the cache the next time the same piece\n * of content is displayed. If a filter's output is dynamic, it can override the\n * cache mechanism, but obviously this should be used with caution: having one\n * filter that does not support caching in a particular text format disables\n * caching for the entire format, not just for one filter.\n *\n * Beware of the filter cache when developing your module: it is advised to set\n * your filter to 'cache' => FALSE while developing, but be sure to remove that\n * setting if it's not needed, when you are no longer in development mode.\n *\n * @return\n *   An associative array of filters, whose keys are internal filter names,\n *   which should be unique and therefore prefixed with the name of the module.\n *   Each value is an associative array describing the filter, with the\n *   following elements",
        "body": [
            "\/**",
            " * Implements for every filter. The purpose of the 'prepare\n * callback' is to escape HTML-like structures. For example, imagine a filter\n * which allows the user to paste entire chunks of programming code without\n * requiring manual escaping of special HTML characters like < or &. If the\n * programming code were left untouched, then other filters could think it was\n * HTML and change it. For many filters, the prepare step is not necessary.\n *\n * The second step is the actual processing step. The result from passing the\n * text through all the filters' prepare steps gets passed to all the filters\n * again, this time with the 'process callback' function. The process callbacks\n * should then actually change the content: transform URLs into hyperlinks,\n * convert smileys into images, etc.\n *\n * For performance reasons content is only filtered once; the result is stored\n * in the cache table and retrieved from the cache the next time the same piece\n * of content is displayed. If a filter's output is dynamic, it can override the\n * cache mechanism, but obviously this should be used with caution: having one\n * filter that does not support caching in a particular text format disables\n * caching for the entire format, not just for one filter.\n *\n * Beware of the filter cache when developing your module: it is advised to set\n * your filter to 'cache' => FALSE while developing, but be sure to remove that\n * setting if it's not needed, when you are no longer in development mode.\n *\n * @return\n *   An associative array of filters, whose keys are internal filter names,\n *   which should be unique and therefore prefixed with the name of the module.\n *   Each value is an associative array describing the filter, with the\n *   following elements().",
            " *\/",
            "function for every filter. The purpose of the 'prepare\n * callback' is to escape HTML-like structures. For example, imagine a filter\n * which allows the user to paste entire chunks of programming code without\n * requiring manual escaping of special HTML characters like < or &. If the\n * programming code were left untouched, then other filters could think it was\n * HTML and change it. For many filters, the prepare step is not necessary.\n *\n * The second step is the actual processing step. The result from passing the\n * text through all the filters' prepare steps gets passed to all the filters\n * again, this time with the 'process callback' function. The process callbacks\n * should then actually change the content: transform URLs into hyperlinks,\n * convert smileys into images, etc.\n *\n * For performance reasons content is only filtered once; the result is stored\n * in the cache table and retrieved from the cache the next time the same piece\n * of content is displayed. If a filter's output is dynamic, it can override the\n * cache mechanism, but obviously this should be used with caution: having one\n * filter that does not support caching in a particular text format disables\n * caching for the entire format, not just for one filter.\n *\n * Beware of the filter cache when developing your module: it is advised to set\n * your filter to 'cache' => FALSE while developing, but be sure to remove that\n * setting if it's not needed, when you are no longer in development mode.\n *\n * @return\n *   An associative array of filters, whose keys are internal filter names,\n *   which should be unique and therefore prefixed with the name of the module.\n *   Each value is an associative array describing the filter, with the\n *   following elements(all are optional except as noted):\n *   - title: (required) An administrative summary of what the filter does.\n *   - description: Additional administrative information about the filter's\n *     behavior, if needed for clarification.\n *   - settings callback: The name of a function that returns configuration form\n *     elements for the filter. See callback_filter_settings() for details.\n *   - default settings: An associative array containing default settings for\n *     the filter, to be applied when the filter has not been configured yet.\n *   - prepare callback: The name of a function that escapes the content before\n *     the actual filtering happens. See callback_filter_prepare() for\n *     details.\n *   - process callback: (required) The name the function that performs the\n *     actual filtering. See callback_filter_process() for details.\n *   - cache (default TRUE): Specifies whether the filtered text can be cached.\n *     Note that setting this to FALSE makes the entire text format not\n *     cacheable, which may have an impact on the site's overall performance.\n *     See filter_format_allowcache() for details.\n *   - tips callback: The name of a function that returns end-user-facing filter\n *     usage guidelines for the filter. See callback_filter_tips() for\n *     details.\n *   - weight: A default weight for the filter in new text formats.\n *\n * @see filter_example.module\n * @see hook_filter_info_alter()\n *\/\nfunction hook_filter_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $filters['filter_html'] = array(",
            " *    'title' => t('Limit allowed HTML tags'),",
            " *    'description' => t('Allows you to restrict the HTML tags the user can use. It will also remove harmful content such as JavaScript events, JavaScript URLs and CSS styles from those tags that are not removed.'),",
            " *    'process callback' => '_filter_html',",
            " *    'settings callback' => '_filter_html_settings',",
            " *    'default settings' => array(",
            " *      'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd>',",
            " *      'filter_html_help' => 1,",
            " *      'filter_html_nofollow' => 0,",
            " *    ),",
            " *    'tips callback' => '_filter_html_tips',",
            " *  );",
            " *  $filters['filter_autop'] = array(",
            " *    'title' => t('Convert line breaks'),",
            " *    'description' => t('Converts line breaks into HTML (i.e. &lt;br&gt; and &lt;p&gt;) tags.'),",
            " *    'process callback' => '_filter_autop',",
            " *    'tips callback' => '_filter_autop_tips',",
            " *  );",
            " *  return $filters;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define content filters.",
        "scope": "text.php"
    },
    "callback_filter_prepare": {
        "prefix": "callback_filter_prepare",
        "body": [
            "\/**",
            " * Implements callback_filter_prepare().",
            " *\/",
            "function callback_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Escape <code> and <\/code> tags.",
            " *  $text = preg_replace('|<code>(.+?)<\/code>|se', \"[codefilter_code]$1[\/codefilter_code]\", $text);",
            " *  return $text;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide prepared text with special characters escaped.",
        "scope": "text.php"
    },
    "callback_filter_tips": {
        "prefix": "callback_filter_tips",
        "body": [
            "\/**",
            " * Implements callback_filter_tips().",
            " *\/",
            "function callback_filter_tips($filter, $format, $long) {",
            "\/**",
            " * Sample code from the api example.",
            " * if ($long) {",
            " *    return t('Lines and paragraphs are automatically recognized. The &lt;br \/&gt; line break, &lt;p&gt; paragraph and &lt;\/p&gt; close paragraph tags are inserted automatically. If paragraphs are not recognized simply add a couple blank lines.');",
            " *  }",
            " *  else {",
            " *    return t('Lines and paragraphs break automatically.');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return help text for a filter.",
        "scope": "text.php"
    },
    "hook_filter_format_insert": {
        "prefix": "hook_filter_format_insert",
        "body": [
            "\/**",
            " * Implements hook_filter_format_insert().",
            " *\/",
            "function hook_filter_format_insert($format) {",
            "\/**",
            " * Sample code from the api example.",
            " *  mymodule_cache_rebuild();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform actions when a new text format has been created.",
        "scope": "text.php"
    },
    "hook_filter_format_update": {
        "prefix": "hook_filter_format_update",
        "body": [
            "\/**",
            " * Implements hook_filter_format_update().",
            " *\/",
            "function hook_filter_format_update($format) {",
            "\/**",
            " * Sample code from the api example.",
            " *  mymodule_cache_rebuild();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform actions when a text format has been updated.",
        "scope": "text.php"
    },
    "hook_filter_format_disable": {
        "prefix": "hook_filter_format_disable",
        "body": [
            "\/**",
            " * Implements hook_filter_format_disable().",
            " *\/",
            "function hook_filter_format_disable($format) {",
            "\/**",
            " * Sample code from the api example.",
            " *  mymodule_cache_rebuild();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform actions when a text format has been disabled.",
        "scope": "text.php"
    },
    "hook_image_effect_info_alter": {
        "prefix": "hook_image_effect_info_alter",
        "body": [
            "\/**",
            " * Implements hook_image_effect_info_alter().",
            " *\/",
            "function hook_image_effect_info_alter(&$effects) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Override the Image module's crop effect with more options.",
            " *  $effects['image_crop']['effect callback'] = 'mymodule_crop_effect';",
            " *  $effects['image_crop']['dimensions callback'] = 'mymodule_crop_dimensions';",
            " *  $effects['image_crop']['form callback'] = 'mymodule_crop_form';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the information provided in hook_image_effect_info().",
        "scope": "text.php"
    },
    "hook_image_style_save": {
        "prefix": "hook_image_style_save",
        "body": [
            "\/**",
            " * Implements hook_image_style_save().",
            " *\/",
            "function hook_image_style_save($style) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ If a module defines an image style and that style is renamed by the user",
            " *  \/\/ the module should update any references to that style.",
            " *  if (isset($style['old_name']) && $style['old_name'] == variable_get('mymodule_image_style', '')) {",
            " *    variable_set('mymodule_image_style', $style['name']);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to image style updating.",
        "scope": "text.php"
    },
    "hook_image_style_delete": {
        "prefix": "hook_image_style_delete",
        "body": [
            "\/**",
            " * Implements hook_image_style_delete().",
            " *\/",
            "function hook_image_style_delete($style) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Administrators can choose an optional replacement style when deleting.",
            " *  \/\/ Update the modules style variable accordingly.",
            " *  if (isset($style['old_name']) && $style['old_name'] == variable_get('mymodule_image_style', '')) {",
            " *    variable_set('mymodule_image_style', $style['name']);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to image style deletion.",
        "scope": "text.php"
    },
    "hook_image_style_flush": {
        "prefix": "hook_image_style_flush",
        "body": [
            "\/**",
            " * Implements hook_image_style_flush().",
            " *\/",
            "function hook_image_style_flush($style) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Empty cached data that contains information about the style.",
            " *  cache_clear_all('*', 'cache_mymodule', TRUE);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to image style flushing.",
        "scope": "text.php"
    },
    "hook_image_styles_alter": {
        "prefix": "hook_image_styles_alter",
        "body": [
            "\/**",
            " * Implements hook_image_styles_alter().",
            " *\/",
            "function hook_image_styles_alter(&$styles) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Check that we only affect a default style.",
            " *  if ($styles['thumbnail']['storage'] == IMAGE_STORAGE_DEFAULT) {",
            " *    \/\/ Add an additional effect to the thumbnail style.",
            " *    $styles['thumbnail']['effects'][] = array(",
            " *      'name' => 'image_desaturate',",
            " *      'data' => array(),",
            " *      'weight' => 1,",
            " *      'effect callback' => 'image_desaturate_effect',",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Modify any image styles provided by other modules or the user.",
        "scope": "text.php"
    },
    "hook_locale": {
        "prefix": "hook_locale",
        "body": [
            "\/**",
            " * Implements hook_locale().",
            " *\/",
            "function hook_locale($op = 'groups') {",
            "\/**",
            " * Sample code from the api example.",
            " *  switch ($op) {",
            " *    case 'groups':",
            " *      return array('custom' => t('Custom'));",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allows modules to define their own text groups that can be translated.",
        "scope": "text.php"
    },
    "hook_multilingual_settings_changed": {
        "prefix": "hook_multilingual_settings_changed",
        "body": [
            "\/**",
            " * Implements hook_multilingual_settings_changed().",
            " *\/",
            "function hook_multilingual_settings_changed() {",
            "\/**",
            " * Sample code from the api example.",
            " *  field_info_cache_clear();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to react to language settings changes.",
        "scope": "text.php"
    },
    "hook_menu_insert": {
        "prefix": "hook_menu_insert",
        "body": [
            "\/**",
            " * Implements hook_menu_insert().",
            " *\/",
            "function hook_menu_insert($menu) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ For example, we track available menus in a variable.",
            " *  $my_menus = variable_get('my_module_menus', array());",
            " *  $my_menus[$menu['menu_name']] = $menu['menu_name'];",
            " *  variable_set('my_module_menus', $my_menus);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a custom menu creation.",
        "scope": "text.php"
    },
    "hook_menu_update": {
        "prefix": "hook_menu_update",
        "body": [
            "\/**",
            " * Implements hook_menu_update().",
            " *\/",
            "function hook_menu_update($menu) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ For example, we track available menus in a variable.",
            " *  $my_menus = variable_get('my_module_menus', array());",
            " *  $my_menus[$menu['menu_name']] = $menu['menu_name'];",
            " *  variable_set('my_module_menus', $my_menus);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a custom menu update.",
        "scope": "text.php"
    },
    "hook_menu_delete": {
        "prefix": "hook_menu_delete",
        "body": [
            "\/**",
            " * Implements hook_menu_delete().",
            " *\/",
            "function hook_menu_delete($menu) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Delete the record from our variable.",
            " *  $my_menus = variable_get('my_module_menus', array());",
            " *  unset($my_menus[$menu['menu_name']]);",
            " *  variable_set('my_module_menus', $my_menus);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a custom menu deletion.",
        "scope": "text.php"
    },
    "* will erase any node ID 0 entry when it is called, so you will need to make\n * sure to restore your {node_access} record after node_access_rebuild": {
        "prefix": "* will erase any node ID 0 entry when it is called, so you will need to make\n * sure to restore your {node_access} record after node_access_rebuild",
        "body": [
            "\/**",
            " * Implements * will erase any node ID 0 entry when it is called, so you will need to make\n * sure to restore your {node_access} record after node_access_rebuild().",
            " *\/",
            "function * will erase any node ID 0 entry when it is called, so you will need to make\n * sure to restore your {node_access} record after node_access_rebuild() is\n * called.\n *\n * @see node_access_view_all_nodes()\n * @see node_access_rebuild()\n *\n * @param $account\n *   The user object whose grants are requested.\n * @param $op\n *   The node operation to be performed, such as 'view', 'update', or 'delete'.\n *\n * @return\n *   An array whose keys are \"realms\" of grants, and whose values are arrays of\n *   the grant IDs within this realm that this user is being granted.\n *\n * For a detailed example, see node_access_example.module.\n *\n * @ingroup node_access\n *\/\nfunction hook_node_grants($account, $op) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (user_access('access private content', $account)) {",
            " *    $grants['example'] = array(1);",
            " *  }",
            " *  $grants['example_author'] = array($account->uid);",
            " *  return $grants;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Inform the node access system what permissions the user has.",
        "scope": "text.php"
    },
    "hook_node_access_records": {
        "prefix": "hook_node_access_records",
        "body": [
            "\/**",
            " * Implements hook_node_access_records().",
            " *\/",
            "function hook_node_access_records($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ We only care about the node if it has been marked private. If not, it is",
            " *  \/\/ treated just like any other node and we completely ignore it.",
            " *  if ($node->private) {",
            " *    $grants = array();",
            " *    \/\/ Only published nodes should be viewable to all users. If we allow access",
            " *    \/\/ blindly here, then all users could view an unpublished node.",
            " *    if ($node->status) {",
            " *      $grants[] = array(",
            " *        'realm' => 'example',",
            " *        'gid' => 1,",
            " *        'grant_view' => 1,",
            " *        'grant_update' => 0,",
            " *        'grant_delete' => 0,",
            " *        'priority' => 0,",
            " *      );",
            " *    }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Set permissions for a node to be written to the database.",
        "scope": "text.php"
    },
    "hook_node_access_records_alter": {
        "prefix": "hook_node_access_records_alter",
        "body": [
            "\/**",
            " * Implements hook_node_access_records_alter().",
            " *\/",
            "function hook_node_access_records_alter(&$grants, $node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Our module allows editors to mark specific articles with the 'is_preview'",
            " *  \/\/ field. If the node being saved has a TRUE value for that field, then only",
            " *  \/\/ our grants are retained, and other grants are removed. Doing so ensures",
            " *  \/\/ that our rules are enforced no matter what priority other grants are given.",
            " *  if ($node->is_preview) {",
            " *    \/\/ Our module grants are set in $grants['example'].",
            " *    $temp = $grants['example'];",
            " *    \/\/ Now remove all module grants but our own.",
            " *    $grants = array('example' => $temp);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter permissions for a node before it is written to the database.",
        "scope": "text.php"
    },
    "with the operation, which is called when the form is submitted. The\n * callback function receives one initial argument, which is an array of the\n * checked nodes.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - label:": {
        "prefix": "with the operation, which is called when the form is submitted. The\n * callback function receives one initial argument, which is an array of the\n * checked nodes.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - label:",
        "body": [
            "\/**",
            " * Implements with the operation, which is called when the form is submitted. The\n * callback function receives one initial argument, which is an array of the\n * checked nodes.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - label:().",
            " *\/",
            "function with the operation, which is called when the form is submitted. The\n * callback function receives one initial argument, which is an array of the\n * checked nodes.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - label:(required) The label for the operation, displayed in the dropdown\n *     menu.\n *   - callback: (required) The function to call for the operation.\n *   - callback arguments: (optional) An array of additional arguments to pass\n *     to the callback function.\n *\/\nfunction hook_node_operations() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $operations = array(",
            " *    'publish' => array(",
            " *      'label' => t('Publish selected content'),",
            " *      'callback' => 'node_mass_update',",
            " *      'callback arguments' => array('updates' => array('status' => NODE_PUBLISHED)),",
            " *    ),",
            " *    'unpublish' => array(",
            " *      'label' => t('Unpublish selected content'),",
            " *      'callback' => 'node_mass_update',",
            " *      'callback arguments' => array('updates' => array('status' => NODE_NOT_PUBLISHED)),",
            " *    ),",
            " *    'promote' => array(",
            " *      'label' => t('Promote selected content to front page'),",
            " *      'callback' => 'node_mass_update',",
            " *      'callback arguments' => array('updates' => array('status' => NODE_PUBLISHED, 'promote' => NODE_PROMOTED)),",
            " *    ),",
            " *    'demote' => array(",
            " *      'label' => t('Demote selected content from front page'),",
            " *      'callback' => 'node_mass_update',",
            " *      'callback arguments' => array('updates' => array('promote' => NODE_NOT_PROMOTED)),",
            " *    ),",
            " *    'sticky' => array(",
            " *      'label' => t('Make selected content sticky'),",
            " *      'callback' => 'node_mass_update',",
            " *      'callback arguments' => array('updates' => array('status' => NODE_PUBLISHED, 'sticky' => NODE_STICKY)),",
            " *    ),",
            " *    'unsticky' => array(",
            " *      'label' => t('Make selected content not sticky'),",
            " *      'callback' => 'node_mass_update',",
            " *      'callback arguments' => array('updates' => array('sticky' => NODE_NOT_STICKY)),",
            " *    ),",
            " *    'delete' => array(",
            " *      'label' => t('Delete selected content'),",
            " *      'callback' => NULL,",
            " *    ),",
            " *  );",
            " *  return $operations;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Add mass node operations.",
        "scope": "text.php"
    },
    "hook_node_delete": {
        "prefix": "hook_node_delete",
        "body": [
            "\/**",
            " * Implements hook_node_delete().",
            " *\/",
            "function hook_node_delete($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('nid', $node->nid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to node deletion.",
        "scope": "text.php"
    },
    "hook_node_revision_delete": {
        "prefix": "hook_node_revision_delete",
        "body": [
            "\/**",
            " * Implements hook_node_revision_delete().",
            " *\/",
            "function hook_node_revision_delete($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('vid', $node->vid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to deletion of a node revision.",
        "scope": "text.php"
    },
    "hook_node_insert": {
        "prefix": "hook_node_insert",
        "body": [
            "\/**",
            " * Implements hook_node_insert().",
            " *\/",
            "function hook_node_insert($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('mytable')",
            " *    ->fields(array(",
            " *      'nid' => $node->nid,",
            " *      'extra' => $node->extra,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to creation of a new node.",
        "scope": "text.php"
    },
    "hook_node_load": {
        "prefix": "hook_node_load",
        "body": [
            "\/**",
            " * Implements hook_node_load().",
            " *\/",
            "function hook_node_load($nodes, $types) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Decide whether any of $types are relevant to our purposes.",
            " *  if (count(array_intersect($types_we_want_to_process, $types))) {",
            " *    \/\/ Gather our extra data for each of these nodes.",
            " *    $result = db_query('SELECT nid, foo FROM {mytable} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));",
            " *    \/\/ Add our extra data to the node objects.",
            " *    foreach ($result as $record) {",
            " *      $nodes[$record->nid]->foo = $record->foo;",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on arbitrary nodes being loaded from the database.",
        "scope": "text.php"
    },
    "hook_node_prepare": {
        "prefix": "hook_node_prepare",
        "body": [
            "\/**",
            " * Implements hook_node_prepare().",
            " *\/",
            "function hook_node_prepare($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (!isset($node->comment)) {",
            " *    $node->comment = variable_get(\"comment_$node->type\", COMMENT_NODE_OPEN);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node object about to be shown on the add\/edit form.",
        "scope": "text.php"
    },
    "hook_node_search_result": {
        "prefix": "hook_node_search_result",
        "body": [
            "\/**",
            " * Implements hook_node_search_result().",
            " *\/",
            "function hook_node_search_result($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $comments = db_query('SELECT comment_count FROM {node_comment_statistics} WHERE nid = :nid', array('nid' => $node->nid))->fetchField();",
            " *  return array('comment' => format_plural($comments, '1 comment', '@count comments'));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node being displayed as a search result.",
        "scope": "text.php"
    },
    "hook_node_presave": {
        "prefix": "hook_node_presave",
        "body": [
            "\/**",
            " * Implements hook_node_presave().",
            " *\/",
            "function hook_node_presave($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($node->nid && $node->moderate) {",
            " *    \/\/ Reset votes when node is updated:",
            " *    $node->score = 0;",
            " *    $node->users = '';",
            " *    $node->votes = 0;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node being inserted or updated.",
        "scope": "text.php"
    },
    "hook_node_update": {
        "prefix": "hook_node_update",
        "body": [
            "\/**",
            " * Implements hook_node_update().",
            " *\/",
            "function hook_node_update($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('mytable')",
            " *    ->fields(array('extra' => $node->extra))",
            " *    ->condition('nid', $node->nid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to updates to a node.",
        "scope": "text.php"
    },
    "hook_node_update_index": {
        "prefix": "hook_node_update_index",
        "body": [
            "\/**",
            " * Implements hook_node_update_index().",
            " *\/",
            "function hook_node_update_index($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $text = '';",
            " *  $comments = db_query('SELECT subject, comment, format FROM {comment} WHERE nid = :nid AND status = :status', array(':nid' => $node->nid, ':status' => COMMENT_PUBLISHED));",
            " *  foreach ($comments as $comment) {",
            " *    $text .= '<h2>' . check_plain($comment->subject) . '<\/h2>' . check_markup($comment->comment, $comment->format, '', TRUE);",
            " *  }",
            " *  return $text;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node being indexed for searching.",
        "scope": "text.php"
    },
    "hook_node_validate": {
        "prefix": "hook_node_validate",
        "body": [
            "\/**",
            " * Implements hook_node_validate().",
            " *\/",
            "function hook_node_validate($node, $form, &$form_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (isset($node->end) && isset($node->start)) {",
            " *    if ($node->start > $node->end) {",
            " *      form_set_error('time', t('An event may not end before it starts.'));",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform node validation before a node is created or updated.",
        "scope": "text.php"
    },
    "hook_node_submit": {
        "prefix": "hook_node_submit",
        "body": [
            "\/**",
            " * Implements hook_node_submit().",
            " *\/",
            "function hook_node_submit($node, $form, &$form_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Decompose the selected menu parent option into 'menu_name' and 'plid', if",
            " *  \/\/ the form used the default parent selection widget.",
            " *  if (!empty($form_state['values']['menu']['parent'])) {",
            " *    list($node->menu['menu_name'], $node->menu['plid']) = explode(':', $form_state['values']['menu']['parent']);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node after validated form values have been copied to it.",
        "scope": "text.php"
    },
    "hook_node_view": {
        "prefix": "hook_node_view",
        "body": [
            "\/**",
            " * Implements hook_node_view().",
            " *\/",
            "function hook_node_view($node, $view_mode, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $node->content['my_additional_field'] = array(",
            " *    '#markup' => $additional_field,",
            " *    '#weight' => 10,",
            " *    '#theme' => 'mymodule_my_additional_field',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node that is being assembled before rendering.",
        "scope": "text.php"
    },
    "hook_node_view_alter": {
        "prefix": "hook_node_view_alter",
        "body": [
            "\/**",
            " * Implements hook_node_view_alter().",
            " *\/",
            "function hook_node_view_alter(&$build) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($build['#view_mode'] == 'full' && isset($build['an_additional_field'])) {",
            " *    \/\/ Change its weight.",
            " *    $build['an_additional_field']['#weight'] = -10;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the results of node_view().",
        "scope": "text.php"
    },
    "hook_node_info": {
        "prefix": "hook_node_info",
        "body": [
            "\/**",
            " * Implements hook_node_info().",
            " *\/",
            "function hook_node_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'blog' => array(",
            " *      'name' => t('Blog entry'),",
            " *      'base' => 'blog',",
            " *      'description' => t('Use for multi-user blogs. Every user gets a personal blog.'),",
            " *    )",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define module-provided node types.",
        "scope": "text.php"
    },
    "hook_ranking": {
        "prefix": "hook_ranking",
        "body": [
            "\/**",
            " * Implements hook_ranking().",
            " *\/",
            "function hook_ranking() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ If voting is disabled, we can avoid returning the array, no hard feelings.",
            " *  if (variable_get('vote_node_enabled', TRUE)) {",
            " *    return array(",
            " *      'vote_average' => array(",
            " *        'title' => t('Average vote'),",
            " *        \/\/ Note that we use i.sid, the search index's search item id, rather than",
            " *        \/\/ n.nid.",
            " *        'join' => array(",
            " *          'type' => 'LEFT',",
            " *          'table' => 'vote_node_data',",
            " *          'alias' => 'vote_node_data',",
            " *          'on' => 'vote_node_data.nid = i.sid',",
            " *        ),",
            " *        \/\/ The highest possible score should be 1, and the lowest possible score,",
            " *        \/\/ always 0, should be 0.",
            " *        'score' => 'vote_node_data.average \/ CAST(%f AS DECIMAL)',",
            " *        \/\/ Pass in the highest possible voting score as a decimal argument.",
            " *        'arguments' => array(variable_get('vote_score_max', 5)),",
            " *      ),",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide additional methods of scoring for core search results for nodes.",
        "scope": "text.php"
    },
    "hook_node_type_insert": {
        "prefix": "hook_node_type_insert",
        "body": [
            "\/**",
            " * Implements hook_node_type_insert().",
            " *\/",
            "function hook_node_type_insert($info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  drupal_set_message(t('You have just created a content type with a machine name %type.', array('%type' => $info->type)));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to node type creation.",
        "scope": "text.php"
    },
    "hook_node_type_update": {
        "prefix": "hook_node_type_update",
        "body": [
            "\/**",
            " * Implements hook_node_type_update().",
            " *\/",
            "function hook_node_type_update($info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (!empty($info->old_type) && $info->old_type != $info->type) {",
            " *    $setting = variable_get('comment_' . $info->old_type, COMMENT_NODE_OPEN);",
            " *    variable_del('comment_' . $info->old_type);",
            " *    variable_set('comment_' . $info->type, $setting);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to node type updates.",
        "scope": "text.php"
    },
    "hook_node_type_delete": {
        "prefix": "hook_node_type_delete",
        "body": [
            "\/**",
            " * Implements hook_node_type_delete().",
            " *\/",
            "function hook_node_type_delete($info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  variable_del('comment_' . $info->type);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to node type deletion.",
        "scope": "text.php"
    },
    "hook_delete": {
        "prefix": "hook_delete",
        "body": [
            "\/**",
            " * Implements hook_delete().",
            " *\/",
            "function hook_delete($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('nid', $node->nid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to node deletion.",
        "scope": "text.php"
    },
    "hook_prepare": {
        "prefix": "hook_prepare",
        "body": [
            "\/**",
            " * Implements hook_prepare().",
            " *\/",
            "function hook_prepare($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (!isset($node->mymodule_value)) {",
            " *    $node->mymodule_value = 'foo';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a node object about to be shown on the add\/edit form.",
        "scope": "text.php"
    },
    "hook_insert": {
        "prefix": "hook_insert",
        "body": [
            "\/**",
            " * Implements hook_insert().",
            " *\/",
            "function hook_insert($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('mytable')",
            " *    ->fields(array(",
            " *      'nid' => $node->nid,",
            " *      'extra' => $node->extra,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to creation of a new node.",
        "scope": "text.php"
    },
    "hook_load": {
        "prefix": "hook_load",
        "body": [
            "\/**",
            " * Implements hook_load().",
            " *\/",
            "function hook_load($nodes) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $result = db_query('SELECT nid, foo FROM {mytable} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));",
            " *  foreach ($result as $record) {",
            " *    $nodes[$record->nid]->foo = $record->foo;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on nodes being loaded from the database.",
        "scope": "text.php"
    },
    "hook_update": {
        "prefix": "hook_update",
        "body": [
            "\/**",
            " * Implements hook_update().",
            " *\/",
            "function hook_update($node) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('mytable')",
            " *    ->fields(array('extra' => $node->extra))",
            " *    ->condition('nid', $node->nid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to updates to a node.",
        "scope": "text.php"
    },
    "hook_validate": {
        "prefix": "hook_validate",
        "body": [
            "\/**",
            " * Implements hook_validate().",
            " *\/",
            "function hook_validate($node, $form, &$form_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (isset($node->end) && isset($node->start)) {",
            " *    if ($node->start > $node->end) {",
            " *      form_set_error('time', t('An event may not end before it starts.'));",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform node validation before a node is created or updated.",
        "scope": "text.php"
    },
    "hook_view": {
        "prefix": "hook_view",
        "body": [
            "\/**",
            " * Implements hook_view().",
            " *\/",
            "function hook_view($node, $view_mode, $langcode = NULL) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($view_mode == 'full' && node_is_page($node)) {",
            " *    $breadcrumb = array();",
            " *    $breadcrumb[] = l(t('Home'), NULL);",
            " *    $breadcrumb[] = l(t('Example'), 'example');",
            " *    $breadcrumb[] = l($node->field1, 'example\/' . $node->field1);",
            " *    drupal_set_breadcrumb($breadcrumb);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Display a node.",
        "scope": "text.php"
    },
    "hook_openid": {
        "prefix": "hook_openid",
        "body": [
            "\/**",
            " * Implements hook_openid().",
            " *\/",
            "function hook_openid($op, $request) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($op == 'request') {",
            " *    $request['openid.identity'] = 'http:\/\/myname.myopenid.com\/';",
            " *  }",
            " *  return $request;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to modify the OpenID request parameters.",
        "scope": "text.php"
    },
    "hook_openid_response": {
        "prefix": "hook_openid_response",
        "body": [
            "\/**",
            " * Implements hook_openid_response().",
            " *\/",
            "function hook_openid_response($response, $account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (isset($response['openid.ns.ax'])) {",
            " *    _mymodule_store_ax_fields($response, $account);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to act upon a successful OpenID login.",
        "scope": "text.php"
    },
    "callbacks will be called in turn with an unique\n * parameter, the claimed identifier. They have to return an associative array\n * with array of services and claimed identifier in the same form as returned by\n * openid_discover": {
        "prefix": "callbacks will be called in turn with an unique\n * parameter, the claimed identifier. They have to return an associative array\n * with array of services and claimed identifier in the same form as returned by\n * openid_discover",
        "body": [
            "\/**",
            " * Implements callbacks will be called in turn with an unique\n * parameter, the claimed identifier. They have to return an associative array\n * with array of services and claimed identifier in the same form as returned by\n * openid_discover().",
            " *\/",
            "function callbacks will be called in turn with an unique\n * parameter, the claimed identifier. They have to return an associative array\n * with array of services and claimed identifier in the same form as returned by\n * openid_discover(). The resulting array must contain following keys:\n *   - 'services' (required) an array of discovered services (including OpenID\n *   version, endpoint URI, etc).\n *   - 'claimed_id' (optional) new claimed identifer, found by following HTTP\n *   redirects during the services discovery.\n *\n * The first discovery method that succeed (return at least one services) will\n * stop the discovery process.\n *\n * @return\n *   An associative array which keys are the name of the discovery methods and\n *   values are function callbacks.\n *\n * @see hook_openid_discovery_method_info_alter()\n *\/\nfunction hook_openid_discovery_method_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'new_discovery_idea' => '_my_discovery_method',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to declare OpenID discovery methods.",
        "scope": "text.php"
    },
    "hook_openid_discovery_method_info_alter": {
        "prefix": "hook_openid_discovery_method_info_alter",
        "body": [
            "\/**",
            " * Implements hook_openid_discovery_method_info_alter().",
            " *\/",
            "function hook_openid_discovery_method_info_alter(&$methods) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove XRI discovery scheme.",
            " *  unset($methods['xri']);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to alter discovery methods.",
        "scope": "text.php"
    },
    "callbacks will be called in turn with an unique\n * parameter, the identifier to normalize. They have to return a normalized\n * identifier, or NULL if the identifier is not in a form they can handle.\n *\n * The first normalization method that succeed": {
        "prefix": "callbacks will be called in turn with an unique\n * parameter, the identifier to normalize. They have to return a normalized\n * identifier, or NULL if the identifier is not in a form they can handle.\n *\n * The first normalization method that succeed",
        "body": [
            "\/**",
            " * Implements callbacks will be called in turn with an unique\n * parameter, the identifier to normalize. They have to return a normalized\n * identifier, or NULL if the identifier is not in a form they can handle.\n *\n * The first normalization method that succeed().",
            " *\/",
            "function callbacks will be called in turn with an unique\n * parameter, the identifier to normalize. They have to return a normalized\n * identifier, or NULL if the identifier is not in a form they can handle.\n *\n * The first normalization method that succeed(return a value that is not NULL)\n * will stop the normalization process.\n *\n * @return\n *   An array with a set of function callbacks, that will be called in turn\n *   when normalizing an OpenID identifier. The normalization functions have\n *   to return a normalized identifier, or NULL if the identifier is not in\n *   a form they can handle.\n * @see hook_openid_normalization_method_info_alter()\n *\/\nfunction hook_openid_normalization_method_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'new_normalization_idea' => '_my_normalization_method',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to declare OpenID normalization methods.",
        "scope": "text.php"
    },
    "hook_openid_normalization_method_info_alter": {
        "prefix": "hook_openid_normalization_method_info_alter",
        "body": [
            "\/**",
            " * Implements hook_openid_normalization_method_info_alter().",
            " *\/",
            "function hook_openid_normalization_method_info_alter(&$methods) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove Google IDP normalization.",
            " *  unset($methods['google_idp']);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to alter normalization methods.",
        "scope": "text.php"
    },
    "hook_overlay_parent_initialize": {
        "prefix": "hook_overlay_parent_initialize",
        "body": [
            "\/**",
            " * Implements hook_overlay_parent_initialize().",
            " *\/",
            "function hook_overlay_parent_initialize() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add our custom JavaScript.",
            " *  drupal_add_js(drupal_get_path('module', 'hook') . '\/hook-overlay.js');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to act when an overlay parent window is initialized.",
        "scope": "text.php"
    },
    "hook_overlay_child_initialize": {
        "prefix": "hook_overlay_child_initialize",
        "body": [
            "\/**",
            " * Implements hook_overlay_child_initialize().",
            " *\/",
            "function hook_overlay_child_initialize() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add our custom JavaScript.",
            " *  drupal_add_js(drupal_get_path('module', 'hook') . '\/hook-overlay-child.js');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to act when an overlay child window is initialized.",
        "scope": "text.php"
    },
    "hook_path_insert": {
        "prefix": "hook_path_insert",
        "body": [
            "\/**",
            " * Implements hook_path_insert().",
            " *\/",
            "function hook_path_insert($path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('mytable')",
            " *    ->fields(array(",
            " *      'alias' => $path['alias'],",
            " *      'pid' => $path['pid'],",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a path being inserted.",
        "scope": "text.php"
    },
    "hook_path_update": {
        "prefix": "hook_path_update",
        "body": [
            "\/**",
            " * Implements hook_path_update().",
            " *\/",
            "function hook_path_update($path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('mytable')",
            " *    ->fields(array('alias' => $path['alias']))",
            " *    ->condition('pid', $path['pid'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a path being updated.",
        "scope": "text.php"
    },
    "hook_path_delete": {
        "prefix": "hook_path_delete",
        "body": [
            "\/**",
            " * Implements hook_path_delete().",
            " *\/",
            "function hook_path_delete($path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('pid', $path['pid'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a path being deleted.",
        "scope": "text.php"
    },
    "name to invoke for 'datatype'.\n *     - type: A string used to determine the type of RDFa markup which will be\n *       used in the final HTML output, depending on whether the RDF object is a\n *       literal text or another RDF resource.\n *     - rdftype: A special property used to define the type of the instance.\n *       Its value should be an array of RDF classes.\n *\n *       @ingroup rdf\n *\/\nfunction hook_rdf_mapping": {
        "prefix": "name to invoke for 'datatype'.\n *     - type: A string used to determine the type of RDFa markup which will be\n *       used in the final HTML output, depending on whether the RDF object is a\n *       literal text or another RDF resource.\n *     - rdftype: A special property used to define the type of the instance.\n *       Its value should be an array of RDF classes.\n *\n *       @ingroup rdf\n *\/\nfunction hook_rdf_mapping",
        "body": [
            "\/**",
            " * Implements name to invoke for 'datatype'.\n *     - type: A string used to determine the type of RDFa markup which will be\n *       used in the final HTML output, depending on whether the RDF object is a\n *       literal text or another RDF resource.\n *     - rdftype: A special property used to define the type of the instance.\n *       Its value should be an array of RDF classes.\n *\n *       @ingroup rdf\n *\/\nfunction hook_rdf_mapping().",
            " *\/",
            "function name to invoke for 'datatype'.\n *     - type: A string used to determine the type of RDFa markup which will be\n *       used in the final HTML output, depending on whether the RDF object is a\n *       literal text or another RDF resource.\n *     - rdftype: A special property used to define the type of the instance.\n *       Its value should be an array of RDF classes.\n *\n *       @ingroup rdf\n *\/\nfunction hook_rdf_mapping() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    array(",
            " *      'type' => 'node',",
            " *      'bundle' => 'blog',",
            " *      'mapping' => array(",
            " *        'rdftype' => array('sioct:Weblog'),",
            " *        'title' => array(",
            " *          'predicates' => array('dc:title'),",
            " *        ),",
            " *        'created' => array(",
            " *          'predicates' => array('dc:date', 'dc:created'),",
            " *          'datatype' => 'xsd:dateTime',",
            " *          'callback' => 'date_iso8601',",
            " *        ),",
            " *        'body' => array(",
            " *          'predicates' => array('content:encoded'),",
            " *        ),",
            " *        'uid' => array(",
            " *          'predicates' => array('sioc:has_creator'),",
            " *          'type' => 'rel',",
            " *        ),",
            " *        'name' => array(",
            " *          'predicates' => array('foaf:name'),",
            " *        ),",
            " *      ),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to define RDF mappings for field bundles.",
        "scope": "text.php"
    },
    "hook_rdf_namespaces": {
        "prefix": "hook_rdf_namespaces",
        "body": [
            "\/**",
            " * Implements hook_rdf_namespaces().",
            " *\/",
            "function hook_rdf_namespaces() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'content'  => 'http:\/\/purl.org\/rss\/1.0\/modules\/content\/',",
            " *    'dc'       => 'http:\/\/purl.org\/dc\/terms\/',",
            " *    'foaf'     => 'http:\/\/xmlns.com\/foaf\/0.1\/',",
            " *    'og'       => 'http:\/\/ogp.me\/ns#',",
            " *    'rdfs'     => 'http:\/\/www.w3.org\/2000\/01\/rdf-schema#',",
            " *    'sioc'     => 'http:\/\/rdfs.org\/sioc\/ns#',",
            " *    'sioct'    => 'http:\/\/rdfs.org\/sioc\/types#',",
            " *    'skos'     => 'http:\/\/www.w3.org\/2004\/02\/skos\/core#',",
            " *    'xsd'      => 'http:\/\/www.w3.org\/2001\/XMLSchema#',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow modules to define namespaces for RDF mappings.",
        "scope": "text.php"
    },
    "hook_search_access": {
        "prefix": "hook_search_access",
        "body": [
            "\/**",
            " * Implements hook_search_access().",
            " *\/",
            "function hook_search_access() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return user_access('access content');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define access to a custom search routine.",
        "scope": "text.php"
    },
    "hook_search_reset": {
        "prefix": "hook_search_reset",
        "body": [
            "\/**",
            " * Implements hook_search_reset().",
            " *\/",
            "function hook_search_reset() {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('search_dataset')",
            " *    ->fields(array('reindex' => REQUEST_TIME))",
            " *    ->condition('type', 'node')",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Take action when the search index is going to be rebuilt.",
        "scope": "text.php"
    },
    "hook_search_status": {
        "prefix": "hook_search_status",
        "body": [
            "\/**",
            " * Implements hook_search_status().",
            " *\/",
            "function hook_search_status() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $total = db_query('SELECT COUNT(*) FROM {node} WHERE status = 1')->fetchField();",
            " *  $remaining = db_query(\"SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE n.status = 1 AND d.sid IS NULL OR d.reindex <> 0\")->fetchField();",
            " *  return array('remaining' => $remaining, 'total' => $total);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Report the status of indexing.",
        "scope": "text.php"
    },
    "hook_search_preprocess": {
        "prefix": "hook_search_preprocess",
        "body": [
            "\/**",
            " * Implements hook_search_preprocess().",
            " *\/",
            "function hook_search_preprocess($text) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Do processing on $text",
            " *  return $text;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Preprocess text for search.",
        "scope": "text.php"
    },
    "hook_shortcut_default_set": {
        "prefix": "hook_shortcut_default_set",
        "body": [
            "\/**",
            " * Implements hook_shortcut_default_set().",
            " *\/",
            "function hook_shortcut_default_set($account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Use a special set of default shortcuts for administrators only.",
            " *  if (in_array(variable_get('user_admin_role', 0), $account->roles)) {",
            " *    return variable_get('mymodule_shortcut_admin_default_set');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return the name of a default shortcut set for the provided user account.",
        "scope": "text.php"
    },
    "hook_simpletest_alter": {
        "prefix": "hook_simpletest_alter",
        "body": [
            "\/**",
            " * Implements hook_simpletest_alter().",
            " *\/",
            "function hook_simpletest_alter(&$groups) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ An alternative session handler module would not want to run the original",
            " *  \/\/ Session HTTPS handling test because it checks the sessions table in the",
            " *  \/\/ database.",
            " *  unset($groups['Session']['testHttpsSession']);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the list of tests.",
        "scope": "text.php"
    },
    "hook_test_group_started": {
        "prefix": "hook_test_group_started",
        "body": [
            "\/**",
            " * Implements hook_test_group_started().",
            " *\/",
            "function hook_test_group_started() {",
            "\/**",
            " * Sample code from the api example.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "A test group has started.",
        "scope": "text.php"
    },
    "hook_test_group_finished": {
        "prefix": "hook_test_group_finished",
        "body": [
            "\/**",
            " * Implements hook_test_group_finished().",
            " *\/",
            "function hook_test_group_finished() {",
            "\/**",
            " * Sample code from the api example.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "A test group has finished.",
        "scope": "text.php"
    },
    "hook_test_finished": {
        "prefix": "hook_test_finished",
        "body": [
            "\/**",
            " * Implements hook_test_finished().",
            " *\/",
            "function hook_test_finished($results) {",
            "\/**",
            " * Sample code from the api example.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "An individual test has finished.",
        "scope": "text.php"
    },
    "is called\n *     for the current operation. For example, an operation may wish to store a\n *     pointer in a file or an offset for a large query. The 'sandbox' array key\n *     is not initially set when this callback is first called, which makes it\n *     useful for determining whether it is the first call of the callback or\n *     not:\n *     @code\n *       if": {
        "prefix": "is called\n *     for the current operation. For example, an operation may wish to store a\n *     pointer in a file or an offset for a large query. The 'sandbox' array key\n *     is not initially set when this callback is first called, which makes it\n *     useful for determining whether it is the first call of the callback or\n *     not:\n *     @code\n *       if",
        "body": [
            "\/**",
            " * Implements is called\n *     for the current operation. For example, an operation may wish to store a\n *     pointer in a file or an offset for a large query. The 'sandbox' array key\n *     is not initially set when this callback is first called, which makes it\n *     useful for determining whether it is the first call of the callback or\n *     not:\n *     @code\n *       if().",
            " *\/",
            "function is called\n *     for the current operation. For example, an operation may wish to store a\n *     pointer in a file or an offset for a large query. The 'sandbox' array key\n *     is not initially set when this callback is first called, which makes it\n *     useful for determining whether it is the first call of the callback or\n *     not:\n *     @code\n *       if(empty($context['sandbox'])) {",
            "\/**",
            " * Sample code from the api example.",
            " * *         \/\/ Perform set-up steps here.",
            " * *       }",
            " * *     @endcode",
            " * *     The values in the sandbox are stored and updated in the database between",
            " * *     http requests until the batch finishes processing. This avoids problems",
            " * *     if the user navigates away from the page before the batch finishes.",
            " * *   - 'message': A text message displayed in the progress page.",
            " * *   - 'results': The array of results gathered so far by the batch processing.",
            " * *     This array is highly useful for passing data between operations. After",
            " * *     all operations have finished, this is passed to callback_batch_finished()",
            " * *     where results may be referenced to display information to the end-user,",
            " * *     such as how many total items were processed.",
            " * *\/",
            " *function callback_batch_operation($MULTIPLE_PARAMS, &$context) {",
            " *  if (!isset($context['sandbox']['progress'])) {",
            " *    $context['sandbox']['progress'] = 0;",
            " *    $context['sandbox']['current_node'] = 0;",
            " *    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT nid) FROM {node}')->fetchField();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform a single batch operation.",
        "scope": "text.php"
    },
    "callback_batch_finished": {
        "prefix": "callback_batch_finished",
        "body": [
            "\/**",
            " * Implements callback_batch_finished().",
            " *\/",
            "function callback_batch_finished($success, $results, $operations) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($success) {",
            " *    \/\/ Here we do something meaningful with the results.",
            " *    $message = t(\"!count items were processed.\", array(",
            " *      '!count' => count($results),",
            " *      ));",
            " *    $message .= theme('item_list', array('items' => $results));",
            " *    drupal_set_message($message);",
            " *  }",
            " *  else {",
            " *    \/\/ An error occurred.",
            " *    \/\/ $operations contains the operations that remained unprocessed.",
            " *    $error_operation = reset($operations);",
            " *    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(",
            " *      '%error_operation' => $error_operation[0],",
            " *      '@arguments' => print_r($error_operation[1], TRUE)",
            " *    ));",
            " *    drupal_set_message($message, 'error');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Complete a batch process.",
        "scope": "text.php"
    },
    "hook_language_types_info": {
        "prefix": "hook_language_types_info",
        "body": [
            "\/**",
            " * Implements hook_language_types_info().",
            " *\/",
            "function hook_language_types_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'custom_language_type' => array(",
            " *      'name' => t('Custom language'),",
            " *      'description' => t('A custom language type.'),",
            " *    ),",
            " *    'fixed_custom_language_type' => array(",
            " *      'fixed' => array('custom_language_provider'),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define language types.",
        "scope": "text.php"
    },
    "hook_language_types_info_alter": {
        "prefix": "hook_language_types_info_alter",
        "body": [
            "\/**",
            " * Implements hook_language_types_info_alter().",
            " *\/",
            "function hook_language_types_info_alter(array &$language_types) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (isset($language_types['custom_language_type'])) {",
            " *    $language_types['custom_language_type_custom']['description'] = t('A far better description.');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on language types.",
        "scope": "text.php"
    },
    "that determines the\n *       language value.\n *     - switcher:": {
        "prefix": "that determines the\n *       language value.\n *     - switcher:",
        "body": [
            "\/**",
            " * Implements that determines the\n *       language value.\n *     - switcher:().",
            " *\/",
            "function that determines the\n *       language value.\n *     - switcher:(optional) Name of the callback function that determines\n *       links for a language switcher block associated with this provider. See\n *       language_switcher_url() for an example.\n *     - url_rewrite: (optional) Name of the callback function that provides URL\n *       rewriting, if needed by this provider.\n *   - file: The file where callback functions are defined (this file will be\n *     included before the callbacks are invoked).\n *   - weight: The default weight of the provider.\n *   - name: The translated human-readable name for the provider.\n *   - description: A translated longer description of the provider.\n *   - config: An internal path pointing to the provider's configuration page.\n *   - cache: The value Drupal's page cache should be set to for the current\n *     provider to be invoked.\n *\n * @see hook_language_negotiation_info_alter()\n * @ingroup language_negotiation\n *\/\nfunction hook_language_negotiation_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'custom_language_provider' => array(",
            " *      'callbacks' => array(",
            " *        'language' => 'custom_language_provider_callback',",
            " *        'switcher' => 'custom_language_switcher_callback',",
            " *        'url_rewrite' => 'custom_language_url_rewrite_callback',",
            " *      ),",
            " *      'file' => drupal_get_path('module', 'custom') . '\/custom.module',",
            " *      'weight' => -4,",
            " *      'types' => array('custom_language_type'),",
            " *      'name' => t('Custom language negotiation provider'),",
            " *      'description' => t('This is a custom language negotiation provider.'),",
            " *      'cache' => 0,",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define language negotiation providers.",
        "scope": "text.php"
    },
    "hook_language_negotiation_info_alter": {
        "prefix": "hook_language_negotiation_info_alter",
        "body": [
            "\/**",
            " * Implements hook_language_negotiation_info_alter().",
            " *\/",
            "function hook_language_negotiation_info_alter(array &$language_providers) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (isset($language_providers['custom_language_provider'])) {",
            " *    $language_providers['custom_language_provider']['config'] = 'admin\/config\/regional\/language\/configure\/custom-language-provider';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on language negoiation providers.",
        "scope": "text.php"
    },
    "hook_language_fallback_candidates_alter": {
        "prefix": "hook_language_fallback_candidates_alter",
        "body": [
            "\/**",
            " * Implements hook_language_fallback_candidates_alter().",
            " *\/",
            "function hook_language_fallback_candidates_alter(array &$fallback_candidates) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $fallback_candidates = array_reverse($fallback_candidates);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations on the language fallback candidates.",
        "scope": "text.php"
    },
    "hook_hook_info": {
        "prefix": "hook_hook_info",
        "body": [
            "\/**",
            " * Implements hook_hook_info().",
            " *\/",
            "function hook_hook_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $hooks['token_info'] = array(",
            " *    'group' => 'tokens',",
            " *  );",
            " *  $hooks['tokens'] = array(",
            " *    'group' => 'tokens',",
            " *  );",
            " *  return $hooks;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Defines one or more hooks that are exposed by a module.",
        "scope": "text.php"
    },
    "hook_hook_info_alter": {
        "prefix": "hook_hook_info_alter",
        "body": [
            "\/**",
            " * Implements hook_hook_info_alter().",
            " *\/",
            "function hook_hook_info_alter(&$hooks) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Our module wants to completely override the core tokens, so make",
            " *  \/\/ sure the core token hooks are not found.",
            " *  $hooks['token_info']['group'] = 'mytokens';",
            " *  $hooks['tokens']['group'] = 'mytokens';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter information from hook_hook_info().",
        "scope": "text.php"
    },
    "hook_entity_info_alter": {
        "prefix": "hook_entity_info_alter",
        "body": [
            "\/**",
            " * Implements hook_entity_info_alter().",
            " *\/",
            "function hook_entity_info_alter(&$entity_info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Set the controller class for nodes to an alternate implementation of the",
            " *  \/\/ DrupalEntityController interface.",
            " *  $entity_info['node']['controller class'] = 'MyCustomNodeController';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the entity info.",
        "scope": "text.php"
    },
    "hook_entity_load": {
        "prefix": "hook_entity_load",
        "body": [
            "\/**",
            " * Implements hook_entity_load().",
            " *\/",
            "function hook_entity_load($entities, $type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($entities as $entity) {",
            " *    $entity->foo = mymodule_add_something($entity, $type);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on entities when loaded.",
        "scope": "text.php"
    },
    "hook_entity_presave": {
        "prefix": "hook_entity_presave",
        "body": [
            "\/**",
            " * Implements hook_entity_presave().",
            " *\/",
            "function hook_entity_presave($entity, $type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $entity->changed = REQUEST_TIME;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on an entity before it is about to be created or updated.",
        "scope": "text.php"
    },
    "hook_entity_insert": {
        "prefix": "hook_entity_insert",
        "body": [
            "\/**",
            " * Implements hook_entity_insert().",
            " *\/",
            "function hook_entity_insert($entity, $type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Insert the new entity into a fictional table of all entities.",
            " *  $info = entity_get_info($type);",
            " *  list($id) = entity_extract_ids($type, $entity);",
            " *  db_insert('example_entity')",
            " *    ->fields(array(",
            " *      'type' => $type,",
            " *      'id' => $id,",
            " *      'created' => REQUEST_TIME,",
            " *      'updated' => REQUEST_TIME,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on entities when inserted.",
        "scope": "text.php"
    },
    "hook_entity_update": {
        "prefix": "hook_entity_update",
        "body": [
            "\/**",
            " * Implements hook_entity_update().",
            " *\/",
            "function hook_entity_update($entity, $type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Update the entity's entry in a fictional table of all entities.",
            " *  $info = entity_get_info($type);",
            " *  list($id) = entity_extract_ids($type, $entity);",
            " *  db_update('example_entity')",
            " *    ->fields(array(",
            " *      'updated' => REQUEST_TIME,",
            " *    ))",
            " *    ->condition('type', $type)",
            " *    ->condition('id', $id)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on entities when updated.",
        "scope": "text.php"
    },
    "hook_entity_delete": {
        "prefix": "hook_entity_delete",
        "body": [
            "\/**",
            " * Implements hook_entity_delete().",
            " *\/",
            "function hook_entity_delete($entity, $type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Delete the entity's entry from a fictional table of all entities.",
            " *  $info = entity_get_info($type);",
            " *  list($id) = entity_extract_ids($type, $entity);",
            " *  db_delete('example_entity')",
            " *    ->condition('type', $type)",
            " *    ->condition('id', $id)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on entities when deleted.",
        "scope": "text.php"
    },
    "will get the query as its single argument and its result\n *   will be the returned as the result of EntityFieldQuery::execute": {
        "prefix": "will get the query as its single argument and its result\n *   will be the returned as the result of EntityFieldQuery::execute",
        "body": [
            "\/**",
            " * Implements will get the query as its single argument and its result\n *   will be the returned as the result of EntityFieldQuery::execute().",
            " *\/",
            "function will get the query as its single argument and its result\n *   will be the returned as the result of EntityFieldQuery::execute(). This can\n *   be used to change the behavior of EntityFieldQuery entirely. For example,\n *   the default implementation can only deal with one field storage engine, but\n *   it is possible to write a module that can query across field storage\n *   engines. Also, the default implementation presumes entities are stored in\n *   SQL, but the execute callback could instead query any other entity storage,\n *   local or remote.\n *\n *   Note the $query->altered attribute which is TRUE in case the query has\n *   already been altered once. This happens with cloned queries.\n *   If there is a pager, then such a cloned query will be executed to count\n *   all elements. This query can be detected by checking for\n *   ($query->pager && $query->count), allowing the driver to return 0 from\n *   the count query and disable the pager.\n *\/\nfunction hook_entity_query_alter($query) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $query->executeCallback = 'my_module_query_callback';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter or execute an EntityFieldQuery.",
        "scope": "text.php"
    },
    "hook_entity_view": {
        "prefix": "hook_entity_view",
        "body": [
            "\/**",
            " * Implements hook_entity_view().",
            " *\/",
            "function hook_entity_view($entity, $type, $view_mode, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $entity->content['my_additional_field'] = array(",
            " *    '#markup' => $additional_field,",
            " *    '#weight' => 10,",
            " *    '#theme' => 'mymodule_my_additional_field',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on entities being assembled before rendering.",
        "scope": "text.php"
    },
    "hook_entity_view_mode_alter": {
        "prefix": "hook_entity_view_mode_alter",
        "body": [
            "\/**",
            " * Implements hook_entity_view_mode_alter().",
            " *\/",
            "function hook_entity_view_mode_alter(&$view_mode, $context) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ For nodes, change the view mode when it is teaser.",
            " *  if ($context['entity_type'] == 'node' && $view_mode == 'teaser') {",
            " *    $view_mode = 'my_custom_view_mode';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Change the view mode of an entity that is being displayed.",
        "scope": "text.php"
    },
    "hook_admin_paths": {
        "prefix": "hook_admin_paths",
        "body": [
            "\/**",
            " * Implements hook_admin_paths().",
            " *\/",
            "function hook_admin_paths() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $paths = array(",
            " *    'mymodule\/*\/add' => TRUE,",
            " *    'mymodule\/*\/edit' => TRUE,",
            " *  );",
            " *  return $paths;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define administrative paths.",
        "scope": "text.php"
    },
    "hook_admin_paths_alter": {
        "prefix": "hook_admin_paths_alter",
        "body": [
            "\/**",
            " * Implements hook_admin_paths_alter().",
            " *\/",
            "function hook_admin_paths_alter(&$paths) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Treat all user pages as administrative.",
            " *  $paths['user'] = TRUE;",
            " *  $paths['user\/*'] = TRUE;",
            " *  \/\/ Treat the forum topic node form as a non-administrative page.",
            " *  $paths['node\/add\/forum'] = FALSE;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Redefine administrative paths defined by other modules.",
        "scope": "text.php"
    },
    "hook_entity_prepare_view": {
        "prefix": "hook_entity_prepare_view",
        "body": [
            "\/**",
            " * Implements hook_entity_prepare_view().",
            " *\/",
            "function hook_entity_prepare_view($entities, $type, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Load a specific node into the user object for later theming.",
            " *  if ($type == 'user') {",
            " *    $nodes = mymodule_get_user_nodes(array_keys($entities));",
            " *    foreach ($entities as $uid => $entity) {",
            " *      $entity->user_node = $nodes[$uid];",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on entities as they are being prepared for view.",
        "scope": "text.php"
    },
    "hook_cron_queue_info": {
        "prefix": "hook_cron_queue_info",
        "body": [
            "\/**",
            " * Implements hook_cron_queue_info().",
            " *\/",
            "function hook_cron_queue_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $queues['aggregator_feeds'] = array(",
            " *    'worker callback' => 'aggregator_refresh',",
            " *    'time' => 60,",
            " *  );",
            " *  return $queues;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Declare queues holding items that need to be run periodically.",
        "scope": "text.php"
    },
    "hook_cron_queue_info_alter": {
        "prefix": "hook_cron_queue_info_alter",
        "body": [
            "\/**",
            " * Implements hook_cron_queue_info_alter().",
            " *\/",
            "function hook_cron_queue_info_alter(&$queues) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ This site has many feeds so let's spend 90 seconds on each cron run",
            " *  \/\/ updating feeds instead of the default 60.",
            " *  $queues['aggregator_feeds']['time'] = 90;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter cron queue information before cron runs.",
        "scope": "text.php"
    },
    "hook_element_info": {
        "prefix": "hook_element_info",
        "body": [
            "\/**",
            " * Implements hook_element_info().",
            " *\/",
            "function hook_element_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $types['filter_format'] = array(",
            " *    '#input' => TRUE,",
            " *  );",
            " *  return $types;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allows modules to declare their own Form API element types and specify their",
        "scope": "text.php"
    },
    "hook_element_info_alter": {
        "prefix": "hook_element_info_alter",
        "body": [
            "\/**",
            " * Implements hook_element_info_alter().",
            " *\/",
            "function hook_element_info_alter(&$type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Decrease the default size of textfields.",
            " *  if (isset($type['textfield']['#size'])) {",
            " *    $type['textfield']['#size'] = 40;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the element type information returned from modules.",
        "scope": "text.php"
    },
    "hook_exit": {
        "prefix": "hook_exit",
        "body": [
            "\/**",
            " * Implements hook_exit().",
            " *\/",
            "function hook_exit($destination = NULL) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('counter')",
            " *    ->expression('hits', 'hits + 1')",
            " *    ->condition('type', 1)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform cleanup tasks.",
        "scope": "text.php"
    },
    "hook_js_alter": {
        "prefix": "hook_js_alter",
        "body": [
            "\/**",
            " * Implements hook_js_alter().",
            " *\/",
            "function hook_js_alter(&$javascript) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Swap out jQuery to use an updated version of the library.",
            " *  $javascript['misc\/jquery.js']['data'] = drupal_get_path('module', 'jquery_update') . '\/jquery.js';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary alterations to the JavaScript before it is presented on",
        "scope": "text.php"
    },
    "hook_library": {
        "prefix": "hook_library",
        "body": [
            "\/**",
            " * Implements hook_library().",
            " *\/",
            "function hook_library() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Library One.",
            " *  $libraries['library-1'] = array(",
            " *    'title' => 'Library One',",
            " *    'website' => 'http:\/\/example.com\/library-1',",
            " *    'version' => '1.2',",
            " *    'js' => array(",
            " *      drupal_get_path('module', 'my_module') . '\/library-1.js' => array(),",
            " *    ),",
            " *    'css' => array(",
            " *      drupal_get_path('module', 'my_module') . '\/library-2.css' => array(",
            " *        'type' => 'file',",
            " *        'media' => 'screen',",
            " *      ),",
            " *    ),",
            " *  );",
            " *  \/\/ Library Two.",
            " *  $libraries['library-2'] = array(",
            " *    'title' => 'Library Two',",
            " *    'website' => 'http:\/\/example.com\/library-2',",
            " *    'version' => '3.1-beta1',",
            " *    'js' => array(",
            " *      \/\/ JavaScript settings may use the 'data' key.",
            " *      array(",
            " *        'type' => 'setting',",
            " *        'data' => array('library2' => TRUE),",
            " *      ),",
            " *    ),",
            " *    'dependencies' => array(",
            " *      \/\/ Require jQuery UI core by System module.",
            " *      array('system', 'ui'),",
            " *      \/\/ Require our other library.",
            " *      array('my_module', 'library-1'),",
            " *      \/\/ Require another library.",
            " *      array('other_module', 'library-3'),",
            " *    ),",
            " *  );",
            " *  return $libraries;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Registers JavaScript\/CSS libraries associated with a module.",
        "scope": "text.php"
    },
    "hook_library_alter": {
        "prefix": "hook_library_alter",
        "body": [
            "\/**",
            " * Implements hook_library_alter().",
            " *\/",
            "function hook_library_alter(&$libraries, $module) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Update Farbtastic to version 2.0.",
            " *  if ($module == 'system' && isset($libraries['farbtastic'])) {",
            " *    \/\/ Verify existing version is older than the one we are updating to.",
            " *    if (version_compare($libraries['farbtastic']['version'], '2.0', '<')) {",
            " *      \/\/ Update the existing Farbtastic to version 2.0.",
            " *      $libraries['farbtastic']['version'] = '2.0';",
            " *      $libraries['farbtastic']['js'] = array(",
            " *        drupal_get_path('module', 'farbtastic_update') . '\/farbtastic-2.0.js' => array(),",
            " *      );",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the JavaScript\/CSS library registry.",
        "scope": "text.php"
    },
    "hook_css_alter": {
        "prefix": "hook_css_alter",
        "body": [
            "\/**",
            " * Implements hook_css_alter().",
            " *\/",
            "function hook_css_alter(&$css) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Remove defaults.css file.",
            " *  unset($css[drupal_get_path('module', 'system') . '\/defaults.css']);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter CSS files before they are output on the page.",
        "scope": "text.php"
    },
    "hook_ajax_render_alter": {
        "prefix": "hook_ajax_render_alter",
        "body": [
            "\/**",
            " * Implements hook_ajax_render_alter().",
            " *\/",
            "function hook_ajax_render_alter(&$commands) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Inject any new status messages into the content area.",
            " *  $commands[] = ajax_command_prepend('#block-system-main .content', theme('status_messages'));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the commands that are sent to the user through the Ajax framework.",
        "scope": "text.php"
    },
    "hook_page_build": {
        "prefix": "hook_page_build",
        "body": [
            "\/**",
            " * Implements hook_page_build().",
            " *\/",
            "function hook_page_build(&$page) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (menu_get_object('node', 1)) {",
            " *    \/\/ We are on a node detail page. Append a standard disclaimer to the",
            " *    \/\/ content region.",
            " *    $page['content']['disclaimer'] = array(",
            " *      '#markup' => t('Acme, Inc. is not responsible for the contents of this sample code.'),",
            " *      '#weight' => 25,",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Add elements to a page before it is rendered.",
        "scope": "text.php"
    },
    "hook_menu_get_item_alter": {
        "prefix": "hook_menu_get_item_alter",
        "body": [
            "\/**",
            " * Implements hook_menu_get_item_alter().",
            " *\/",
            "function hook_menu_get_item_alter(&$router_item, $path, $original_map) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ When retrieving the router item for the current path...",
            " *  if ($path == $_GET['q']) {",
            " *    \/\/ ...call a function that prepares something for this request.",
            " *    mymodule_prepare_something();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter a menu router item right after it has been retrieved from the database or cache.",
        "scope": "text.php"
    },
    "mymodule_menu": {
        "prefix": "mymodule_menu",
        "body": [
            "\/**",
            " * Implements mymodule_menu().",
            " *\/",
            "function mymodule_menu() {",
            "\/**",
            " * Sample code from the api example.",
            " * *     $items['abc\/def'] = array(",
            " * *       'page callback' => 'mymodule_abc_view',",
            " * *     );",
            " * *     return $items;",
            " * *   }",
            " * *",
            " * *   function mymodule_abc_view($ghi = 0, $jkl = '') {",
            " * *     \/\/ ...",
            " * *   }",
            " * * @endcode",
            " * * When path 'abc\/def' is requested, no further path components are in the",
            " * * request, and no additional arguments are passed to the callback function (so",
            " * * $ghi and $jkl would take the default values as defined in the function",
            " * * signature). When 'abc\/def\/123\/foo' is requested, $ghi will be '123' and",
            " * * $jkl will be 'foo'. Note that this automatic passing of optional path",
            " * * arguments applies only to page and theme callback functions.",
            " * *",
            " * * @subsection sub_callback_arguments Callback Arguments",
            " * * In addition to optional path arguments, the page callback and other callback",
            " * * functions may specify argument lists as arrays. These argument lists may",
            " * * contain both fixed\/hard-coded argument values and integers that correspond",
            " * * to path components. When integers are used and the callback function is",
            " * * called, the corresponding path components will be substituted for the",
            " * * integers. That is, the integer 0 in an argument list will be replaced with",
            " * * the first path component, integer 1 with the second, and so on (path",
            " * * components are numbered starting from zero). To pass an integer without it",
            " * * being replaced with its respective path component, use the string value of",
            " * * the integer (e.g., '1') as the argument value. This substitution feature",
            " * * allows you to re-use a callback function for several different paths. For",
            " * * example:",
            " * * @code",
            " * *   function mymodule_menu() {",
            " * *     $items['abc\/def'] = array(",
            " * *       'page callback' => 'mymodule_abc_view',",
            " * *       'page arguments' => array(1, 'foo'),",
            " * *     );",
            " * *     return $items;",
            " * *   }",
            " * * @endcode",
            " * * When path 'abc\/def' is requested, the page callback function will get 'def'",
            " * * as the first argument and (always) 'foo' as the second argument.",
            " * *",
            " * * If a page callback function uses an argument list array, and its path is",
            " * * requested with optional path arguments, then the list array's arguments are",
            " * * passed to the callback function first, followed by the optional path",
            " * * arguments. Using the above example, when path 'abc\/def\/bar\/baz' is requested,",
            " * * mymodule_abc_view() will be called with 'def', 'foo', 'bar' and 'baz' as",
            " * * arguments, in that order.",
            " * *",
            " * * Special care should be taken for the page callback drupal_get_form(), because",
            " * * your specific form callback function will always receive $form and",
            " * * &$form_state as the first function arguments:",
            " * * @code",
            " * *   function mymodule_abc_form($form, &$form_state) {",
            " * *     \/\/ ...",
            " * *     return $form;",
            " * *   }",
            " * * @endcode",
            " * * See @link form_api Form API documentation @endlink for details.",
            " * *",
            " * * @section sec_path_wildcards Wildcards in Paths",
            " * * @subsection sub_simple_wildcards Simple Wildcards",
            " * * Wildcards within paths also work with integer substitution. For example,",
            " * * your module could register path 'my-module\/%\/edit':",
            " * * @code",
            " * *   $items['my-module\/%\/edit'] = array(",
            " * *     'page callback' => 'mymodule_abc_edit',",
            " * *     'page arguments' => array(1),",
            " * *   );",
            " * * @endcode",
            " * * When path 'my-module\/foo\/edit' is requested, integer 1 will be replaced",
            " * * with 'foo' and passed to the callback function. Note that wildcards may not",
            " * * be used as the first component.",
            " * *",
            " * * @subsection sub_autoload_wildcards Auto-Loader Wildcards",
            " * * Registered paths may also contain special \"auto-loader\" wildcard components",
            " * * in the form of '%mymodule_abc', where the '%' part means that this path",
            " * * component is a wildcard, and the 'mymodule_abc' part defines the prefix for a",
            " * * load function, which here would be named mymodule_abc_load(). When a matching",
            " * * path is requested, your load function will receive as its first argument the",
            " * * path component in the position of the wildcard; load functions may also be",
            " * * passed additional arguments (see \"load arguments\" in the return value",
            " * * section below). For example, your module could register path",
            " * * 'my-module\/%mymodule_abc\/edit':",
            " * * @code",
            " * *   $items['my-module\/%mymodule_abc\/edit'] = array(",
            " * *     'page callback' => 'mymodule_abc_edit',",
            " * *     'page arguments' => array(1),",
            " * *   );",
            " * * @endcode",
            " * * When path 'my-module\/123\/edit' is requested, your load function",
            " * * mymodule_abc_load() will be invoked with the argument '123', and should",
            " * * load and return an \"abc\" object with internal id 123:",
            " * * @code",
            " * *   function mymodule_abc_load($abc_id) {",
            " * *     return db_query(\"SELECT * FROM {mymodule_abc} WHERE abc_id = :abc_id\", array(':abc_id' => $abc_id))->fetchObject();",
            " * *   }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define menu items and page callbacks.",
        "scope": "text.php"
    },
    "hook_menu_alter": {
        "prefix": "hook_menu_alter",
        "body": [
            "\/**",
            " * Implements hook_menu_alter().",
            " *\/",
            "function hook_menu_alter(&$items) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Example - disable the page at node\/add",
            " *  $items['node\/add']['access callback'] = FALSE;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the data being saved to the {menu_router} table after hook_menu is invoked.",
        "scope": "text.php"
    },
    "hook_menu_link_alter": {
        "prefix": "hook_menu_link_alter",
        "body": [
            "\/**",
            " * Implements hook_menu_link_alter().",
            " *\/",
            "function hook_menu_link_alter(&$item) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Make all new admin links hidden (a.k.a disabled).",
            " *  if (strpos($item['link_path'], 'admin') === 0 && empty($item['mlid'])) {",
            " *    $item['hidden'] = 1;",
            " *  }",
            " *  \/\/ Flag a link to be altered by hook_translated_menu_link_alter().",
            " *  if ($item['link_path'] == 'devel\/cache\/clear') {",
            " *    $item['options']['alter'] = TRUE;",
            " *  }",
            " *  \/\/ Flag a link to be altered by hook_translated_menu_link_alter(), but only",
            " *  \/\/ if it is derived from a menu router item; i.e., do not alter a custom",
            " *  \/\/ menu link pointing to the same path that has been created by a user.",
            " *  if ($item['link_path'] == 'user' && $item['module'] == 'system') {",
            " *    $item['options']['alter'] = TRUE;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the data being saved to the {menu_links} table by menu_link_save().",
        "scope": "text.php"
    },
    "hook_translated_menu_link_alter": {
        "prefix": "hook_translated_menu_link_alter",
        "body": [
            "\/**",
            " * Implements hook_translated_menu_link_alter().",
            " *\/",
            "function hook_translated_menu_link_alter(&$item, $map) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($item['href'] == 'devel\/cache\/clear') {",
            " *    $item['localized_options']['query'] = drupal_get_destination();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter a menu link after it has been translated and before it is rendered.",
        "scope": "text.php"
    },
    "hook_menu_link_insert": {
        "prefix": "hook_menu_link_insert",
        "body": [
            "\/**",
            " * Implements hook_menu_link_insert().",
            " *\/",
            "function hook_menu_link_insert($link) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ In our sample case, we track menu items as editing sections",
            " *  \/\/ of the site. These are stored in our table as 'disabled' items.",
            " *  $record['mlid'] = $link['mlid'];",
            " *  $record['menu_name'] = $link['menu_name'];",
            " *  $record['status'] = 0;",
            " *  drupal_write_record('menu_example', $record);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Inform modules that a menu link has been created.",
        "scope": "text.php"
    },
    "hook_menu_link_update": {
        "prefix": "hook_menu_link_update",
        "body": [
            "\/**",
            " * Implements hook_menu_link_update().",
            " *\/",
            "function hook_menu_link_update($link) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ If the parent menu has changed, update our record.",
            " *  $menu_name = db_query(\"SELECT menu_name FROM {menu_example} WHERE mlid = :mlid\", array(':mlid' => $link['mlid']))->fetchField();",
            " *  if ($menu_name != $link['menu_name']) {",
            " *    db_update('menu_example')",
            " *      ->fields(array('menu_name' => $link['menu_name']))",
            " *      ->condition('mlid', $link['mlid'])",
            " *      ->execute();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Inform modules that a menu link has been updated.",
        "scope": "text.php"
    },
    "hook_menu_link_delete": {
        "prefix": "hook_menu_link_delete",
        "body": [
            "\/**",
            " * Implements hook_menu_link_delete().",
            " *\/",
            "function hook_menu_link_delete($link) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Delete the record from our table.",
            " *  db_delete('menu_example')",
            " *    ->condition('mlid', $link['mlid'])",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Inform modules that a menu link has been deleted.",
        "scope": "text.php"
    },
    "hook_menu_breadcrumb_alter": {
        "prefix": "hook_menu_breadcrumb_alter",
        "body": [
            "\/**",
            " * Implements hook_menu_breadcrumb_alter().",
            " *\/",
            "function hook_menu_breadcrumb_alter(&$active_trail, $item) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Always display a link to the current page by duplicating the last link in",
            " *  \/\/ the active trail. This means that menu_get_active_breadcrumb() will remove",
            " *  \/\/ the last link (for the current page), but since it is added once more here,",
            " *  \/\/ it will appear.",
            " *  if (!drupal_is_front_page()) {",
            " *    $end = end($active_trail);",
            " *    if ($item['href'] == $end['href']) {",
            " *      $active_trail[] = $end;",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter links in the active trail before it is rendered as the breadcrumb.",
        "scope": "text.php"
    },
    "hook_menu_contextual_links_alter": {
        "prefix": "hook_menu_contextual_links_alter",
        "body": [
            "\/**",
            " * Implements hook_menu_contextual_links_alter().",
            " *\/",
            "function hook_menu_contextual_links_alter(&$links, $router_item, $root_path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a link to all contextual links for nodes.",
            " *  if ($root_path == 'node\/%') {",
            " *    $links['foo'] = array(",
            " *      'title' => t('Do fu'),",
            " *      'href' => 'foo\/do',",
            " *      'localized_options' => array(",
            " *        'query' => array(",
            " *          'foo' => 'bar',",
            " *        ),",
            " *      ),",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter contextual links before they are rendered.",
        "scope": "text.php"
    },
    "hook_page_alter": {
        "prefix": "hook_page_alter",
        "body": [
            "\/**",
            " * Implements hook_page_alter().",
            " *\/",
            "function hook_page_alter(&$page) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add help text to the user login block.",
            " *  $page['sidebar_first']['user_login']['help'] = array(",
            " *    '#weight' => -10,",
            " *    '#markup' => t('To post comments or add new content, you first have to log in.'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations before a page is rendered.",
        "scope": "text.php"
    },
    "that generated the form.\n *\n * @see hook_form_BASE_FORM_ID_alter": {
        "prefix": "that generated the form.\n *\n * @see hook_form_BASE_FORM_ID_alter",
        "body": [
            "\/**",
            " * Implements that generated the form.\n *\n * @see hook_form_BASE_FORM_ID_alter().",
            " *\/",
            "function that generated the form.\n *\n * @see hook_form_BASE_FORM_ID_alter()\n * @see hook_form_FORM_ID_alter()\n * @see forms_api_reference.html\n *\/\nfunction hook_form_alter(&$form, &$form_state, $form_id) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (isset($form['type']) && $form['type']['#value'] . '_node_settings' == $form_id) {",
            " *    $form['workflow']['upload_' . $form['type']['#value']] = array(",
            " *      '#type' => 'radios',",
            " *      '#title' => t('Attachments'),",
            " *      '#default_value' => variable_get('upload_' . $form['type']['#value'], 1),",
            " *      '#options' => array(t('Disabled'), t('Enabled')),",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations before a form is rendered.",
        "scope": "text.php"
    },
    "hook_boot": {
        "prefix": "hook_boot",
        "body": [
            "\/**",
            " * Implements hook_boot().",
            " *\/",
            "function hook_boot() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ We need user_access() in the shutdown function. Make sure it gets loaded.",
            " *  drupal_load('module', 'user');",
            " *  drupal_register_shutdown_function('devel_shutdown');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform setup tasks for all page requests.",
        "scope": "text.php"
    },
    "hook_init": {
        "prefix": "hook_init",
        "body": [
            "\/**",
            " * Implements hook_init().",
            " *\/",
            "function hook_init() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Since this file should only be loaded on the front page, it cannot be",
            " *  \/\/ declared in the info file.",
            " *  if (drupal_is_front_page()) {",
            " *    drupal_add_css(drupal_get_path('module', 'foo') . '\/foo.css');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform setup tasks for non-cached page requests.",
        "scope": "text.php"
    },
    "hook_image_toolkits": {
        "prefix": "hook_image_toolkits",
        "body": [
            "\/**",
            " * Implements hook_image_toolkits().",
            " *\/",
            "function hook_image_toolkits() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'working' => array(",
            " *      'title' => t('A toolkit that works.'),",
            " *      'available' => TRUE,",
            " *    ),",
            " *    'broken' => array(",
            " *      'title' => t('A toolkit that is \"broken\" and will not be listed.'),",
            " *      'available' => FALSE,",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define image toolkits provided by this module.",
        "scope": "text.php"
    },
    "* will not invoke this hook. All core modules use drupal_mail": {
        "prefix": "* will not invoke this hook. All core modules use drupal_mail",
        "body": [
            "\/**",
            " * Implements * will not invoke this hook. All core modules use drupal_mail().",
            " *\/",
            "function * will not invoke this hook. All core modules use drupal_mail() for\n * messaging, it is best practice but not mandatory in contributed modules.\n *\n * @param $message\n *   An array containing the message data. Keys in this array include:\n *  - 'id':\n *     The drupal_mail() id of the message. Look at module source code or\n *     drupal_mail() for possible id values.\n *  - 'to':\n *     The address or addresses the message will be sent to. The formatting of\n *     this string will be validated with the\n *     @link http:\/\/php.net\/manual\/filter.filters.validate.php PHP e-mail validation filter. @endlink\n *  - 'from':\n *     The address the message will be marked as being from, which is\n *     either a custom address or the site-wide default email address.\n *  - 'subject':\n *     Subject of the email to be sent. This must not contain any newline\n *     characters, or the email may not be sent properly.\n *  - 'body':\n *     An array of strings containing the message text. The message body is\n *     created by concatenating the individual array strings into a single text\n *     string using \"\\n\\n\" as a separator.\n *  - 'headers':\n *     Associative array containing mail headers, such as From, Sender,\n *     MIME-Version, Content-Type, etc.\n *  - 'params':\n *     An array of optional parameters supplied by the caller of drupal_mail()\n *     that is used to build the message before hook_mail_alter() is invoked.\n *  - 'language':\n *     The language object used to build the message before hook_mail_alter()\n *     is invoked.\n *  - 'send':\n *     Set to FALSE to abort sending this email message.\n *\n * @see drupal_mail()\n *\/\nfunction hook_mail_alter(&$message) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($message['id'] == 'modulename_messagekey') {",
            " *    if (!example_notifications_optin($message['to'], $message['id'])) {",
            " *      \/\/ If the recipient has opted to not receive such messages, cancel",
            " *      \/\/ sending.",
            " *      $message['send'] = FALSE;",
            " *      return;",
            " *    }",
            " *    $message['body'][] = \"--\\nMail sent out from \" . variable_get('site_name', t('Drupal'));",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter an email message created with the drupal_mail() function.",
        "scope": "text.php"
    },
    "hook_module_implements_alter": {
        "prefix": "hook_module_implements_alter",
        "body": [
            "\/**",
            " * Implements hook_module_implements_alter().",
            " *\/",
            "function hook_module_implements_alter(&$implementations, $hook) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($hook == 'rdf_mapping') {",
            " *    \/\/ Move my_module_rdf_mapping() to the end of the list. module_implements()",
            " *    \/\/ iterates through $implementations with a foreach loop which PHP iterates",
            " *    \/\/ in the order that the items were added, so to move an item to the end of",
            " *    \/\/ the array, we remove it and then add it.",
            " *    $group = $implementations['my_module'];",
            " *    unset($implementations['my_module']);",
            " *    $implementations['my_module'] = $group;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the registry of modules implementing a hook.",
        "scope": "text.php"
    },
    "hook_system_theme_info": {
        "prefix": "hook_system_theme_info",
        "body": [
            "\/**",
            " * Implements hook_system_theme_info().",
            " *\/",
            "function hook_system_theme_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $themes['mymodule_test_theme'] = drupal_get_path('module', 'mymodule') . '\/mymodule_test_theme\/mymodule_test_theme.info';",
            " *  return $themes;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return additional themes provided by modules.",
        "scope": "text.php"
    },
    "hook_system_info_alter": {
        "prefix": "hook_system_info_alter",
        "body": [
            "\/**",
            " * Implements hook_system_info_alter().",
            " *\/",
            "function hook_system_info_alter(&$info, $file, $type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Only fill this in if the .info file does not define a 'datestamp'.",
            " *  if (empty($info['datestamp'])) {",
            " *    $info['datestamp'] = filemtime($file->filename);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the information parsed from module and theme .info files",
        "scope": "text.php"
    },
    "so it can be translated.\n *   - description:": {
        "prefix": "so it can be translated.\n *   - description:",
        "body": [
            "\/**",
            " * Implements so it can be translated.\n *   - description:().",
            " *\/",
            "function so it can be translated.\n *   - description:(optional) A description of what the permission does. This\n *     should be wrapped in the t() function so it can be translated.\n *   - restrict access: (optional) A boolean which can be set to TRUE to\n *     indicate that site administrators should restrict access to this\n *     permission to trusted users. This should be used for permissions that\n *     have inherent security risks across a variety of potential use cases\n *     (for example, the \"administer filters\" and \"bypass node access\"\n *     permissions provided by Drupal core). When set to TRUE, a standard\n *     warning message defined in user_admin_permissions() and output via\n *     theme_user_permission_description() will be associated with the\n *     permission and displayed with it on the permission administration page.\n *     Defaults to FALSE.\n *   - warning: (optional) A translated warning message to display for this\n *     permission on the permission administration page. This warning overrides\n *     the automatic warning generated by 'restrict access' being set to TRUE.\n *     This should rarely be used, since it is important for all permissions to\n *     have a clear, consistent security warning that is the same across the\n *     site. Use the 'description' key instead to provide any information that\n *     is specific to the permission you are defining.\n *\n * @see theme_user_permission_description()\n *\/\nfunction hook_permission() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'administer my module' =>  array(",
            " *      'title' => t('Administer my module'),",
            " *      'description' => t('Perform administration tasks for my module.'),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define user permissions.",
        "scope": "text.php"
    },
    "is assigned to the render array's\n * #theme property), or they return the HTML that should be returned by an\n * invocation of theme": {
        "prefix": "is assigned to the render array's\n * #theme property), or they return the HTML that should be returned by an\n * invocation of theme",
        "body": [
            "\/**",
            " * Implements is assigned to the render array's\n * #theme property), or they return the HTML that should be returned by an\n * invocation of theme().",
            " *\/",
            "function is assigned to the render array's\n * #theme property), or they return the HTML that should be returned by an\n * invocation of theme(). See\n * @link http:\/\/drupal.org\/node\/933976 Using the theme layer Drupal 7.x @endlink\n * for more information on how to implement theme hooks.\n *\n * The following parameters are all optional.\n *\n * @param array $existing\n *   An array of existing implementations that may be used for override\n *   purposes. This is primarily useful for themes that may wish to examine\n *   existing implementations to extract data (such as arguments) so that\n *   it may properly register its own, higher priority implementations.\n * @param $type\n *   Whether a theme, module, etc. is being processed. This is primarily useful\n *   so that themes tell if they are the actual theme being called or a parent\n *   theme. May be one of:\n *   - 'module': A module is being checked for theme implementations.\n *   - 'base_theme_engine': A theme engine is being checked for a theme that is\n *     a parent of the actual theme being used.\n *   - 'theme_engine': A theme engine is being checked for the actual theme\n *     being used.\n *   - 'base_theme': A base theme is being checked for theme implementations.\n *   - 'theme': The actual theme in use is being checked.\n * @param $theme\n *   The actual name of theme, module, etc. that is being being processed.\n * @param $path\n *   The directory path of the theme or module, so that it doesn't need to be\n *   looked up.\n *\n * @return array\n *   An associative array of theme hook information. The keys on the outer\n *   array are the internal names of the hooks, and the values are arrays\n *   containing information about the hook. Each information array must contain\n *   either a 'variables' element or a 'render element' element, but not both.\n *   Use 'render element' if you are theming a single element or element tree\n *   composed of elements, such as a form array, a page array, or a single\n *   checkbox element. Use 'variables' if your theme implementation is\n *   intended to be called directly through theme() and has multiple arguments\n *   for the data and style; in this case, the variables not supplied by the\n *   calling function will be given default values and passed to the template\n *   or theme function. The returned theme information array can contain the\n *   following key\/value pairs:\n *   - variables: (see above) Each array key is the name of the variable, and\n *     the value given is used as the default value if the function calling\n *     theme() does not supply it. Template implementations receive each array\n *     key as a variable in the template file (so they must be legal PHP\n *     variable names). Function implementations are passed the variables in a\n *     single $variables function argument.\n *   - render element: (see above) The name of the renderable element or element\n *     tree to pass to the theme function. This name is used as the name of the\n *     variable that holds the renderable element or tree in preprocess and\n *     process functions.\n *   - file: The file the implementation resides in. This file will be included\n *     prior to the theme being rendered, to make sure that the function or\n *     preprocess function (as needed) is actually loaded; this makes it\n *     possible to split theme functions out into separate files quite easily.\n *   - path: Override the path of the file to be used. Ordinarily the module or\n *     theme path will be used, but if the file will not be in the default\n *     path, include it here. This path should be relative to the Drupal root\n *     directory.\n *   - template: If specified, this theme implementation is a template, and\n *     this is the template file without an extension. Do not put .tpl.php on\n *     this file; that extension will be added automatically by the default\n *     rendering engine (which is PHPTemplate). If 'path', above, is specified,\n *     the template should also be in this path.\n *   - function: If specified, this will be the function name to invoke for\n *     this implementation. If neither 'template' nor 'function' is specified,\n *     a default function name will be assumed. For example, if a module\n *     registers the 'node' theme hook, 'theme_node' will be assigned to its\n *     function. If the chameleon theme registers the node hook, it will be\n *     assigned 'chameleon_node' as its function.\n *   - base hook: A string declaring the base theme hook if this theme\n *     implementation is actually implementing a suggestion for another theme\n *     hook.\n *   - pattern: A regular expression pattern to be used to allow this theme\n *     implementation to have a dynamic name. The convention is to use __ to\n *     differentiate the dynamic portion of the theme. For example, to allow\n *     forums to be themed individually, the pattern might be: 'forum__'. Then,\n *     when the forum is themed, call:\n *     @code\n *     theme(array('forum__' . $tid, 'forum'), $forum)\n *     @endcode\n *   - preprocess functions: A list of functions used to preprocess this data.\n *     Ordinarily this won't be used; it's automatically filled in. By default,\n *     for a module this will be filled in as template_preprocess_HOOK. For\n *     a theme this will be filled in as phptemplate_preprocess and\n *     phptemplate_preprocess_HOOK as well as themename_preprocess and\n *     themename_preprocess_HOOK.\n *   - override preprocess functions: Set to TRUE when a theme does NOT want\n *     the standard preprocess functions to run. This can be used to give a\n *     theme FULL control over how variables are set. For example, if a theme\n *     wants total control over how certain variables in the page.tpl.php are\n *     set, this can be set to true. Please keep in mind that when this is used\n *     by a theme, that theme becomes responsible for making sure necessary\n *     variables are set.\n *   - type: (automatically derived) Where the theme hook is defined:\n *     'module', 'theme_engine', or 'theme'.\n *   - theme path: (automatically derived) The directory path of the theme or\n *     module, so that it doesn't need to be looked up.\n *\n * @see hook_theme_registry_alter()\n *\/\nfunction hook_theme($existing, $type, $theme, $path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'forum_display' => array(",
            " *      'variables' => array('forums' => NULL, 'topics' => NULL, 'parents' => NULL, 'tid' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL),",
            " *    ),",
            " *    'forum_list' => array(",
            " *      'variables' => array('forums' => NULL, 'parents' => NULL, 'tid' => NULL),",
            " *    ),",
            " *    'forum_topic_list' => array(",
            " *      'variables' => array('tid' => NULL, 'topics' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL),",
            " *    ),",
            " *    'forum_icon' => array(",
            " *      'variables' => array('new_posts' => NULL, 'num_posts' => 0, 'comment_mode' => 0, 'sticky' => 0),",
            " *    ),",
            " *    'status_report' => array(",
            " *      'render element' => 'requirements',",
            " *      'file' => 'system.admin.inc',",
            " *    ),",
            " *    'system_date_time_settings' => array(",
            " *      'render element' => 'form',",
            " *      'file' => 'system.admin.inc',",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Register a module (or theme's) theme implementations.",
        "scope": "text.php"
    },
    "hook_theme_registry_alter": {
        "prefix": "hook_theme_registry_alter",
        "body": [
            "\/**",
            " * Implements hook_theme_registry_alter().",
            " *\/",
            "function hook_theme_registry_alter(&$theme_registry) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Kill the next\/previous forum topic navigation links.",
            " *  foreach ($theme_registry['forum_topic_navigation']['preprocess functions'] as $key => $value) {",
            " *    if ($value == 'template_preprocess_forum_topic_navigation') {",
            " *      unset($theme_registry['forum_topic_navigation']['preprocess functions'][$key]);",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the theme registry information returned from hook_theme().",
        "scope": "text.php"
    },
    "in hook_menu": {
        "prefix": "in hook_menu",
        "body": [
            "\/**",
            " * Implements in hook_menu().",
            " *\/",
            "function in hook_menu(); the themes on those\n * pages can only be overridden using hook_menu_alter().\n *\n * Note that returning different themes for the same path may not work with page\n * caching. This is most likely to be a problem if an anonymous user on a given\n * path could have different themes returned under different conditions.\n *\n * Since only one theme can be used at a time, the last (i.e., highest\n * weighted) module which returns a valid theme name from this hook will\n * prevail.\n *\n * @return\n *   The machine-readable name of the theme that should be used for the current\n *   page request. The value returned from this function will only have an\n *   effect if it corresponds to a currently-active theme on the site. Do not\n *   return a value if you do not wish to set a custom theme.\n *\/\nfunction hook_custom_theme() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Allow the user to request a particular theme via a query parameter.",
            " *  if (isset($_GET['theme'])) {",
            " *    return $_GET['theme'];",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return the machine-readable name of the theme to use for the current page.",
        "scope": "text.php"
    },
    "or an array with four\n *   entries:\n *   - The XML-RPC method name": {
        "prefix": "or an array with four\n *   entries:\n *   - The XML-RPC method name",
        "body": [
            "\/**",
            " * Implements or an array with four\n *   entries:\n *   - The XML-RPC method name().",
            " *\/",
            "function or an array with four\n *   entries:\n *   - The XML-RPC method name(for example, module.function).\n *   - The Drupal callback function (for example, module_function).\n *   - The method signature is an array of XML-RPC types. The first element\n *     of this array is the type of return value and then you should write a\n *     list of the types of the parameters. XML-RPC types are the following\n *     (See the types at http:\/\/www.xmlrpc.com\/spec):\n *       - \"boolean\": 0 (false) or 1 (true).\n *       - \"double\": a floating point number (for example, -12.214).\n *       - \"int\": a integer number (for example,  -12).\n *       - \"array\": an array without keys (for example, array(1, 2, 3)).\n *       - \"struct\": an associative array or an object (for example,\n *          array('one' => 1, 'two' => 2)).\n *       - \"date\": when you return a date, then you may either return a\n *          timestamp (time(), mktime() etc.) or an ISO8601 timestamp. When\n *          date is specified as an input parameter, then you get an object,\n *          which is described in the function xmlrpc_date\n *       - \"base64\": a string containing binary data, automatically\n *          encoded\/decoded automatically.\n *       - \"string\": anything else, typically a string.\n *   - A descriptive help string, enclosed in a t() function for translation\n *     purposes.\n *   Both forms are shown in the example.\n *\/\nfunction hook_xmlrpc() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'drupal.login' => 'drupal_login',",
            " *    array(",
            " *      'drupal.site.ping',",
            " *      'drupal_directory_ping',",
            " *      array('boolean', 'string', 'string', 'string', 'string', 'string'),",
            " *      t('Handling ping request'))",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Register XML-RPC callbacks.",
        "scope": "text.php"
    },
    "hook_mail": {
        "prefix": "hook_mail",
        "body": [
            "\/**",
            " * Implements hook_mail().",
            " *\/",
            "function hook_mail($key, &$message, $params) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $account = $params['account'];",
            " *  $context = $params['context'];",
            " *  $variables = array(",
            " *    '%site_name' => variable_get('site_name', 'Drupal'),",
            " *    '%username' => format_username($account),",
            " *  );",
            " *  if ($context['hook'] == 'taxonomy') {",
            " *    $entity = $params['entity'];",
            " *    $vocabulary = taxonomy_vocabulary_load($entity->vid);",
            " *    $variables += array(",
            " *      '%term_name' => $entity->name,",
            " *      '%term_description' => $entity->description,",
            " *      '%term_id' => $entity->tid,",
            " *      '%vocabulary_name' => $vocabulary->name,",
            " *      '%vocabulary_description' => $vocabulary->description,",
            " *      '%vocabulary_id' => $vocabulary->vid,",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Prepare a message based on parameters; called from drupal_mail().",
        "scope": "text.php"
    },
    "hook_flush_caches": {
        "prefix": "hook_flush_caches",
        "body": [
            "\/**",
            " * Implements hook_flush_caches().",
            " *\/",
            "function hook_flush_caches() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array('cache_example');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Add a list of cache tables to be cleared.",
        "scope": "text.php"
    },
    "differs from hook_install": {
        "prefix": "differs from hook_install",
        "body": [
            "\/**",
            " * Implements differs from hook_install().",
            " *\/",
            "function differs from hook_install() in that it gives all other modules\n * a chance to perform actions when a module is installed, whereas\n * hook_install() is only called on the module actually being installed. See\n * module_enable() for a detailed description of the order in which install and\n * enable hooks are invoked.\n *\n * This hook should be implemented in a .module file, not in an .install file.\n *\n * @param $modules\n *   An array of the modules that were installed.\n *\n * @see module_enable()\n * @see hook_modules_enabled()\n * @see hook_install()\n *\/\nfunction hook_modules_installed($modules) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (in_array('lousy_module', $modules)) {",
            " *    variable_set('lousy_module_conflicting_variable', FALSE);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary actions after modules are installed.",
        "scope": "text.php"
    },
    "differs from hook_enable": {
        "prefix": "differs from hook_enable",
        "body": [
            "\/**",
            " * Implements differs from hook_enable().",
            " *\/",
            "function differs from hook_enable() in that it gives all other modules a\n * chance to perform actions when modules are enabled, whereas hook_enable() is\n * only called on the module actually being enabled. See module_enable() for a\n * detailed description of the order in which install and enable hooks are\n * invoked.\n *\n * @param $modules\n *   An array of the modules that were enabled.\n *\n * @see hook_enable()\n * @see hook_modules_installed()\n * @see module_enable()\n *\/\nfunction hook_modules_enabled($modules) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (in_array('lousy_module', $modules)) {",
            " *    drupal_set_message(t('mymodule is not compatible with lousy_module'), 'error');",
            " *    mymodule_disable_functionality();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary actions after modules are enabled.",
        "scope": "text.php"
    },
    "differs from hook_disable": {
        "prefix": "differs from hook_disable",
        "body": [
            "\/**",
            " * Implements differs from hook_disable().",
            " *\/",
            "function differs from hook_disable() in that it gives all other modules\n * a chance to perform actions when modules are disabled, whereas hook_disable()\n * is only called on the module actually being disabled.\n *\n * @param $modules\n *   An array of the modules that were disabled.\n *\n * @see hook_disable()\n * @see hook_modules_uninstalled()\n *\/\nfunction hook_modules_disabled($modules) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (in_array('lousy_module', $modules)) {",
            " *    mymodule_enable_functionality();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary actions after modules are disabled.",
        "scope": "text.php"
    },
    "differs from hook_uninstall": {
        "prefix": "differs from hook_uninstall",
        "body": [
            "\/**",
            " * Implements differs from hook_uninstall().",
            " *\/",
            "function differs from hook_uninstall() in that it gives all other\n * modules a chance to perform actions when a module is uninstalled, whereas\n * hook_uninstall() is only called on the module actually being uninstalled.\n *\n * It is recommended that you implement this hook if your module stores\n * data that may have been set by other modules.\n *\n * @param $modules\n *   An array of the modules that were uninstalled.\n *\n * @see hook_uninstall()\n * @see hook_modules_disabled()\n *\/\nfunction hook_modules_uninstalled($modules) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($modules as $module) {",
            " *    db_delete('mymodule_table')",
            " *      ->condition('module', $module)",
            " *      ->execute();",
            " *  }",
            " *  mymodule_cache_rebuild();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary actions after modules are uninstalled.",
        "scope": "text.php"
    },
    "hook_stream_wrappers": {
        "prefix": "hook_stream_wrappers",
        "body": [
            "\/**",
            " * Implements hook_stream_wrappers().",
            " *\/",
            "function hook_stream_wrappers() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'public' => array(",
            " *      'name' => t('Public files'),",
            " *      'class' => 'DrupalPublicStreamWrapper',",
            " *      'description' => t('Public local files served by the webserver.'),",
            " *      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,",
            " *    ),",
            " *    'private' => array(",
            " *      'name' => t('Private files'),",
            " *      'class' => 'DrupalPrivateStreamWrapper',",
            " *      'description' => t('Private local files served by Drupal.'),",
            " *      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,",
            " *    ),",
            " *    'temp' => array(",
            " *      'name' => t('Temporary files'),",
            " *      'class' => 'DrupalTempStreamWrapper',",
            " *      'description' => t('Temporary local files for upload and previews.'),",
            " *      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,",
            " *    ),",
            " *    'cdn' => array(",
            " *      'name' => t('Content delivery network files'),",
            " *      'class' => 'MyModuleCDNStreamWrapper',",
            " *      'description' => t('Files served by a content delivery network.'),",
            " *      \/\/ 'type' can be omitted to use the default of STREAM_WRAPPERS_NORMAL",
            " *    ),",
            " *    'youtube' => array(",
            " *      'name' => t('YouTube video'),",
            " *      'class' => 'MyModuleYouTubeStreamWrapper',",
            " *      'description' => t('Video streamed from YouTube.'),",
            " *      \/\/ A module implementing YouTube integration may decide to support using",
            " *      \/\/ the YouTube API for uploading video, but here, we assume that this",
            " *      \/\/ particular module only supports playing YouTube video.",
            " *      'type' => STREAM_WRAPPERS_READ_VISIBLE,",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Registers PHP stream wrapper implementations associated with a module.",
        "scope": "text.php"
    },
    "hook_stream_wrappers_alter": {
        "prefix": "hook_stream_wrappers_alter",
        "body": [
            "\/**",
            " * Implements hook_stream_wrappers_alter().",
            " *\/",
            "function hook_stream_wrappers_alter(&$wrappers) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Change the name of private files to reflect the performance.",
            " *  $wrappers['private']['name'] = t('Slow files');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the list of PHP stream wrapper implementations.",
        "scope": "text.php"
    },
    "hook_file_load": {
        "prefix": "hook_file_load",
        "body": [
            "\/**",
            " * Implements hook_file_load().",
            " *\/",
            "function hook_file_load($files) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add the upload specific data into the file object.",
            " *  $result = db_query('SELECT * FROM {upload} u WHERE u.fid IN (:fids)', array(':fids' => array_keys($files)))->fetchAll(PDO::FETCH_ASSOC);",
            " *  foreach ($result as $record) {",
            " *    foreach ($record as $key => $value) {",
            " *      $files[$record['fid']]->$key = $value;",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Load additional information into file objects.",
        "scope": "text.php"
    },
    "hook_file_presave": {
        "prefix": "hook_file_presave",
        "body": [
            "\/**",
            " * Implements hook_file_presave().",
            " *\/",
            "function hook_file_presave($file) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Change the file timestamp to an hour prior.",
            " *  $file->timestamp -= 3600;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a file being inserted or updated.",
        "scope": "text.php"
    },
    "hook_file_insert": {
        "prefix": "hook_file_insert",
        "body": [
            "\/**",
            " * Implements hook_file_insert().",
            " *\/",
            "function hook_file_insert($file) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a message to the log, if the file is a jpg",
            " *  $validate = file_validate_extensions($file, 'jpg');",
            " *  if (empty($validate)) {",
            " *    watchdog('file', 'A jpg has been added.');",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a file being added.",
        "scope": "text.php"
    },
    "hook_file_delete": {
        "prefix": "hook_file_delete",
        "body": [
            "\/**",
            " * Implements hook_file_delete().",
            " *\/",
            "function hook_file_delete($file) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Delete all information associated with the file.",
            " *  db_delete('upload')->condition('fid', $file->fid)->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to a file being deleted.",
        "scope": "text.php"
    },
    "hook_file_download": {
        "prefix": "hook_file_download",
        "body": [
            "\/**",
            " * Implements hook_file_download().",
            " *\/",
            "function hook_file_download($uri) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Check if the file is controlled by the current module.",
            " *  if (!file_prepare_directory($uri)) {",
            " *    $uri = FALSE;",
            " *  }",
            " *  if (strpos(file_uri_target($uri), variable_get('user_picture_path', 'pictures') . '\/picture-') === 0) {",
            " *    if (!user_access('access user profiles')) {",
            " *      \/\/ Access to the file is denied.",
            " *      return -1;",
            " *    }",
            " *    else {",
            " *      $info = image_get_info($uri);",
            " *      return array('Content-Type' => $info['mime_type']);",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Control access to private file downloads and specify HTTP headers.",
        "scope": "text.php"
    },
    "hook_schema": {
        "prefix": "hook_schema",
        "body": [
            "\/**",
            " * Implements hook_schema().",
            " *\/",
            "function hook_schema() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $schema['node'] = array(",
            " *    \/\/ Example (partial) specification for table \"node\".",
            " *    'description' => 'The base table for nodes.',",
            " *    'fields' => array(",
            " *      'nid' => array(",
            " *        'description' => 'The primary identifier for a node.',",
            " *        'type' => 'serial',",
            " *        'unsigned' => TRUE,",
            " *        'not null' => TRUE,",
            " *      ),",
            " *      'vid' => array(",
            " *        'description' => 'The current {node_revision}.vid version identifier.',",
            " *        'type' => 'int',",
            " *        'unsigned' => TRUE,",
            " *        'not null' => TRUE,",
            " *        'default' => 0,",
            " *      ),",
            " *      'type' => array(",
            " *        'description' => 'The {node_type} of this node.',",
            " *        'type' => 'varchar',",
            " *        'length' => 32,",
            " *        'not null' => TRUE,",
            " *        'default' => '',",
            " *      ),",
            " *      'title' => array(",
            " *        'description' => 'The title of this node, always treated as non-markup plain text.',",
            " *        'type' => 'varchar',",
            " *        'length' => 255,",
            " *        'not null' => TRUE,",
            " *        'default' => '',",
            " *      ),",
            " *    ),",
            " *    'indexes' => array(",
            " *      'node_changed'        => array('changed'),",
            " *      'node_created'        => array('created'),",
            " *    ),",
            " *    'unique keys' => array(",
            " *      'nid_vid' => array('nid', 'vid'),",
            " *      'vid'     => array('vid'),",
            " *    ),",
            " *    \/\/ For documentation purposes only; foreign keys are not created in the",
            " *    \/\/ database.",
            " *    'foreign keys' => array(",
            " *      'node_revision' => array(",
            " *        'table' => 'node_revision',",
            " *        'columns' => array('vid' => 'vid'),",
            " *      ),",
            " *      'node_author' => array(",
            " *        'table' => 'users',",
            " *        'columns' => array('uid' => 'uid'),",
            " *      ),",
            " *    ),",
            " *    'primary key' => array('nid'),",
            " *  );",
            " *  return $schema;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define the current version of the database schema.",
        "scope": "text.php"
    },
    "hook_schema_alter": {
        "prefix": "hook_schema_alter",
        "body": [
            "\/**",
            " * Implements hook_schema_alter().",
            " *\/",
            "function hook_schema_alter(&$schema) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add field to existing schema.",
            " *  $schema['users']['fields']['timezone_id'] = array(",
            " *    'type' => 'int',",
            " *    'not null' => TRUE,",
            " *    'default' => 0,",
            " *    'description' => 'Per-user timezone configuration.',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations to existing database schemas.",
        "scope": "text.php"
    },
    "hook_query_alter": {
        "prefix": "hook_query_alter",
        "body": [
            "\/**",
            " * Implements hook_query_alter().",
            " *\/",
            "function hook_query_alter(QueryAlterableInterface $query) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($query->hasTag('micro_limit')) {",
            " *    $query->range(0, 2);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations to a structured query.",
        "scope": "text.php"
    },
    "hook_query_TAG_alter": {
        "prefix": "hook_query_TAG_alter",
        "body": [
            "\/**",
            " * Implements hook_query_TAG_alter().",
            " *\/",
            "function hook_query_TAG_alter(QueryAlterableInterface $query) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Skip the extra expensive alterations if site has no node access control modules.",
            " *  if (!node_access_view_all_nodes()) {",
            " *    \/\/ Prevent duplicates records.",
            " *    $query->distinct();",
            " *    \/\/ The recognized operations are 'view', 'update', 'delete'.",
            " *    if (!$op = $query->getMetaData('op')) {",
            " *      $op = 'view';",
            " *    }",
            " *    \/\/ Skip the extra joins and conditions for node admins.",
            " *    if (!user_access('bypass node access')) {",
            " *      \/\/ The node_access table has the access grants for any given node.",
            " *      $access_alias = $query->join('node_access', 'na', '%alias.nid = n.nid');",
            " *      $or = db_or();",
            " *      \/\/ If any grant exists for the specified user, then user has access to the node for the specified operation.",
            " *      foreach (node_access_grants($op, $query->getMetaData('account')) as $realm => $gids) {",
            " *        foreach ($gids as $gid) {",
            " *          $or->condition(db_and()",
            " *            ->condition($access_alias . '.gid', $gid)",
            " *            ->condition($access_alias . '.realm', $realm)",
            " *          );",
            " *        }",
            " *      }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform alterations to a structured query for a given tag.",
        "scope": "text.php"
    },
    "needs to be updated\n * to reflect the current version of the database schema.\n *\n * See the @link http:\/\/drupal.org\/node\/146843 Schema API documentation @endlink\n * for details on hook_schema and how database tables are defined.\n *\n * Note that since this function is called from a full bootstrap, all functions\n *": {
        "prefix": "needs to be updated\n * to reflect the current version of the database schema.\n *\n * See the @link http:\/\/drupal.org\/node\/146843 Schema API documentation @endlink\n * for details on hook_schema and how database tables are defined.\n *\n * Note that since this function is called from a full bootstrap, all functions\n *",
        "body": [
            "\/**",
            " * Implements needs to be updated\n * to reflect the current version of the database schema.\n *\n * See the @link http:\/\/drupal.org\/node\/146843 Schema API documentation @endlink\n * for details on hook_schema and how database tables are defined.\n *\n * Note that since this function is called from a full bootstrap, all functions\n *().",
            " *\/",
            "function needs to be updated\n * to reflect the current version of the database schema.\n *\n * See the @link http:\/\/drupal.org\/node\/146843 Schema API documentation @endlink\n * for details on hook_schema and how database tables are defined.\n *\n * Note that since this function is called from a full bootstrap, all functions\n *(including those in modules enabled by the current page request) are\n * available when this hook is called. Use cases could be displaying a user\n * message, or calling a module function necessary for initial setup, etc.\n *\n * Please be sure that anything added or modified in this function that can\n * be removed during uninstall should be removed with hook_uninstall().\n *\n * @see hook_schema()\n * @see module_enable()\n * @see hook_enable()\n * @see hook_disable()\n * @see hook_uninstall()\n * @see hook_modules_installed()\n *\/\nfunction hook_install() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Populate the default {node_access} record.",
            " *  db_insert('node_access')",
            " *    ->fields(array(",
            " *      'nid' => 0,",
            " *      'gid' => 0,",
            " *      'realm' => 'all',",
            " *      'grant_view' => 1,",
            " *      'grant_update' => 0,",
            " *      'grant_delete' => 0,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform setup tasks when the module is installed.",
        "scope": "text.php"
    },
    "within that module. In the event that your\n *   update function depends on more than one update from a particular module,\n *   you should always list the highest numbered one here": {
        "prefix": "within that module. In the event that your\n *   update function depends on more than one update from a particular module,\n *   you should always list the highest numbered one here",
        "body": [
            "\/**",
            " * Implements within that module. In the event that your\n *   update function depends on more than one update from a particular module,\n *   you should always list the highest numbered one here().",
            " *\/",
            "function within that module. In the event that your\n *   update function depends on more than one update from a particular module,\n *   you should always list the highest numbered one here(since updates within\n *   a given module always run in numerical order).\n *\n * @see update_resolve_dependencies()\n * @see hook_update_N()\n *\/\nfunction hook_update_dependencies() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Indicate that the mymodule_update_7000() function provided by this module",
            " *  \/\/ must run after the another_module_update_7002() function provided by the",
            " *  \/\/ 'another_module' module.",
            " *  $dependencies['mymodule'][7000] = array(",
            " *    'another_module' => 7002,",
            " *  );",
            " *  \/\/ Indicate that the mymodule_update_7001() function provided by this module",
            " *  \/\/ must run before the yet_another_module_update_7004() function provided by",
            " *  \/\/ the 'yet_another_module' module. (Note that declaring dependencies in this",
            " *  \/\/ direction should be done only in rare situations, since it can lead to the",
            " *  \/\/ following problem: If a site has already run the yet_another_module",
            " *  \/\/ module's database updates before it updates its codebase to pick up the",
            " *  \/\/ newest mymodule code, then the dependency declared here will be ignored.)",
            " *  $dependencies['yet_another_module'][7004] = array(",
            " *    'mymodule' => 7001,",
            " *  );",
            " *  return $dependencies;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return an array of information about module update dependencies.",
        "scope": "text.php"
    },
    "hook_update_last_removed": {
        "prefix": "hook_update_last_removed",
        "body": [
            "\/**",
            " * Implements hook_update_last_removed().",
            " *\/",
            "function hook_update_last_removed() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ We've removed the 5.x-1.x version of mymodule, including database updates.",
            " *  \/\/ The next update function is mymodule_update_5200().",
            " *  return 5103;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return a number which is no longer available as hook_update_N().",
        "scope": "text.php"
    },
    "hook_uninstall": {
        "prefix": "hook_uninstall",
        "body": [
            "\/**",
            " * Implements hook_uninstall().",
            " *\/",
            "function hook_uninstall() {",
            "\/**",
            " * Sample code from the api example.",
            " *  variable_del('upload_file_types');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Remove any information that the module sets.",
        "scope": "text.php"
    },
    "hook_enable": {
        "prefix": "hook_enable",
        "body": [
            "\/**",
            " * Implements hook_enable().",
            " *\/",
            "function hook_enable() {",
            "\/**",
            " * Sample code from the api example.",
            " *  mymodule_cache_rebuild();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary actions after module is enabled.",
        "scope": "text.php"
    },
    "hook_disable": {
        "prefix": "hook_disable",
        "body": [
            "\/**",
            " * Implements hook_disable().",
            " *\/",
            "function hook_disable() {",
            "\/**",
            " * Sample code from the api example.",
            " *  mymodule_cache_rebuild();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary actions before module is disabled.",
        "scope": "text.php"
    },
    "hook_registry_files_alter": {
        "prefix": "hook_registry_files_alter",
        "body": [
            "\/**",
            " * Implements hook_registry_files_alter().",
            " *\/",
            "function hook_registry_files_alter(&$files, $modules) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($modules as $module) {",
            " *    \/\/ Only add test files for disabled modules, as enabled modules should",
            " *    \/\/ already include any test files they provide.",
            " *    if (!$module->status) {",
            " *      $dir = $module->dir;",
            " *      foreach ($module->info['files'] as $file) {",
            " *        if (substr($file, -5) == '.test') {",
            " *          $files[\"$dir\/$file\"] = array('module' => $module->name, 'weight' => $module->weight);",
            " *        }",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Perform necessary alterations to the list of files parsed by the registry.",
        "scope": "text.php"
    },
    "which you must\n * separately define and which is called when your task is run. This function\n * will receive the global installation state variable, $install_state, as\n * input, and has the opportunity to access or modify any of its settings. See\n * the install_state_defaults": {
        "prefix": "which you must\n * separately define and which is called when your task is run. This function\n * will receive the global installation state variable, $install_state, as\n * input, and has the opportunity to access or modify any of its settings. See\n * the install_state_defaults",
        "body": [
            "\/**",
            " * Implements which you must\n * separately define and which is called when your task is run. This function\n * will receive the global installation state variable, $install_state, as\n * input, and has the opportunity to access or modify any of its settings. See\n * the install_state_defaults().",
            " *\/",
            "function which you must\n * separately define and which is called when your task is run. This function\n * will receive the global installation state variable, $install_state, as\n * input, and has the opportunity to access or modify any of its settings. See\n * the install_state_defaults() function in the installer for the list of\n * $install_state settings used by Drupal core.\n *\n * At the end of your task function, you can indicate that you want the\n * installer to pause and display a page to the user by returning any themed\n * output that should be displayed on that page (but see below for tasks that\n * use the form API or batch API; the return values of these task functions are\n * handled differently). You should also use drupal_set_title() within the task\n * callback function to set a custom page title. For some tasks, however, you\n * may want to simply do some processing and pass control to the next task\n * without ending the page request; to indicate this, simply do not send back\n * a return value from your task function at all. This can be used, for\n * example, by installation profiles that need to configure certain site\n * settings in the database without obtaining any input from the user.\n *\n * The task function is treated specially if it defines a form or requires\n * batch processing; in that case, you should return either the form API\n * definition or batch API array, as appropriate. See below for more\n * information on the 'type' key that you must define in the task definition\n * to inform the installer that your task falls into one of those two\n * categories. It is important to use these APIs directly, since the installer\n * may be run non-interactively (for example, via a command line script), all\n * in one page request; in that case, the installer will automatically take\n * care of submitting forms and processing batches correctly for both types of\n * installations. You can inspect the $install_state['interactive'] boolean to\n * see whether or not the current installation is interactive, if you need\n * access to this information.\n *\n * Remember that a user installing Drupal interactively will be able to reload\n * an installation page multiple times, so you should use variable_set() and\n * variable_get() if you are collecting any data that you need to store and\n * inspect later. It is important to remove any temporary variables using\n * variable_del() before your last task has completed and control is handed\n * back to the installer.\n *\n * @param array $install_state\n *   An array of information about the current installation state.\n *\n * @return array\n *   A keyed array of tasks the profile will perform during the final stage of\n *   the installation. Each key represents the name of a function (usually a\n *   function defined by this profile, although that is not strictly required)\n *   that is called when that task is run. The values are associative arrays\n *   containing the following key-value pairs (all of which are optional):\n *   - display_name: The human-readable name of the task. This will be\n *     displayed to the user while the installer is running, along with a list\n *     of other tasks that are being run. Leave this unset to prevent the task\n *     from appearing in the list.\n *   - display: This is a boolean which can be used to provide finer-grained\n *     control over whether or not the task will display. This is mostly useful\n *     for tasks that are intended to display only under certain conditions;\n *     for these tasks, you can set 'display_name' to the name that you want to\n *     display, but then use this boolean to hide the task only when certain\n *     conditions apply.\n *   - type: A string representing the type of task. This parameter has three\n *     possible values:\n *     - normal: (default) This indicates that the task will be treated as a\n *       regular callback function, which does its processing and optionally\n *       returns HTML output.\n *     - batch: This indicates that the task function will return a batch API\n *       definition suitable for batch_set(). The installer will then take care\n *       of automatically running the task via batch processing.\n *     - form: This indicates that the task function will return a standard\n *       form API definition (and separately define validation and submit\n *       handlers, as appropriate). The installer will then take care of\n *       automatically directing the user through the form submission process.\n *   - run: A constant representing the manner in which the task will be run.\n *     This parameter has three possible values:\n *     - INSTALL_TASK_RUN_IF_NOT_COMPLETED: (default) This indicates that the\n *       task will run once during the installation of the profile.\n *     - INSTALL_TASK_SKIP: This indicates that the task will not run during\n *       the current installation page request. It can be used to skip running\n *       an installation task when certain conditions are met, even though the\n *       task may still show on the list of installation tasks presented to the\n *       user.\n *     - INSTALL_TASK_RUN_IF_REACHED: This indicates that the task will run on\n *       each installation page request that reaches it. This is rarely\n *       necessary for an installation profile to use; it is primarily used by\n *       the Drupal installer for bootstrap-related tasks.\n *   - function: Normally this does not need to be set, but it can be used to\n *     force the installer to call a different function when the task is run\n *     (rather than the function whose name is given by the array key). This\n *     could be used, for example, to allow the same function to be called by\n *     two different tasks.\n *\n * @see install_state_defaults()\n * @see batch_set()\n * @see hook_install_tasks_alter()\n * @see install_tasks()\n *\/\nfunction hook_install_tasks(&$install_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Here, we define a variable to allow tasks to indicate that a particular,",
            " *  \/\/ processor-intensive batch process needs to be triggered later on in the",
            " *  \/\/ installation.",
            " *  $myprofile_needs_batch_processing = variable_get('myprofile_needs_batch_processing', FALSE);",
            " *  $tasks = array(",
            " *    \/\/ This is an example of a task that defines a form which the user who is",
            " *    \/\/ installing the site will be asked to fill out. To implement this task,",
            " *    \/\/ your profile would define a function named myprofile_data_import_form()",
            " *    \/\/ as a normal form API callback function, with associated validation and",
            " *    \/\/ submit handlers. In the submit handler, in addition to saving whatever",
            " *    \/\/ other data you have collected from the user, you might also call",
            " *    \/\/ variable_set('myprofile_needs_batch_processing', TRUE) if the user has",
            " *    \/\/ entered data which requires that batch processing will need to occur",
            " *    \/\/ later on.",
            " *    'myprofile_data_import_form' => array(",
            " *      'display_name' => st('Data import options'),",
            " *      'type' => 'form',",
            " *    ),",
            " *    \/\/ Similarly, to implement this task, your profile would define a function",
            " *    \/\/ named myprofile_settings_form() with associated validation and submit",
            " *    \/\/ handlers. This form might be used to collect and save additional",
            " *    \/\/ information from the user that your profile needs. There are no extra",
            " *    \/\/ steps required for your profile to act as an \"installation wizard\"; you",
            " *    \/\/ can simply define as many tasks of type 'form' as you wish to execute,",
            " *    \/\/ and the forms will be presented to the user, one after another.",
            " *    'myprofile_settings_form' => array(",
            " *      'display_name' => st('Additional options'),",
            " *      'type' => 'form',",
            " *    ),",
            " *    \/\/ This is an example of a task that performs batch operations. To",
            " *    \/\/ implement this task, your profile would define a function named",
            " *    \/\/ myprofile_batch_processing() which returns a batch API array definition",
            " *    \/\/ that the installer will use to execute your batch operations. Due to the",
            " *    \/\/ 'myprofile_needs_batch_processing' variable used here, this task will be",
            " *    \/\/ hidden and skipped unless your profile set it to TRUE in one of the",
            " *    \/\/ previous tasks.",
            " *    'myprofile_batch_processing' => array(",
            " *      'display_name' => st('Import additional data'),",
            " *      'display' => $myprofile_needs_batch_processing,",
            " *      'type' => 'batch',",
            " *      'run' => $myprofile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,",
            " *    ),",
            " *    \/\/ This is an example of a task that will not be displayed in the list that",
            " *    \/\/ the user sees. To implement this task, your profile would define a",
            " *    \/\/ function named myprofile_final_site_setup(), in which additional,",
            " *    \/\/ automated site setup operations would be performed. Since this is the",
            " *    \/\/ last task defined by your profile, you should also use this function to",
            " *    \/\/ call variable_del('myprofile_needs_batch_processing') and clean up the",
            " *    \/\/ variable that was used above. If you want the user to pass to the final",
            " *    \/\/ Drupal installation tasks uninterrupted, return no output from this",
            " *    \/\/ function. Otherwise, return themed output that the user will see (for",
            " *    \/\/ example, a confirmation page explaining that your profile's tasks are",
            " *    \/\/ complete, with a link to reload the current page and therefore pass on",
            " *    \/\/ to the final Drupal installation tasks when the user is ready to do so).",
            " *    'myprofile_final_site_setup' => array(",
            " *    ),",
            " *  );",
            " *  return $tasks;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return an array of tasks to be performed by an installation profile.",
        "scope": "text.php"
    },
    "hook_drupal_goto_alter": {
        "prefix": "hook_drupal_goto_alter",
        "body": [
            "\/**",
            " * Implements hook_drupal_goto_alter().",
            " *\/",
            "function hook_drupal_goto_alter(&$path, &$options, &$http_response_code) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ A good addition to misery module.",
            " *  $http_response_code = 500;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Change the page the user is sent to by drupal_goto().",
        "scope": "text.php"
    },
    "hook_html_head_alter": {
        "prefix": "hook_html_head_alter",
        "body": [
            "\/**",
            " * Implements hook_html_head_alter().",
            " *\/",
            "function hook_html_head_alter(&$head_elements) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($head_elements as $key => $element) {",
            " *    if (isset($element['#attributes']['rel']) && $element['#attributes']['rel'] == 'canonical') {",
            " *      \/\/ I want a custom canonical URL.",
            " *      $head_elements[$key]['#attributes']['href'] = mymodule_canonical_url();",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter XHTML HEAD tags before they are rendered by drupal_get_html_head().",
        "scope": "text.php"
    },
    "hook_install_tasks_alter": {
        "prefix": "hook_install_tasks_alter",
        "body": [
            "\/**",
            " * Implements hook_install_tasks_alter().",
            " *\/",
            "function hook_install_tasks_alter(&$tasks, $install_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Replace the \"Choose language\" installation task provided by Drupal core",
            " *  \/\/ with a custom callback function defined by this installation profile.",
            " *  $tasks['install_select_locale']['function'] = 'myprofile_locale_selection';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the full list of installation tasks.",
        "scope": "text.php"
    },
    "hook_file_mimetype_mapping_alter": {
        "prefix": "hook_file_mimetype_mapping_alter",
        "body": [
            "\/**",
            " * Implements hook_file_mimetype_mapping_alter().",
            " *\/",
            "function hook_file_mimetype_mapping_alter(&$mapping) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add new MIME type 'drupal\/info'.",
            " *  $mapping['mimetypes']['example_info'] = 'drupal\/info';",
            " *  \/\/ Add new extension '.info' and map it to the 'drupal\/info' MIME type.",
            " *  $mapping['extensions']['info'] = 'example_info';",
            " *  \/\/ Override existing extension mapping for '.ogg' files.",
            " *  $mapping['extensions']['ogg'] = 189;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter MIME type mappings used to determine MIME type from a file extension.",
        "scope": "text.php"
    },
    "which performs the action": {
        "prefix": "which performs the action",
        "body": [
            "\/**",
            " * Implements which performs the action().",
            " *\/",
            "function which performs the action(which by convention is named\n *   MODULE_description-of-function_action)\n * - an optional form definition function that defines a configuration form\n *   (which has the name of the action function with '_form' appended to it.)\n *\n * The action function takes two to four arguments, which come from the input\n * arguments to actions_do().\n *\n * @return\n *   An associative array of action descriptions. The keys of the array\n *   are the names of the action functions, and each corresponding value\n *   is an associative array with the following key-value pairs:\n *   - 'type': The type of object this action acts upon. Core actions have types\n *     'node', 'user', 'comment', and 'system'.\n *   - 'label': The human-readable name of the action, which should be passed\n *     through the t() function for translation.\n *   - 'configurable': If FALSE, then the action doesn't require any extra\n *     configuration. If TRUE, then your module must define a form function with\n *     the same name as the action function with '_form' appended (e.g., the\n *     form for 'node_assign_owner_action' is 'node_assign_owner_action_form'.)\n *     This function takes $context as its only parameter, and is paired with\n *     the usual _submit function, and possibly a _validate function.\n *   - 'triggers': An array of the events (that is, hooks) that can trigger this\n *     action. For example: array('node_insert', 'user_update'). You can also\n *     declare support for any trigger by returning array('any') for this value.\n *   - 'behavior': (optional) A machine-readable array of behaviors of this\n *     action, used to signal additionally required actions that may need to be\n *     triggered. Currently recognized behaviors by Trigger module:\n *     - 'changes_property': If an action with this behavior is assigned to a\n *       trigger other than a \"presave\" hook, any save actions also assigned to\n *       this trigger are moved later in the list. If no save action is present,\n *       one will be added.\n *       Modules that are processing actions (like Trigger module) should take\n *       special care for the \"presave\" hook, in which case a dependent \"save\"\n *       action should NOT be invoked.\n *\n * @ingroup actions\n *\/\nfunction hook_action_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'comment_unpublish_action' => array(",
            " *      'type' => 'comment',",
            " *      'label' => t('Unpublish comment'),",
            " *      'configurable' => FALSE,",
            " *      'behavior' => array('changes_property'),",
            " *      'triggers' => array('comment_presave', 'comment_insert', 'comment_update'),",
            " *    ),",
            " *    'comment_unpublish_by_keyword_action' => array(",
            " *      'type' => 'comment',",
            " *      'label' => t('Unpublish comment containing keyword(s)'),",
            " *      'configurable' => TRUE,",
            " *      'behavior' => array('changes_property'),",
            " *      'triggers' => array('comment_presave', 'comment_insert', 'comment_update'),",
            " *    ),",
            " *    'comment_save_action' => array(",
            " *      'type' => 'comment',",
            " *      'label' => t('Save comment'),",
            " *      'configurable' => FALSE,",
            " *      'triggers' => array('comment_insert', 'comment_update'),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Declares information about actions.",
        "scope": "text.php"
    },
    "hook_actions_delete": {
        "prefix": "hook_actions_delete",
        "body": [
            "\/**",
            " * Implements hook_actions_delete().",
            " *\/",
            "function hook_actions_delete($aid) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('actions_assignments')",
            " *    ->condition('aid', $aid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Executes code after an action is deleted.",
        "scope": "text.php"
    },
    "hook_action_info_alter": {
        "prefix": "hook_action_info_alter",
        "body": [
            "\/**",
            " * Implements hook_action_info_alter().",
            " *\/",
            "function hook_action_info_alter(&$actions) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $actions['node_unpublish_action']['label'] = t('Unpublish and remove from public view.');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the actions declared by another module.",
        "scope": "text.php"
    },
    "hook_archiver_info": {
        "prefix": "hook_archiver_info",
        "body": [
            "\/**",
            " * Implements hook_archiver_info().",
            " *\/",
            "function hook_archiver_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'tar' => array(",
            " *      'class' => 'ArchiverTar',",
            " *      'extensions' => array('tar', 'tar.gz', 'tar.bz2'),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Declare archivers to the system.",
        "scope": "text.php"
    },
    "hook_archiver_info_alter": {
        "prefix": "hook_archiver_info_alter",
        "body": [
            "\/**",
            " * Implements hook_archiver_info_alter().",
            " *\/",
            "function hook_archiver_info_alter(&$info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $info['tar']['extensions'][] = 'tgz';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter archiver information declared by other modules.",
        "scope": "text.php"
    },
    "to format a date using the\n * chosen formatting.\n *\n * To define a date type in a module and make sure a format has been assigned to\n * it, without requiring a user to visit the administrative interface, use\n * @code variable_set": {
        "prefix": "to format a date using the\n * chosen formatting.\n *\n * To define a date type in a module and make sure a format has been assigned to\n * it, without requiring a user to visit the administrative interface, use\n * @code variable_set",
        "body": [
            "\/**",
            " * Implements to format a date using the\n * chosen formatting.\n *\n * To define a date type in a module and make sure a format has been assigned to\n * it, without requiring a user to visit the administrative interface, use\n * @code variable_set().",
            " *\/",
            "function to format a date using the\n * chosen formatting.\n *\n * To define a date type in a module and make sure a format has been assigned to\n * it, without requiring a user to visit the administrative interface, use\n * @code variable_set('date_format_' . $type, $format); @endcode\n * where $type is the machine-readable name defined here, and $format is a PHP\n * date format string.\n *\n * To avoid namespace collisions with date types defined by other modules, it is\n * recommended that each date type starts with the module name. A date type\n * can consist of letters, numbers and underscores.\n *\n * @return\n *   An array of date types where the keys are the machine-readable names and\n *   the values are the human-readable labels.\n *\n * @see hook_date_formats()\n * @see format_date()\n *\/\nfunction hook_date_format_types() {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Define the core date format types.",
            " *  return array(",
            " *    'long' => t('Long'),",
            " *    'medium' => t('Medium'),",
            " *    'short' => t('Short'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define additional date types.",
        "scope": "text.php"
    },
    "hook_date_format_types_alter": {
        "prefix": "hook_date_format_types_alter",
        "body": [
            "\/**",
            " * Implements hook_date_format_types_alter().",
            " *\/",
            "function hook_date_format_types_alter(&$types) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($types as $name => $type) {",
            " *    $types[$name]['locked'] = 1;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Modify existing date types.",
        "scope": "text.php"
    },
    "hook_date_formats": {
        "prefix": "hook_date_formats",
        "body": [
            "\/**",
            " * Implements hook_date_formats().",
            " *\/",
            "function hook_date_formats() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    array(",
            " *      'type' => 'mymodule_extra_long',",
            " *      'format' => 'l jS F Y H:i:s e',",
            " *      'locales' => array('en-ie'),",
            " *    ),",
            " *    array(",
            " *      'type' => 'mymodule_extra_long',",
            " *      'format' => 'l jS F Y h:i:sa',",
            " *      'locales' => array('en', 'en-us'),",
            " *    ),",
            " *    array(",
            " *      'type' => 'short',",
            " *      'format' => 'F Y',",
            " *      'locales' => array(),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define additional date formats.",
        "scope": "text.php"
    },
    "hook_date_formats_alter": {
        "prefix": "hook_date_formats_alter",
        "body": [
            "\/**",
            " * Implements hook_date_formats_alter().",
            " *\/",
            "function hook_date_formats_alter(&$formats) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($formats as $id => $format) {",
            " *    $formats[$id]['locales'][] = 'en-ca';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter date formats declared by another module.",
        "scope": "text.php"
    },
    "that can be used to explicitly\n * set the delivery callback from some other function. For example, for a module\n * named MODULE:\n * @code\n * function MODULE_page_delivery_callback_alter": {
        "prefix": "that can be used to explicitly\n * set the delivery callback from some other function. For example, for a module\n * named MODULE:\n * @code\n * function MODULE_page_delivery_callback_alter",
        "body": [
            "\/**",
            " * Implements that can be used to explicitly\n * set the delivery callback from some other function. For example, for a module\n * named MODULE:\n * @code\n * function MODULE_page_delivery_callback_alter().",
            " *\/",
            "function that can be used to explicitly\n * set the delivery callback from some other function. For example, for a module\n * named MODULE:\n * @code\n * function MODULE_page_delivery_callback_alter(&$callback, $set = FALSE) {",
            "\/**",
            " * Sample code from the api example.",
            " * *   static $stored_callback;",
            " * *   if ($set) {",
            " * *     $stored_callback = $callback;",
            " * *   }",
            " * *   elseif (isset($stored_callback)) {",
            " * *     $callback = $stored_callback;",
            " * *   }",
            " * * }",
            " * * function SOMEWHERE_ELSE() {",
            " * *   $desired_delivery_callback = 'foo';",
            " * *   MODULE_page_delivery_callback_alter($desired_delivery_callback, TRUE);",
            " * * }",
            " * * @endcode",
            " * *",
            " * * @param $callback",
            " * *   The name of a function.",
            " * *",
            " * * @see drupal_deliver_page()",
            " * *\/",
            " *function hook_page_delivery_callback_alter(&$callback) {",
            " *  \/\/ jQuery sets a HTTP_X_REQUESTED_WITH header of 'XMLHttpRequest'.",
            " *  \/\/ If a page would normally be delivered as an html page, and it is called",
            " *  \/\/ from jQuery, deliver it instead as an Ajax response.",
            " *  if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest' && $callback == 'drupal_deliver_html_page') {",
            " *    $callback = 'ajax_deliver';",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters the delivery callback used to send the result of the page callback to the browser.",
        "scope": "text.php"
    },
    "hook_system_themes_page_alter": {
        "prefix": "hook_system_themes_page_alter",
        "body": [
            "\/**",
            " * Implements hook_system_themes_page_alter().",
            " *\/",
            "function hook_system_themes_page_alter(&$theme_groups) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($theme_groups as $state => &$group) {",
            " *    foreach ($theme_groups[$state] as &$theme) {",
            " *      \/\/ Add a foo link to each list of theme operations.",
            " *      $theme->operations[] = array(",
            " *        'title' => t('Foo'),",
            " *        'href' => 'admin\/appearance\/foo',",
            " *        'query' => array('theme' => $theme->name)",
            " *      );",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters theme operation links.",
        "scope": "text.php"
    },
    "hook_url_inbound_alter": {
        "prefix": "hook_url_inbound_alter",
        "body": [
            "\/**",
            " * Implements hook_url_inbound_alter().",
            " *\/",
            "function hook_url_inbound_alter(&$path, $original_path, $path_language) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Create the path user\/me\/edit, which allows a user to edit their account.",
            " *  if (preg_match('|^user\/me\/edit(\/.*)?|', $path, $matches)) {",
            " *    global $user;",
            " *    $path = 'user\/' . $user->uid . '\/edit' . $matches[1];",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters inbound URL requests.",
        "scope": "text.php"
    },
    "hook_url_outbound_alter": {
        "prefix": "hook_url_outbound_alter",
        "body": [
            "\/**",
            " * Implements hook_url_outbound_alter().",
            " *\/",
            "function hook_url_outbound_alter(&$path, &$options, $original_path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Use an external RSS feed rather than the Drupal one.",
            " *  if ($path == 'rss.xml') {",
            " *    $path = 'http:\/\/example.com\/rss.xml';",
            " *    $options['external'] = TRUE;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alters outbound URLs.",
        "scope": "text.php"
    },
    "hook_username_alter": {
        "prefix": "hook_username_alter",
        "body": [
            "\/**",
            " * Implements hook_username_alter().",
            " *\/",
            "function hook_username_alter(&$name, $account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Display the user's uid instead of name.",
            " *  if (isset($account->uid)) {",
            " *    $name = t('User !uid', array('!uid' => $account->uid));",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the username that is displayed for a user.",
        "scope": "text.php"
    },
    "first\n * scans the text for [type:token] patterns, and splits the needed tokens into\n * groups by type. Then hook_tokens": {
        "prefix": "first\n * scans the text for [type:token] patterns, and splits the needed tokens into\n * groups by type. Then hook_tokens",
        "body": [
            "\/**",
            " * Implements first\n * scans the text for [type:token] patterns, and splits the needed tokens into\n * groups by type. Then hook_tokens().",
            " *\/",
            "function first\n * scans the text for [type:token] patterns, and splits the needed tokens into\n * groups by type. Then hook_tokens() is invoked on each token-type group,\n * allowing your module to respond by providing replacement text for any of\n * the tokens in the group that your module knows how to process.\n *\n * A module implementing this hook should also implement hook_token_info() in\n * order to list its available tokens on editing screens.\n *\n * @param $type\n *   The machine-readable name of the type (group) of token being replaced, such\n *   as 'node', 'user', or another type defined by a hook_token_info()\n *   implementation.\n * @param $tokens\n *   An array of tokens to be replaced. The keys are the machine-readable token\n *   names, and the values are the raw [type:token] strings that appeared in the\n *   original text.\n * @param $data\n *   (optional) An associative array of data objects to be used when generating\n *   replacement values, as supplied in the $data parameter to token_replace().\n * @param $options\n *   (optional) An associative array of options for token replacement; see\n *   token_replace() for possible values.\n *\n * @return\n *   An associative array of replacement values, keyed by the raw [type:token]\n *   strings from the original text.\n *\n * @see hook_token_info()\n * @see hook_tokens_alter()\n *\/\nfunction hook_tokens($type, $tokens, array $data = array(), array $options = array()) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $url_options = array('absolute' => TRUE);",
            " *  if (isset($options['language'])) {",
            " *    $url_options['language'] = $options['language'];",
            " *    $language_code = $options['language']->language;",
            " *  }",
            " *  else {",
            " *    $language_code = NULL;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide replacement values for placeholder tokens.",
        "scope": "text.php"
    },
    "hook_batch_alter": {
        "prefix": "hook_batch_alter",
        "body": [
            "\/**",
            " * Implements hook_batch_alter().",
            " *\/",
            "function hook_batch_alter(&$batch) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ If the current page request is inside the overlay, add ?render=overlay to",
            " *  \/\/ the success callback URL, so that it appears correctly within the overlay.",
            " *  if (overlay_get_mode() == 'child') {",
            " *    if (isset($batch['url_options']['query'])) {",
            " *      $batch['url_options']['query']['render'] = 'overlay';",
            " *    }",
            " *    else {",
            " *      $batch['url_options']['query'] = array('render' => 'overlay');",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter batch information before a batch is processed.",
        "scope": "text.php"
    },
    "hook_updater_info": {
        "prefix": "hook_updater_info",
        "body": [
            "\/**",
            " * Implements hook_updater_info().",
            " *\/",
            "function hook_updater_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'module' => array(",
            " *      'class' => 'ModuleUpdater',",
            " *      'name' => t('Update modules'),",
            " *      'weight' => 0,",
            " *    ),",
            " *    'theme' => array(",
            " *      'class' => 'ThemeUpdater',",
            " *      'name' => t('Update themes'),",
            " *      'weight' => 0,",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide information on Updaters (classes that can update Drupal).",
        "scope": "text.php"
    },
    "hook_updater_info_alter": {
        "prefix": "hook_updater_info_alter",
        "body": [
            "\/**",
            " * Implements hook_updater_info_alter().",
            " *\/",
            "function hook_updater_info_alter(&$updaters) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Adjust weight so that the theme Updater gets a chance to handle a given",
            " *  \/\/ update task before module updaters.",
            " *  $updaters['theme']['weight'] = -1;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the Updater information array.",
        "scope": "text.php"
    },
    "hook_countries_alter": {
        "prefix": "hook_countries_alter",
        "body": [
            "\/**",
            " * Implements hook_countries_alter().",
            " *\/",
            "function hook_countries_alter(&$countries) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Elbonia is now independent, so add it to the country list.",
            " *  $countries['EB'] = 'Elbonia';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the default country list.",
        "scope": "text.php"
    },
    "hook_menu_site_status_alter": {
        "prefix": "hook_menu_site_status_alter",
        "body": [
            "\/**",
            " * Implements hook_menu_site_status_alter().",
            " *\/",
            "function hook_menu_site_status_alter(&$menu_site_status, $path) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Allow access to my_module\/authentication even if site is in offline mode.",
            " *  if ($menu_site_status == MENU_SITE_OFFLINE && user_is_anonymous() && $path == 'my_module\/authentication') {",
            " *    $menu_site_status = MENU_SITE_ONLINE;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Control site status before menu dispatching.",
        "scope": "text.php"
    },
    "hook_filetransfer_info": {
        "prefix": "hook_filetransfer_info",
        "body": [
            "\/**",
            " * Implements hook_filetransfer_info().",
            " *\/",
            "function hook_filetransfer_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $info['sftp'] = array(",
            " *    'title' => t('SFTP (Secure FTP)'),",
            " *    'file' => 'sftp.filetransfer.inc',",
            " *    'class' => 'FileTransferSFTP',",
            " *    'weight' => 10,",
            " *  );",
            " *  return $info;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Register information about FileTransfer classes provided by a module.",
        "scope": "text.php"
    },
    "hook_filetransfer_info_alter": {
        "prefix": "hook_filetransfer_info_alter",
        "body": [
            "\/**",
            " * Implements hook_filetransfer_info_alter().",
            " *\/",
            "function hook_filetransfer_info_alter(&$filetransfer_info) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (variable_get('paranoia', FALSE)) {",
            " *    \/\/ Remove the FTP option entirely.",
            " *    unset($filetransfer_info['ftp']);",
            " *    \/\/ Make sure the SSH option is listed first.",
            " *    $filetransfer_info['ssh']['weight'] = -10;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the FileTransfer class registry.",
        "scope": "text.php"
    },
    "callback_queue_worker": {
        "prefix": "callback_queue_worker",
        "body": [
            "\/**",
            " * Implements callback_queue_worker().",
            " *\/",
            "function callback_queue_worker($queue_item_data) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $node = node_load($queue_item_data);",
            " *  $node->title = 'Updated title';",
            " *  node_save($node);",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Work on a single queue item.",
        "scope": "text.php"
    },
    "callback_entity_info_uri": {
        "prefix": "callback_entity_info_uri",
        "body": [
            "\/**",
            " * Implements callback_entity_info_uri().",
            " *\/",
            "function callback_entity_info_uri($entity) {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'path' => 'node\/' . $entity->nid,",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return the URI for an entity.",
        "scope": "text.php"
    },
    "callback_entity_info_label": {
        "prefix": "callback_entity_info_label",
        "body": [
            "\/**",
            " * Implements callback_entity_info_label().",
            " *\/",
            "function callback_entity_info_label($entity, $entity_type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  return empty($entity->title) ? 'Untitled entity' : $entity->title;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return the label of an entity.",
        "scope": "text.php"
    },
    "callback_entity_info_language": {
        "prefix": "callback_entity_info_language",
        "body": [
            "\/**",
            " * Implements callback_entity_info_language().",
            " *\/",
            "function callback_entity_info_language($entity, $entity_type) {",
            "\/**",
            " * Sample code from the api example.",
            " *  return $entity->language;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Return the language code of the entity.",
        "scope": "text.php"
    },
    "within an update\n * function - particularly CRUD functions, functions that depend on the schema\n *": {
        "prefix": "within an update\n * function - particularly CRUD functions, functions that depend on the schema\n *",
        "body": [
            "\/**",
            " * Implements within an update\n * function - particularly CRUD functions, functions that depend on the schema\n *().",
            " *\/",
            "function within an update\n * function - particularly CRUD functions, functions that depend on the schema\n *(for example by using drupal_write_record()), and any functions that invoke\n * hooks.\n *\n * Instead, a simplified utility function should be used. If a utility version\n * of the API function you require does not already exist, then you should\n * create a new function. The new utility function should be named\n * _update_N_mymodule_my_function(). N is the schema version the function acts\n * on (the schema version is the number N from the hook_update_N()\n * implementation where this schema was introduced, or a number following the\n * same numbering scheme), and mymodule_my_function is the name of the original\n * API function including the module's name.\n *\n * Examples:\n * - _update_6000_mymodule_save(): This function performs a save operation\n *   without invoking any hooks using the 6.x schema.\n * - _update_7000_mymodule_save(): This function performs the same save\n *   operation using the 7.x schema.\n *\n * The utility function should not invoke any hooks, and should perform database\n * operations using functions from the\n * @link database Database abstraction layer, @endlink\n * like db_insert(), db_update(), db_delete(), db_query(), and so on.\n *\n * If a change to the schema necessitates a change to the utility function, a\n * new function should be created with a name based on the version of the schema\n * it acts on. See _update_7000_bar_get_types() and _update_7001_bar_get_types()\n * in the code examples that follow.\n *\n * For example, foo.install could contain:\n * @code\n * function foo_update_dependencies() {",
            "\/**",
            " * Sample code from the api example.",
            " * *   \/\/ foo_update_7010() needs to run after bar_update_7000().",
            " * *   $dependencies['foo'][7010] = array(",
            " * *     'bar' => 7000,",
            " * *   );",
            " * *",
            " * *   \/\/ foo_update_7036() needs to run after bar_update_7001().",
            " * *   $dependencies['foo'][7036] = array(",
            " * *     'bar' => 7001,",
            " * *   );",
            " * *",
            " * *   return $dependencies;",
            " * * }",
            " * *",
            " * * function foo_update_7000() {",
            " * *   \/\/ No updates have been run on the {bar_types} table yet, so this needs",
            " * *   \/\/ to work with the 6.x schema.",
            " * *   foreach (_update_6000_bar_get_types() as $type) {",
            " * *     \/\/ Rename a variable.",
            " * *   }",
            " * * }",
            " * *",
            " * * function foo_update_7010() {",
            " * *    \/\/ Since foo_update_7010() is going to run after bar_update_7000(), it",
            " * *    \/\/ needs to operate on the new schema, not the old one.",
            " * *    foreach (_update_7000_bar_get_types() as $type) {",
            " * *      \/\/ Rename a different variable.",
            " * *    }",
            " * * }",
            " * *",
            " * * function foo_update_7036() {",
            " * *   \/\/ This update will run after bar_update_7001().",
            " * *   foreach (_update_7001_bar_get_types() as $type) {",
            " * *   }",
            " * * }",
            " * * @endcode",
            " * *",
            " * * And bar.install could contain:",
            " * * @code",
            " * * function bar_update_7000() {",
            " * *   \/\/ Type and bundle are confusing, so we renamed the table.",
            " * *   db_rename_table('bar_types', 'bar_bundles');",
            " * * }",
            " * *",
            " * * function bar_update_7001() {",
            " * *   \/\/ Database table names should be singular when possible.",
            " * *   db_rename_table('bar_bundles', 'bar_bundle');",
            " * * }",
            " * *",
            " * * function _update_6000_bar_get_types() {",
            " * *   db_query('SELECT * FROM {bar_types}')->fetchAll();",
            " * * }",
            " * *",
            " * * function _update_7000_bar_get_types() {",
            " * *   db_query('SELECT * FROM {bar_bundles'})->fetchAll();",
            " * * }",
            " * *",
            " * * function _update_7001_bar_get_types() {",
            " * *   db_query('SELECT * FROM {bar_bundle}')->fetchAll();",
            " * * }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "@defgroup update_api Update versions of API functions",
        "scope": "text.php"
    },
    "hook_form_system_theme_settings_alter": {
        "prefix": "hook_form_system_theme_settings_alter",
        "body": [
            "\/**",
            " * Implements hook_form_system_theme_settings_alter().",
            " *\/",
            "function hook_form_system_theme_settings_alter(&$form, &$form_state) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Add a checkbox to toggle the breadcrumb trail.",
            " *  $form['toggle_breadcrumb'] = array(",
            " *    '#type' => 'checkbox',",
            " *    '#title' => t('Display the breadcrumb'),",
            " *    '#default_value' => theme_get_setting('toggle_breadcrumb'),",
            " *    '#description'   => t('Show a trail of links from the homepage to the current page.'),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Allow themes to alter the theme-specific settings form.",
        "scope": "text.php"
    },
    "hook_preprocess_HOOK": {
        "prefix": "hook_preprocess_HOOK",
        "body": [
            "\/**",
            " * Implements hook_preprocess_HOOK().",
            " *\/",
            "function hook_preprocess_HOOK(&$variables) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ This example is from rdf_preprocess_image(). It adds an RDF attribute",
            " *  \/\/ to the image hook's variables.",
            " *  $variables['attributes']['typeof'] = array('foaf:Image');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Preprocess theme variables for a specific theme hook.",
        "scope": "text.php"
    },
    "hook_process": {
        "prefix": "hook_process",
        "body": [
            "\/**",
            " * Implements hook_process().",
            " *\/",
            "function hook_process(&$variables, $hook) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Wraps variables in RDF wrappers.",
            " *  if (!empty($variables['rdf_template_variable_attributes_array'])) {",
            " *    foreach ($variables['rdf_template_variable_attributes_array'] as $variable_name => $attributes) {",
            " *      $context = array(",
            " *        'hook' => $hook,",
            " *        'variable_name' => $variable_name,",
            " *        'variables' => $variables,",
            " *      );",
            " *      $variables[$variable_name] = theme('rdf_template_variable_wrapper', array('content' => $variables[$variable_name], 'attributes' => $attributes, 'context' => $context));",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Process theme variables for templates.",
        "scope": "text.php"
    },
    "hook_process_HOOK": {
        "prefix": "hook_process_HOOK",
        "body": [
            "\/**",
            " * Implements hook_process_HOOK().",
            " *\/",
            "function hook_process_HOOK(&$variables) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ @todo There are no use-cases in Drupal core for this hook. Find one from a",
            " *  \/\/   contributed module, or come up with a good example. Coming up with a good",
            " *  \/\/   example might be tough, since the intent is for nearly everything to be",
            " *  \/\/   achievable via preprocess functions, and for process functions to only be",
            " *  \/\/   used when requiring the later execution time.",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Process theme variables for a specific theme hook.",
        "scope": "text.php"
    },
    "hook_themes_enabled": {
        "prefix": "hook_themes_enabled",
        "body": [
            "\/**",
            " * Implements hook_themes_enabled().",
            " *\/",
            "function hook_themes_enabled($theme_list) {",
            "\/**",
            " * Sample code from the api example.",
            " *  foreach ($theme_list as $theme) {",
            " *    block_theme_initialize($theme);",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to themes being enabled.",
        "scope": "text.php"
    },
    "hook_themes_disabled": {
        "prefix": "hook_themes_disabled",
        "body": [
            "\/**",
            " * Implements hook_themes_disabled().",
            " *\/",
            "function hook_themes_disabled($theme_list) {",
            "\/**",
            " * Sample code from the api example.",
            " * \/\/ Clear all update module caches.",
            " *  _update_cache_clear();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to themes being disabled.",
        "scope": "text.php"
    },
    "hook_taxonomy_vocabulary_load": {
        "prefix": "hook_taxonomy_vocabulary_load",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_vocabulary_load().",
            " *\/",
            "function hook_taxonomy_vocabulary_load($vocabularies) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $result = db_select('mytable', 'm')",
            " *    ->fields('m', array('vid', 'foo'))",
            " *    ->condition('m.vid', array_keys($vocabularies), 'IN')",
            " *    ->execute();",
            " *  foreach ($result as $record) {",
            " *    $vocabularies[$record->vid]->foo = $record->foo;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy vocabularies when loaded.",
        "scope": "text.php"
    },
    "hook_taxonomy_vocabulary_presave": {
        "prefix": "hook_taxonomy_vocabulary_presave",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_vocabulary_presave().",
            " *\/",
            "function hook_taxonomy_vocabulary_presave($vocabulary) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $vocabulary->foo = 'bar';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy vocabularies before they are saved.",
        "scope": "text.php"
    },
    "hook_taxonomy_vocabulary_insert": {
        "prefix": "hook_taxonomy_vocabulary_insert",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_vocabulary_insert().",
            " *\/",
            "function hook_taxonomy_vocabulary_insert($vocabulary) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($vocabulary->machine_name == 'my_vocabulary') {",
            " *    $vocabulary->weight = 100;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy vocabularies when inserted.",
        "scope": "text.php"
    },
    "hook_taxonomy_vocabulary_update": {
        "prefix": "hook_taxonomy_vocabulary_update",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_vocabulary_update().",
            " *\/",
            "function hook_taxonomy_vocabulary_update($vocabulary) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('mytable')",
            " *    ->fields(array('foo' => $vocabulary->foo))",
            " *    ->condition('vid', $vocabulary->vid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy vocabularies when updated.",
        "scope": "text.php"
    },
    "hook_taxonomy_vocabulary_delete": {
        "prefix": "hook_taxonomy_vocabulary_delete",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_vocabulary_delete().",
            " *\/",
            "function hook_taxonomy_vocabulary_delete($vocabulary) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('vid', $vocabulary->vid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to the deletion of taxonomy vocabularies.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_load": {
        "prefix": "hook_taxonomy_term_load",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_load().",
            " *\/",
            "function hook_taxonomy_term_load($terms) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $result = db_select('mytable', 'm')",
            " *    ->fields('m', array('tid', 'foo'))",
            " *    ->condition('m.tid', array_keys($terms), 'IN')",
            " *    ->execute();",
            " *  foreach ($result as $record) {",
            " *    $terms[$record->tid]->foo = $record->foo;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy terms when loaded.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_presave": {
        "prefix": "hook_taxonomy_term_presave",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_presave().",
            " *\/",
            "function hook_taxonomy_term_presave($term) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $term->foo = 'bar';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy terms before they are saved.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_insert": {
        "prefix": "hook_taxonomy_term_insert",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_insert().",
            " *\/",
            "function hook_taxonomy_term_insert($term) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('mytable')",
            " *    ->fields(array(",
            " *      'tid' => $term->tid,",
            " *      'foo' => $term->foo,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy terms when inserted.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_update": {
        "prefix": "hook_taxonomy_term_update",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_update().",
            " *\/",
            "function hook_taxonomy_term_update($term) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_update('mytable')",
            " *    ->fields(array('foo' => $term->foo))",
            " *    ->condition('tid', $term->tid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on taxonomy terms when updated.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_delete": {
        "prefix": "hook_taxonomy_term_delete",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_delete().",
            " *\/",
            "function hook_taxonomy_term_delete($term) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('tid', $term->tid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to the deletion of taxonomy terms.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_view": {
        "prefix": "hook_taxonomy_term_view",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_view().",
            " *\/",
            "function hook_taxonomy_term_view($term, $view_mode, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $term->content['my_additional_field'] = array(",
            " *    '#markup' => $additional_field,",
            " *    '#weight' => 10,",
            " *    '#theme' => 'mymodule_my_additional_field',",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a taxonomy term that is being assembled before rendering.",
        "scope": "text.php"
    },
    "hook_taxonomy_term_view_alter": {
        "prefix": "hook_taxonomy_term_view_alter",
        "body": [
            "\/**",
            " * Implements hook_taxonomy_term_view_alter().",
            " *\/",
            "function hook_taxonomy_term_view_alter(&$build) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if ($build['#view_mode'] == 'full' && isset($build['an_additional_field'])) {",
            " *    \/\/ Change its weight.",
            " *    $build['an_additional_field']['#weight'] = -10;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the results of taxonomy_term_view().",
        "scope": "text.php"
    },
    "hook_trigger_info": {
        "prefix": "hook_trigger_info",
        "body": [
            "\/**",
            " * Implements hook_trigger_info().",
            " *\/",
            "function hook_trigger_info() {",
            "\/**",
            " * Sample code from the api example.",
            " *  return array(",
            " *    'node' => array(",
            " *      'node_presave' => array(",
            " *        'label' => t('When either saving new content or updating existing content'),",
            " *      ),",
            " *      'node_insert' => array(",
            " *        'label' => t('After saving new content'),",
            " *      ),",
            " *      'node_update' => array(",
            " *        'label' => t('After saving updated content'),",
            " *      ),",
            " *      'node_delete' => array(",
            " *        'label' => t('After deleting content'),",
            " *      ),",
            " *      'node_view' => array(",
            " *        'label' => t('When content is viewed by an authenticated user'),",
            " *      ),",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Declare triggers (events) for users to assign actions to.",
        "scope": "text.php"
    },
    "hook_trigger_info_alter": {
        "prefix": "hook_trigger_info_alter",
        "body": [
            "\/**",
            " * Implements hook_trigger_info_alter().",
            " *\/",
            "function hook_trigger_info_alter(&$triggers) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $triggers['node']['node_insert']['label'] = t('When content is saved');",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter triggers declared by hook_trigger_info().",
        "scope": "text.php"
    },
    "hook_update_status_alter": {
        "prefix": "hook_update_status_alter",
        "body": [
            "\/**",
            " * Implements hook_update_status_alter().",
            " *\/",
            "function hook_update_status_alter(&$projects) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $settings = variable_get('update_advanced_project_settings', array());",
            " *  foreach ($projects as $project => $project_info) {",
            " *    if (isset($settings[$project]) && isset($settings[$project]['check']) &&",
            " *        ($settings[$project]['check'] == 'never' ||",
            " *          (isset($project_info['recommended']) &&",
            " *            $settings[$project]['check'] === $project_info['recommended']))) {",
            " *      $projects[$project]['status'] = UPDATE_NOT_CHECKED;",
            " *      $projects[$project]['reason'] = t('Ignored from settings');",
            " *      if (!empty($settings[$project]['notes'])) {",
            " *        $projects[$project]['extra'][] = array(",
            " *          'class' => array('admin-note'),",
            " *          'label' => t('Administrator note'),",
            " *          'data' => $settings[$project]['notes'],",
            " *        );",
            " *      }",
            " *    }",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the information about available updates for projects.",
        "scope": "text.php"
    },
    "hook_verify_update_archive": {
        "prefix": "hook_verify_update_archive",
        "body": [
            "\/**",
            " * Implements hook_verify_update_archive().",
            " *\/",
            "function hook_verify_update_archive($project, $archive_file, $directory) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $errors = array();",
            " *  if (!file_exists($directory)) {",
            " *    $errors[] = t('The %directory does not exist.', array('%directory' => $directory));",
            " *  }",
            " *  \/\/ Add other checks on the archive integrity here.",
            " *  return $errors;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Verify an archive after it has been downloaded and extracted.",
        "scope": "text.php"
    },
    "hook_user_load": {
        "prefix": "hook_user_load",
        "body": [
            "\/**",
            " * Implements hook_user_load().",
            " *\/",
            "function hook_user_load($users) {",
            "\/**",
            " * Sample code from the api example.",
            " *  $result = db_query('SELECT uid, foo FROM {my_table} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));",
            " *  foreach ($result as $record) {",
            " *    $users[$record->uid]->foo = $record->foo;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on user objects when loaded from the database.",
        "scope": "text.php"
    },
    "hook_user_delete": {
        "prefix": "hook_user_delete",
        "body": [
            "\/**",
            " * Implements hook_user_delete().",
            " *\/",
            "function hook_user_delete($account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_delete('mytable')",
            " *    ->condition('uid', $account->uid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to user deletion.",
        "scope": "text.php"
    },
    "with\n * the operation, which is called when the form is submitted. The callback function\n * receives one initial argument, which is an array of the checked users.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - \"label\": Required. The label for the operation, displayed in the dropdown menu.\n *   - \"callback\": Required. The function to call for the operation.\n *   - \"callback arguments\": Optional. An array of additional arguments to pass to\n *     the callback function.\n *\n *\/\nfunction hook_user_operations": {
        "prefix": "with\n * the operation, which is called when the form is submitted. The callback function\n * receives one initial argument, which is an array of the checked users.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - \"label\": Required. The label for the operation, displayed in the dropdown menu.\n *   - \"callback\": Required. The function to call for the operation.\n *   - \"callback arguments\": Optional. An array of additional arguments to pass to\n *     the callback function.\n *\n *\/\nfunction hook_user_operations",
        "body": [
            "\/**",
            " * Implements with\n * the operation, which is called when the form is submitted. The callback function\n * receives one initial argument, which is an array of the checked users.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - \"label\": Required. The label for the operation, displayed in the dropdown menu.\n *   - \"callback\": Required. The function to call for the operation.\n *   - \"callback arguments\": Optional. An array of additional arguments to pass to\n *     the callback function.\n *\n *\/\nfunction hook_user_operations().",
            " *\/",
            "function with\n * the operation, which is called when the form is submitted. The callback function\n * receives one initial argument, which is an array of the checked users.\n *\n * @return\n *   An array of operations. Each operation is an associative array that may\n *   contain the following key-value pairs:\n *   - \"label\": Required. The label for the operation, displayed in the dropdown menu.\n *   - \"callback\": Required. The function to call for the operation.\n *   - \"callback arguments\": Optional. An array of additional arguments to pass to\n *     the callback function.\n *\n *\/\nfunction hook_user_operations() {",
            "\/**",
            " * Sample code from the api example.",
            " *  $operations = array(",
            " *    'unblock' => array(",
            " *      'label' => t('Unblock the selected users'),",
            " *      'callback' => 'user_user_operations_unblock',",
            " *    ),",
            " *    'block' => array(",
            " *      'label' => t('Block the selected users'),",
            " *      'callback' => 'user_user_operations_block',",
            " *    ),",
            " *    'cancel' => array(",
            " *      'label' => t('Cancel the selected user accounts'),",
            " *    ),",
            " *  );",
            " *  return $operations;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Add mass user operations.",
        "scope": "text.php"
    },
    "in step two should contain the following code in order to\n * display your new category:\n * @code\n * if": {
        "prefix": "in step two should contain the following code in order to\n * display your new category:\n * @code\n * if",
        "body": [
            "\/**",
            " * Implements in step two should contain the following code in order to\n * display your new category:\n * @code\n * if().",
            " *\/",
            "function in step two should contain the following code in order to\n * display your new category:\n * @code\n * if($form['#user_category'] == 'mycategory') {",
            "\/**",
            " * Sample code from the api example.",
            " * *   \/\/ Return your form here.",
            " * * }",
            " * * @endcode",
            " * *",
            " * * @return",
            " * *   An array of associative arrays. Each inner array has elements:",
            " * *   - \"name\": The internal name of the category.",
            " * *   - \"title\": The human-readable, localized name of the category.",
            " * *   - \"weight\": An integer specifying the category's sort ordering.",
            " * *   - \"access callback\": Name of the access callback function to use to",
            " * *     determine whether the user can edit the category. Defaults to using",
            " * *     user_edit_access(). See hook_menu() for more information on access",
            " * *     callbacks.",
            " * *   - \"access arguments\": Arguments for the access callback function. Defaults",
            " * *     to array(1).",
            " * *\/",
            " *function hook_user_categories() {",
            " *  return array(array(",
            " *    'name' => 'account',",
            " *    'title' => t('Account settings'),",
            " *    'weight' => 1,",
            " *  ));",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Define a list of user settings or profile information categories.",
        "scope": "text.php"
    },
    "hook_user_presave": {
        "prefix": "hook_user_presave",
        "body": [
            "\/**",
            " * Implements hook_user_presave().",
            " *\/",
            "function hook_user_presave(&$edit, $account, $category) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Make sure that our form value 'mymodule_foo' is stored as",
            " *  \/\/ 'mymodule_bar' in the 'data' (serialized) column.",
            " *  if (isset($edit['mymodule_foo'])) {",
            " *    $edit['data']['mymodule_bar'] = $edit['mymodule_foo'];",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "A user account is about to be created or updated.",
        "scope": "text.php"
    },
    "hook_user_insert": {
        "prefix": "hook_user_insert",
        "body": [
            "\/**",
            " * Implements hook_user_insert().",
            " *\/",
            "function hook_user_insert(&$edit, $account, $category) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('mytable')",
            " *    ->fields(array(",
            " *      'myfield' => $edit['myfield'],",
            " *      'uid' => $account->uid,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "A user account was created.",
        "scope": "text.php"
    },
    "hook_user_update": {
        "prefix": "hook_user_update",
        "body": [
            "\/**",
            " * Implements hook_user_update().",
            " *\/",
            "function hook_user_update(&$edit, $account, $category) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('user_changes')",
            " *    ->fields(array(",
            " *      'uid' => $account->uid,",
            " *      'changed' => time(),",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "A user account was updated.",
        "scope": "text.php"
    },
    "hook_user_login": {
        "prefix": "hook_user_login",
        "body": [
            "\/**",
            " * Implements hook_user_login().",
            " *\/",
            "function hook_user_login(&$edit, $account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ If the user has a NULL time zone, notify them to set a time zone.",
            " *  if (!$account->timezone && variable_get('configurable_timezones', 1) && variable_get('empty_timezone_message', 0)) {",
            " *    drupal_set_message(t('Configure your <a href=\"@user-edit\">account time zone setting<\/a>.', array('@user-edit' => url(\"user\/$account->uid\/edit\", array('query' => drupal_get_destination(), 'fragment' => 'edit-timezone')))));",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The user just logged in.",
        "scope": "text.php"
    },
    "hook_user_logout": {
        "prefix": "hook_user_logout",
        "body": [
            "\/**",
            " * Implements hook_user_logout().",
            " *\/",
            "function hook_user_logout($account) {",
            "\/**",
            " * Sample code from the api example.",
            " *  db_insert('logouts')",
            " *    ->fields(array(",
            " *      'uid' => $account->uid,",
            " *      'time' => time(),",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The user just logged out.",
        "scope": "text.php"
    },
    "hook_user_view": {
        "prefix": "hook_user_view",
        "body": [
            "\/**",
            " * Implements hook_user_view().",
            " *\/",
            "function hook_user_view($account, $view_mode, $langcode) {",
            "\/**",
            " * Sample code from the api example.",
            " *  if (user_access('create blog content', $account)) {",
            " *    $account->content['summary']['blog'] =  array(",
            " *      '#type' => 'user_profile_item',",
            " *      '#title' => t('Blog'),",
            " *      '#markup' => l(t('View recent blog entries'), \"blog\/$account->uid\", array('attributes' => array('title' => t(\"Read !username's latest blog entries.\", array('!username' => format_username($account)))))),",
            " *      '#attributes' => array('class' => array('blog')),",
            " *    );",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The user's account information is being displayed.",
        "scope": "text.php"
    },
    "hook_user_view_alter": {
        "prefix": "hook_user_view_alter",
        "body": [
            "\/**",
            " * Implements hook_user_view_alter().",
            " *\/",
            "function hook_user_view_alter(&$build) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Check for the existence of a field added by another module.",
            " *  if (isset($build['an_additional_field'])) {",
            " *    \/\/ Change its weight.",
            " *    $build['an_additional_field']['#weight'] = -10;",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "The user was built; the module may modify the structured content.",
        "scope": "text.php"
    },
    "hook_user_role_presave": {
        "prefix": "hook_user_role_presave",
        "body": [
            "\/**",
            " * Implements hook_user_role_presave().",
            " *\/",
            "function hook_user_role_presave($role) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Set a UUID for the user role if it doesn't already exist",
            " *  if (empty($role->uuid)) {",
            " *    $role->uuid = uuid_uuid();",
            " *  }",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Act on a user role being inserted or updated.",
        "scope": "text.php"
    },
    "hook_user_role_insert": {
        "prefix": "hook_user_role_insert",
        "body": [
            "\/**",
            " * Implements hook_user_role_insert().",
            " *\/",
            "function hook_user_role_insert($role) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Save extra fields provided by the module to user roles.",
            " *  db_insert('my_module_table')",
            " *    ->fields(array(",
            " *      'rid' => $role->rid,",
            " *      'role_description' => $role->description,",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to creation of a new user role.",
        "scope": "text.php"
    },
    "hook_user_role_update": {
        "prefix": "hook_user_role_update",
        "body": [
            "\/**",
            " * Implements hook_user_role_update().",
            " *\/",
            "function hook_user_role_update($role) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Save extra fields provided by the module to user roles.",
            " *  db_merge('my_module_table')",
            " *    ->key(array('rid' => $role->rid))",
            " *    ->fields(array(",
            " *      'role_description' => $role->description",
            " *    ))",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to updates to a user role.",
        "scope": "text.php"
    },
    "hook_user_role_delete": {
        "prefix": "hook_user_role_delete",
        "body": [
            "\/**",
            " * Implements hook_user_role_delete().",
            " *\/",
            "function hook_user_role_delete($role) {",
            "\/**",
            " * Sample code from the api example.",
            " *  \/\/ Delete existing instances of the deleted role.",
            " *  db_delete('my_module_table')",
            " *    ->condition('rid', $role->rid)",
            " *    ->execute();",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Respond to user role deletion.",
        "scope": "text.php"
    }
}
