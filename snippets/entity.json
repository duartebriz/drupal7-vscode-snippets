{
    "entity_crud_hook_entity_info": {
        "prefix": "entity_crud_hook_entity_info",
        "body": [
            "\/**",
            " * Implements returns the entities keyed by name. See entity_test_get_types().",
            " *\/",
            "function entity_crud_hook_entity_info() {",
            "\/**",
            " * Sample code from the api example:",
            " *  $return = array(",
            " *    'entity_test' => array(",
            " *      'label' => t('Test Entity'),",
            " *      'entity class' => 'Entity',",
            " *      'controller class' => 'EntityAPIController',",
            " *      'base table' => 'entity_test',",
            " *      'module' => 'entity_test',",
            " *      'fieldable' => TRUE,",
            " *      'entity keys' => array(",
            " *        'id' => 'pid',",
            " *        'name' => 'name',",
            " *        'bundle' => 'type',",
            " *      ),",
            " *      'bundles' => array(),",
            " *    ),",
            " *  );",
            " *  foreach (entity_test_get_types() as $name => $info) {",
            " *    $return['entity_test']['bundles'][$name] = array(",
            " *      'label' => $info['label'],",
            " *    );",
            " *  }",
            " *  return $return;",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide an entity type via the entity CRUD API.",
        "scope": "text.php"
    },
    "entity_metadata_hook_entity_info": {
        "prefix": "entity_metadata_hook_entity_info",
        "body": [
            "\/**",
            " * Implements entity_metadata_hook_entity_info().",
            " *\/",
            "function entity_metadata_hook_entity_info() {",
            "\/**",
            " * Sample code from the api example:",
            " *  return array(",
            " *    'node' => array(",
            " *      'label' => t('Node'),",
            " *      'access callback' => 'entity_metadata_no_hook_node_access',",
            " *      \/\/ ...",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide additional metadata for entities.",
        "scope": "text.php"
    },
    "entity_hook_field_info": {
        "prefix": "entity_hook_field_info",
        "body": [
            "\/**",
            " * Implements names. Apart from that any property info provided\n * for a field instance using the key 'property info' is added in too.\n *\n * @see entity_field_info_alter().",
            " *\/",
            "function entity_hook_field_info() {",
            "\/**",
            " * Sample code from the api example:",
            " *  return array(",
            " *    'text' => array(",
            " *      'label' => t('Text'),",
            " *      'property_type' => 'text',",
            " *      \/\/ ...",
            " *    ),",
            " *  );",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Provide entity property information for fields.",
        "scope": "text.php"
    },
    "hook_entity_views_field_handlers_alter": {
        "prefix": "hook_entity_views_field_handlers_alter",
        "body": [
            "\/**",
            " * Implements hook_entity_views_field_handlers_alter().",
            " *\/",
            "function hook_entity_views_field_handlers_alter(array &$field_handlers) {",
            "\/**",
            " * Sample code from the api example:",
            " *  $field_handlers['duration'] = 'example_duration_handler';",
            " *  $field_handlers['node'] = 'example_node_handler';",
            " *\/",
            "",
            " \/* Your code here *\/",
            "}"
        ],
        "description": "Alter the handlers used by the data selection tables provided by this module.",
        "scope": "text.php"
    }
}
